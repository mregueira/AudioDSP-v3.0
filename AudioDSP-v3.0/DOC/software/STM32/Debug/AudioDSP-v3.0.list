
AudioDSP-v3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c1c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08005db4  08005db4  00015db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dd8  08005dd8  00023fe8  2**0
                  CONTENTS
  4 .ARM          00000008  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005de0  08005de0  00023fe8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de0  08005de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005de4  08005de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003fe8  20000000  08005de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20003fe8  08009dd0  00023fe8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004450  08009dd0  00024450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00023fe8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00024018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d4e8  00000000  00000000  0002405b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dce  00000000  00000000  00031543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00033318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae3  00000000  00000000  000340e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029cf2  00000000  00000000  00034bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010922  00000000  00000000  0005e8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011ea4e  00000000  00000000  0006f1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f60  00000000  00000000  0018dc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00191b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20003fe8 	.word	0x20003fe8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005d9c 	.word	0x08005d9c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20003fec 	.word	0x20003fec
 80001d4:	08005d9c 	.word	0x08005d9c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b970 	b.w	8000de8 <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9e08      	ldr	r6, [sp, #32]
 8000b26:	460d      	mov	r5, r1
 8000b28:	4604      	mov	r4, r0
 8000b2a:	460f      	mov	r7, r1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d14a      	bne.n	8000bc6 <__udivmoddi4+0xa6>
 8000b30:	428a      	cmp	r2, r1
 8000b32:	4694      	mov	ip, r2
 8000b34:	d965      	bls.n	8000c02 <__udivmoddi4+0xe2>
 8000b36:	fab2 f382 	clz	r3, r2
 8000b3a:	b143      	cbz	r3, 8000b4e <__udivmoddi4+0x2e>
 8000b3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b40:	f1c3 0220 	rsb	r2, r3, #32
 8000b44:	409f      	lsls	r7, r3
 8000b46:	fa20 f202 	lsr.w	r2, r0, r2
 8000b4a:	4317      	orrs	r7, r2
 8000b4c:	409c      	lsls	r4, r3
 8000b4e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b52:	fa1f f58c 	uxth.w	r5, ip
 8000b56:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b5a:	0c22      	lsrs	r2, r4, #16
 8000b5c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b60:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b64:	fb01 f005 	mul.w	r0, r1, r5
 8000b68:	4290      	cmp	r0, r2
 8000b6a:	d90a      	bls.n	8000b82 <__udivmoddi4+0x62>
 8000b6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b70:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b74:	f080 811c 	bcs.w	8000db0 <__udivmoddi4+0x290>
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	f240 8119 	bls.w	8000db0 <__udivmoddi4+0x290>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4462      	add	r2, ip
 8000b82:	1a12      	subs	r2, r2, r0
 8000b84:	b2a4      	uxth	r4, r4
 8000b86:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b8a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b92:	fb00 f505 	mul.w	r5, r0, r5
 8000b96:	42a5      	cmp	r5, r4
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x90>
 8000b9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba2:	f080 8107 	bcs.w	8000db4 <__udivmoddi4+0x294>
 8000ba6:	42a5      	cmp	r5, r4
 8000ba8:	f240 8104 	bls.w	8000db4 <__udivmoddi4+0x294>
 8000bac:	4464      	add	r4, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb4:	1b64      	subs	r4, r4, r5
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11e      	cbz	r6, 8000bc2 <__udivmoddi4+0xa2>
 8000bba:	40dc      	lsrs	r4, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0xbc>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	f000 80ed 	beq.w	8000daa <__udivmoddi4+0x28a>
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bdc:	fab3 f183 	clz	r1, r3
 8000be0:	2900      	cmp	r1, #0
 8000be2:	d149      	bne.n	8000c78 <__udivmoddi4+0x158>
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	d302      	bcc.n	8000bee <__udivmoddi4+0xce>
 8000be8:	4282      	cmp	r2, r0
 8000bea:	f200 80f8 	bhi.w	8000dde <__udivmoddi4+0x2be>
 8000bee:	1a84      	subs	r4, r0, r2
 8000bf0:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	4617      	mov	r7, r2
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d0e2      	beq.n	8000bc2 <__udivmoddi4+0xa2>
 8000bfc:	e9c6 4700 	strd	r4, r7, [r6]
 8000c00:	e7df      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000c02:	b902      	cbnz	r2, 8000c06 <__udivmoddi4+0xe6>
 8000c04:	deff      	udf	#255	; 0xff
 8000c06:	fab2 f382 	clz	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x210>
 8000c10:	1a8a      	subs	r2, r1, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c20:	fb07 2015 	mls	r0, r7, r5, r2
 8000c24:	0c22      	lsrs	r2, r4, #16
 8000c26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c2a:	fb0e f005 	mul.w	r0, lr, r5
 8000c2e:	4290      	cmp	r0, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x124>
 8000c32:	eb1c 0202 	adds.w	r2, ip, r2
 8000c36:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x122>
 8000c3c:	4290      	cmp	r0, r2
 8000c3e:	f200 80cb 	bhi.w	8000dd8 <__udivmoddi4+0x2b8>
 8000c42:	4645      	mov	r5, r8
 8000c44:	1a12      	subs	r2, r2, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c4c:	fb07 2210 	mls	r2, r7, r0, r2
 8000c50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c54:	fb0e fe00 	mul.w	lr, lr, r0
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x14e>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x14c>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	f200 80bb 	bhi.w	8000de2 <__udivmoddi4+0x2c2>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c76:	e79f      	b.n	8000bb8 <__udivmoddi4+0x98>
 8000c78:	f1c1 0720 	rsb	r7, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c86:	fa05 f401 	lsl.w	r4, r5, r1
 8000c8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8e:	40fd      	lsrs	r5, r7
 8000c90:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	fb09 5518 	mls	r5, r9, r8, r5
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cac:	42a5      	cmp	r5, r4
 8000cae:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb2:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb6:	d90b      	bls.n	8000cd0 <__udivmoddi4+0x1b0>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc0:	f080 8088 	bcs.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cc4:	42a5      	cmp	r5, r4
 8000cc6:	f240 8085 	bls.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cca:	f1a8 0802 	sub.w	r8, r8, #2
 8000cce:	4464      	add	r4, ip
 8000cd0:	1b64      	subs	r4, r4, r5
 8000cd2:	b29d      	uxth	r5, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ce0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1da>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cf0:	d26c      	bcs.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	d96a      	bls.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fba3 9502 	umull	r9, r5, r3, r2
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	42ac      	cmp	r4, r5
 8000d08:	46c8      	mov	r8, r9
 8000d0a:	46ae      	mov	lr, r5
 8000d0c:	d356      	bcc.n	8000dbc <__udivmoddi4+0x29c>
 8000d0e:	d053      	beq.n	8000db8 <__udivmoddi4+0x298>
 8000d10:	b156      	cbz	r6, 8000d28 <__udivmoddi4+0x208>
 8000d12:	ebb0 0208 	subs.w	r2, r0, r8
 8000d16:	eb64 040e 	sbc.w	r4, r4, lr
 8000d1a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1e:	40ca      	lsrs	r2, r1
 8000d20:	40cc      	lsrs	r4, r1
 8000d22:	4317      	orrs	r7, r2
 8000d24:	e9c6 7400 	strd	r7, r4, [r6]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d30:	f1c3 0120 	rsb	r1, r3, #32
 8000d34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d38:	fa20 f201 	lsr.w	r2, r0, r1
 8000d3c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d40:	409d      	lsls	r5, r3
 8000d42:	432a      	orrs	r2, r5
 8000d44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d50:	fb07 1510 	mls	r5, r7, r0, r1
 8000d54:	0c11      	lsrs	r1, r2, #16
 8000d56:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d5a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5e:	428d      	cmp	r5, r1
 8000d60:	fa04 f403 	lsl.w	r4, r4, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x258>
 8000d66:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6e:	d22f      	bcs.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d70:	428d      	cmp	r5, r1
 8000d72:	d92d      	bls.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1b49      	subs	r1, r1, r5
 8000d7a:	b292      	uxth	r2, r2
 8000d7c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d80:	fb07 1115 	mls	r1, r7, r5, r1
 8000d84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d88:	fb05 f10e 	mul.w	r1, r5, lr
 8000d8c:	4291      	cmp	r1, r2
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x282>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d98:	d216      	bcs.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9a:	4291      	cmp	r1, r2
 8000d9c:	d914      	bls.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9e:	3d02      	subs	r5, #2
 8000da0:	4462      	add	r2, ip
 8000da2:	1a52      	subs	r2, r2, r1
 8000da4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da8:	e738      	b.n	8000c1c <__udivmoddi4+0xfc>
 8000daa:	4631      	mov	r1, r6
 8000dac:	4630      	mov	r0, r6
 8000dae:	e708      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000db0:	4639      	mov	r1, r7
 8000db2:	e6e6      	b.n	8000b82 <__udivmoddi4+0x62>
 8000db4:	4610      	mov	r0, r2
 8000db6:	e6fb      	b.n	8000bb0 <__udivmoddi4+0x90>
 8000db8:	4548      	cmp	r0, r9
 8000dba:	d2a9      	bcs.n	8000d10 <__udivmoddi4+0x1f0>
 8000dbc:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	e7a3      	b.n	8000d10 <__udivmoddi4+0x1f0>
 8000dc8:	4645      	mov	r5, r8
 8000dca:	e7ea      	b.n	8000da2 <__udivmoddi4+0x282>
 8000dcc:	462b      	mov	r3, r5
 8000dce:	e794      	b.n	8000cfa <__udivmoddi4+0x1da>
 8000dd0:	4640      	mov	r0, r8
 8000dd2:	e7d1      	b.n	8000d78 <__udivmoddi4+0x258>
 8000dd4:	46d0      	mov	r8, sl
 8000dd6:	e77b      	b.n	8000cd0 <__udivmoddi4+0x1b0>
 8000dd8:	3d02      	subs	r5, #2
 8000dda:	4462      	add	r2, ip
 8000ddc:	e732      	b.n	8000c44 <__udivmoddi4+0x124>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e70a      	b.n	8000bf8 <__udivmoddi4+0xd8>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e742      	b.n	8000c6e <__udivmoddi4+0x14e>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <default_download_IC_1>:
/*
 * Default Download
 */
#define DEFAULT_DOWNLOAD_SIZE_IC_1 65

void default_download_IC_1() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R0_SOFT_RESET_IC_1_Default );
 8000df0:	4bdd      	ldr	r3, [pc, #884]	; (8001168 <default_download_IC_1+0x37c>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	f64f 0190 	movw	r1, #63632	; 0xf890
 8000df8:	2070      	movs	r0, #112	; 0x70
 8000dfa:	f001 fb21 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R1_SOFT_RESET_IC_1_Default );
 8000dfe:	4bdb      	ldr	r3, [pc, #876]	; (800116c <default_download_IC_1+0x380>)
 8000e00:	2202      	movs	r2, #2
 8000e02:	f64f 0190 	movw	r1, #63632	; 0xf890
 8000e06:	2070      	movs	r0, #112	; 0x70
 8000e08:	f001 fb1a 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R2_RESET_DELAY_IC_1_SIZE, R2_RESET_DELAY_IC_1_Default );
 8000e0c:	4ad8      	ldr	r2, [pc, #864]	; (8001170 <default_download_IC_1+0x384>)
 8000e0e:	2102      	movs	r1, #2
 8000e10:	2070      	movs	r0, #112	; 0x70
 8000e12:	f001 fb39 	bl	8002488 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R3_HIBERNATE_IC_1_Default );
 8000e16:	4bd7      	ldr	r3, [pc, #860]	; (8001174 <default_download_IC_1+0x388>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000e1e:	2070      	movs	r0, #112	; 0x70
 8000e20:	f001 fb0e 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R4_HIBERNATE_IC_1_Default );
 8000e24:	4bd4      	ldr	r3, [pc, #848]	; (8001178 <default_download_IC_1+0x38c>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000e2c:	2070      	movs	r0, #112	; 0x70
 8000e2e:	f001 fb07 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R5_HIBERNATE_DELAY_IC_1_SIZE, R5_HIBERNATE_DELAY_IC_1_Default );
 8000e32:	4ad2      	ldr	r2, [pc, #840]	; (800117c <default_download_IC_1+0x390>)
 8000e34:	2102      	movs	r1, #2
 8000e36:	2070      	movs	r0, #112	; 0x70
 8000e38:	f001 fb26 	bl	8002488 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R6_KILL_CORE_IC_1_Default );
 8000e3c:	4bd0      	ldr	r3, [pc, #832]	; (8001180 <default_download_IC_1+0x394>)
 8000e3e:	2202      	movs	r2, #2
 8000e40:	f24f 4103 	movw	r1, #62467	; 0xf403
 8000e44:	2070      	movs	r0, #112	; 0x70
 8000e46:	f001 fafb 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R7_KILL_CORE_IC_1_Default );
 8000e4a:	4bce      	ldr	r3, [pc, #824]	; (8001184 <default_download_IC_1+0x398>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	f24f 4103 	movw	r1, #62467	; 0xf403
 8000e52:	2070      	movs	r0, #112	; 0x70
 8000e54:	f001 faf4 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R8_PLL_ENABLE_IC_1_Default );
 8000e58:	4bcb      	ldr	r3, [pc, #812]	; (8001188 <default_download_IC_1+0x39c>)
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000e60:	2070      	movs	r0, #112	; 0x70
 8000e62:	f001 faed 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_CTRL0_IC_1_ADDR, REG_PLL_CTRL0_IC_1_BYTE, R9_PLL_CTRL0_IC_1_Default );
 8000e66:	4bc9      	ldr	r3, [pc, #804]	; (800118c <default_download_IC_1+0x3a0>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000e6e:	2070      	movs	r0, #112	; 0x70
 8000e70:	f001 fae6 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_CTRL1_IC_1_ADDR, REG_PLL_CTRL1_IC_1_BYTE, R10_PLL_CTRL1_IC_1_Default );
 8000e74:	4bc6      	ldr	r3, [pc, #792]	; (8001190 <default_download_IC_1+0x3a4>)
 8000e76:	2202      	movs	r2, #2
 8000e78:	f24f 0101 	movw	r1, #61441	; 0xf001
 8000e7c:	2070      	movs	r0, #112	; 0x70
 8000e7e:	f001 fadf 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_CLK_SRC_IC_1_ADDR, REG_PLL_CLK_SRC_IC_1_BYTE, R11_PLL_CLK_SRC_IC_1_Default );
 8000e82:	4bc4      	ldr	r3, [pc, #784]	; (8001194 <default_download_IC_1+0x3a8>)
 8000e84:	2202      	movs	r2, #2
 8000e86:	f24f 0102 	movw	r1, #61442	; 0xf002
 8000e8a:	2070      	movs	r0, #112	; 0x70
 8000e8c:	f001 fad8 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MCLK_OUT_IC_1_ADDR, REG_MCLK_OUT_IC_1_BYTE, R12_MCLK_OUT_IC_1_Default );
 8000e90:	4bc1      	ldr	r3, [pc, #772]	; (8001198 <default_download_IC_1+0x3ac>)
 8000e92:	2202      	movs	r2, #2
 8000e94:	f24f 0105 	movw	r1, #61445	; 0xf005
 8000e98:	2070      	movs	r0, #112	; 0x70
 8000e9a:	f001 fad1 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R13_PLL_ENABLE_IC_1_Default );
 8000e9e:	4bbf      	ldr	r3, [pc, #764]	; (800119c <default_download_IC_1+0x3b0>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000ea6:	2070      	movs	r0, #112	; 0x70
 8000ea8:	f001 faca 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R14_PLL_LOCK_DELAY_IC_1_SIZE, R14_PLL_LOCK_DELAY_IC_1_Default );
 8000eac:	4abc      	ldr	r2, [pc, #752]	; (80011a0 <default_download_IC_1+0x3b4>)
 8000eae:	2102      	movs	r1, #2
 8000eb0:	2070      	movs	r0, #112	; 0x70
 8000eb2:	f001 fae9 	bl	8002488 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_POWER_ENABLE0_IC_1_ADDR, REG_POWER_ENABLE0_IC_1_BYTE, R15_POWER_ENABLE0_IC_1_Default );
 8000eb6:	4bbb      	ldr	r3, [pc, #748]	; (80011a4 <default_download_IC_1+0x3b8>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	f24f 0150 	movw	r1, #61520	; 0xf050
 8000ebe:	2070      	movs	r0, #112	; 0x70
 8000ec0:	f001 fabe 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_POWER_ENABLE1_IC_1_ADDR, REG_POWER_ENABLE1_IC_1_BYTE, R16_POWER_ENABLE1_IC_1_Default );
 8000ec4:	4bb8      	ldr	r3, [pc, #736]	; (80011a8 <default_download_IC_1+0x3bc>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f24f 0151 	movw	r1, #61521	; 0xf051
 8000ecc:	2070      	movs	r0, #112	; 0x70
 8000ece:	f001 fab7 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLK_GEN1_M_IC_1_ADDR, REG_CLK_GEN1_M_IC_1_BYTE, R17_CLK_GEN1_M_IC_1_Default );
 8000ed2:	4bb6      	ldr	r3, [pc, #728]	; (80011ac <default_download_IC_1+0x3c0>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	f24f 0120 	movw	r1, #61472	; 0xf020
 8000eda:	2070      	movs	r0, #112	; 0x70
 8000edc:	f001 fab0 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLK_GEN1_N_IC_1_ADDR, REG_CLK_GEN1_N_IC_1_BYTE, R18_CLK_GEN1_N_IC_1_Default );
 8000ee0:	4bb3      	ldr	r3, [pc, #716]	; (80011b0 <default_download_IC_1+0x3c4>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	f24f 0121 	movw	r1, #61473	; 0xf021
 8000ee8:	2070      	movs	r0, #112	; 0x70
 8000eea:	f001 faa9 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLK_GEN3_M_IC_1_ADDR, REG_CLK_GEN3_M_IC_1_BYTE, R19_CLK_GEN3_M_IC_1_Default );
 8000eee:	4bb1      	ldr	r3, [pc, #708]	; (80011b4 <default_download_IC_1+0x3c8>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	f24f 0124 	movw	r1, #61476	; 0xf024
 8000ef6:	2070      	movs	r0, #112	; 0x70
 8000ef8:	f001 faa2 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLK_GEN3_N_IC_1_ADDR, REG_CLK_GEN3_N_IC_1_BYTE, R20_CLK_GEN3_N_IC_1_Default );
 8000efc:	4bae      	ldr	r3, [pc, #696]	; (80011b8 <default_download_IC_1+0x3cc>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	f24f 0125 	movw	r1, #61477	; 0xf025
 8000f04:	2070      	movs	r0, #112	; 0x70
 8000f06:	f001 fa9b 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MP4_MODE_IC_1_ADDR, REG_MP4_MODE_IC_1_BYTE, R21_MP4_MODE_IC_1_Default );
 8000f0a:	4bac      	ldr	r3, [pc, #688]	; (80011bc <default_download_IC_1+0x3d0>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	f24f 5114 	movw	r1, #62740	; 0xf514
 8000f12:	2070      	movs	r0, #112	; 0x70
 8000f14:	f001 fa94 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MP6_MODE_IC_1_ADDR, REG_MP6_MODE_IC_1_BYTE, R22_MP6_MODE_IC_1_Default );
 8000f18:	4ba9      	ldr	r3, [pc, #676]	; (80011c0 <default_download_IC_1+0x3d4>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f24f 5116 	movw	r1, #62742	; 0xf516
 8000f20:	2070      	movs	r0, #112	; 0x70
 8000f22:	f001 fa8d 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MP10_MODE_IC_1_ADDR, REG_MP10_MODE_IC_1_BYTE, R23_MP10_MODE_IC_1_Default );
 8000f26:	4ba7      	ldr	r3, [pc, #668]	; (80011c4 <default_download_IC_1+0x3d8>)
 8000f28:	2202      	movs	r2, #2
 8000f2a:	f24f 511a 	movw	r1, #62746	; 0xf51a
 8000f2e:	2070      	movs	r0, #112	; 0x70
 8000f30:	f001 fa86 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_BCLK_OUT0_PIN_IC_1_ADDR, REG_BCLK_OUT0_PIN_IC_1_BYTE, R24_BCLK_OUT0_PIN_IC_1_Default );
 8000f34:	4ba4      	ldr	r3, [pc, #656]	; (80011c8 <default_download_IC_1+0x3dc>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	f24f 7184 	movw	r1, #63364	; 0xf784
 8000f3c:	2070      	movs	r0, #112	; 0x70
 8000f3e:	f001 fa7f 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_LRCLK_IN2_PIN_IC_1_ADDR, REG_LRCLK_IN2_PIN_IC_1_BYTE, R25_LRCLK_IN2_PIN_IC_1_Default );
 8000f42:	4ba2      	ldr	r3, [pc, #648]	; (80011cc <default_download_IC_1+0x3e0>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	f24f 718a 	movw	r1, #63370	; 0xf78a
 8000f4a:	2070      	movs	r0, #112	; 0x70
 8000f4c:	f001 fa78 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_LRCLK_OUT0_PIN_IC_1_ADDR, REG_LRCLK_OUT0_PIN_IC_1_BYTE, R26_LRCLK_OUT0_PIN_IC_1_Default );
 8000f50:	4b9f      	ldr	r3, [pc, #636]	; (80011d0 <default_download_IC_1+0x3e4>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	f24f 718c 	movw	r1, #63372	; 0xf78c
 8000f58:	2070      	movs	r0, #112	; 0x70
 8000f5a:	f001 fa71 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SS_PIN_IC_1_ADDR, REG_SS_PIN_IC_1_BYTE, R27_SS_PIN_IC_1_Default );
 8000f5e:	4b9d      	ldr	r3, [pc, #628]	; (80011d4 <default_download_IC_1+0x3e8>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	f24f 719b 	movw	r1, #63387	; 0xf79b
 8000f66:	2070      	movs	r0, #112	; 0x70
 8000f68:	f001 fa6a 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MOSI_ADDR1_PIN_IC_1_ADDR, REG_MOSI_ADDR1_PIN_IC_1_BYTE, R28_MOSI_ADDR1_PIN_IC_1_Default );
 8000f6c:	4b9a      	ldr	r3, [pc, #616]	; (80011d8 <default_download_IC_1+0x3ec>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	f24f 719c 	movw	r1, #63388	; 0xf79c
 8000f74:	2070      	movs	r0, #112	; 0x70
 8000f76:	f001 fa63 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE0_IC_1_ADDR, REG_SOUT_SOURCE0_IC_1_BYTE, R29_SOUT_SOURCE0_IC_1_Default );
 8000f7a:	4b98      	ldr	r3, [pc, #608]	; (80011dc <default_download_IC_1+0x3f0>)
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	f24f 1180 	movw	r1, #61824	; 0xf180
 8000f82:	2070      	movs	r0, #112	; 0x70
 8000f84:	f001 fa5c 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE1_IC_1_ADDR, REG_SOUT_SOURCE1_IC_1_BYTE, R30_SOUT_SOURCE1_IC_1_Default );
 8000f88:	4b95      	ldr	r3, [pc, #596]	; (80011e0 <default_download_IC_1+0x3f4>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f24f 1181 	movw	r1, #61825	; 0xf181
 8000f90:	2070      	movs	r0, #112	; 0x70
 8000f92:	f001 fa55 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE2_IC_1_ADDR, REG_SOUT_SOURCE2_IC_1_BYTE, R31_SOUT_SOURCE2_IC_1_Default );
 8000f96:	4b93      	ldr	r3, [pc, #588]	; (80011e4 <default_download_IC_1+0x3f8>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	f24f 1182 	movw	r1, #61826	; 0xf182
 8000f9e:	2070      	movs	r0, #112	; 0x70
 8000fa0:	f001 fa4e 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE3_IC_1_ADDR, REG_SOUT_SOURCE3_IC_1_BYTE, R32_SOUT_SOURCE3_IC_1_Default );
 8000fa4:	4b90      	ldr	r3, [pc, #576]	; (80011e8 <default_download_IC_1+0x3fc>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	f24f 1183 	movw	r1, #61827	; 0xf183
 8000fac:	2070      	movs	r0, #112	; 0x70
 8000fae:	f001 fa47 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE4_IC_1_ADDR, REG_SOUT_SOURCE4_IC_1_BYTE, R33_SOUT_SOURCE4_IC_1_Default );
 8000fb2:	4b8e      	ldr	r3, [pc, #568]	; (80011ec <default_download_IC_1+0x400>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f24f 1184 	movw	r1, #61828	; 0xf184
 8000fba:	2070      	movs	r0, #112	; 0x70
 8000fbc:	f001 fa40 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE5_IC_1_ADDR, REG_SOUT_SOURCE5_IC_1_BYTE, R34_SOUT_SOURCE5_IC_1_Default );
 8000fc0:	4b8b      	ldr	r3, [pc, #556]	; (80011f0 <default_download_IC_1+0x404>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	f24f 1185 	movw	r1, #61829	; 0xf185
 8000fc8:	2070      	movs	r0, #112	; 0x70
 8000fca:	f001 fa39 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE6_IC_1_ADDR, REG_SOUT_SOURCE6_IC_1_BYTE, R35_SOUT_SOURCE6_IC_1_Default );
 8000fce:	4b89      	ldr	r3, [pc, #548]	; (80011f4 <default_download_IC_1+0x408>)
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	f24f 1186 	movw	r1, #61830	; 0xf186
 8000fd6:	2070      	movs	r0, #112	; 0x70
 8000fd8:	f001 fa32 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE7_IC_1_ADDR, REG_SOUT_SOURCE7_IC_1_BYTE, R36_SOUT_SOURCE7_IC_1_Default );
 8000fdc:	4b86      	ldr	r3, [pc, #536]	; (80011f8 <default_download_IC_1+0x40c>)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	f24f 1187 	movw	r1, #61831	; 0xf187
 8000fe4:	2070      	movs	r0, #112	; 0x70
 8000fe6:	f001 fa2b 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE8_IC_1_ADDR, REG_SOUT_SOURCE8_IC_1_BYTE, R37_SOUT_SOURCE8_IC_1_Default );
 8000fea:	4b84      	ldr	r3, [pc, #528]	; (80011fc <default_download_IC_1+0x410>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	f24f 1188 	movw	r1, #61832	; 0xf188
 8000ff2:	2070      	movs	r0, #112	; 0x70
 8000ff4:	f001 fa24 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE9_IC_1_ADDR, REG_SOUT_SOURCE9_IC_1_BYTE, R38_SOUT_SOURCE9_IC_1_Default );
 8000ff8:	4b81      	ldr	r3, [pc, #516]	; (8001200 <default_download_IC_1+0x414>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	f24f 1189 	movw	r1, #61833	; 0xf189
 8001000:	2070      	movs	r0, #112	; 0x70
 8001002:	f001 fa1d 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE10_IC_1_ADDR, REG_SOUT_SOURCE10_IC_1_BYTE, R39_SOUT_SOURCE10_IC_1_Default );
 8001006:	4b7f      	ldr	r3, [pc, #508]	; (8001204 <default_download_IC_1+0x418>)
 8001008:	2202      	movs	r2, #2
 800100a:	f24f 118a 	movw	r1, #61834	; 0xf18a
 800100e:	2070      	movs	r0, #112	; 0x70
 8001010:	f001 fa16 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE11_IC_1_ADDR, REG_SOUT_SOURCE11_IC_1_BYTE, R40_SOUT_SOURCE11_IC_1_Default );
 8001014:	4b7c      	ldr	r3, [pc, #496]	; (8001208 <default_download_IC_1+0x41c>)
 8001016:	2202      	movs	r2, #2
 8001018:	f24f 118b 	movw	r1, #61835	; 0xf18b
 800101c:	2070      	movs	r0, #112	; 0x70
 800101e:	f001 fa0f 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE12_IC_1_ADDR, REG_SOUT_SOURCE12_IC_1_BYTE, R41_SOUT_SOURCE12_IC_1_Default );
 8001022:	4b7a      	ldr	r3, [pc, #488]	; (800120c <default_download_IC_1+0x420>)
 8001024:	2202      	movs	r2, #2
 8001026:	f24f 118c 	movw	r1, #61836	; 0xf18c
 800102a:	2070      	movs	r0, #112	; 0x70
 800102c:	f001 fa08 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE13_IC_1_ADDR, REG_SOUT_SOURCE13_IC_1_BYTE, R42_SOUT_SOURCE13_IC_1_Default );
 8001030:	4b77      	ldr	r3, [pc, #476]	; (8001210 <default_download_IC_1+0x424>)
 8001032:	2202      	movs	r2, #2
 8001034:	f24f 118d 	movw	r1, #61837	; 0xf18d
 8001038:	2070      	movs	r0, #112	; 0x70
 800103a:	f001 fa01 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE14_IC_1_ADDR, REG_SOUT_SOURCE14_IC_1_BYTE, R43_SOUT_SOURCE14_IC_1_Default );
 800103e:	4b75      	ldr	r3, [pc, #468]	; (8001214 <default_download_IC_1+0x428>)
 8001040:	2202      	movs	r2, #2
 8001042:	f24f 118e 	movw	r1, #61838	; 0xf18e
 8001046:	2070      	movs	r0, #112	; 0x70
 8001048:	f001 f9fa 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE15_IC_1_ADDR, REG_SOUT_SOURCE15_IC_1_BYTE, R44_SOUT_SOURCE15_IC_1_Default );
 800104c:	4b72      	ldr	r3, [pc, #456]	; (8001218 <default_download_IC_1+0x42c>)
 800104e:	2202      	movs	r2, #2
 8001050:	f24f 118f 	movw	r1, #61839	; 0xf18f
 8001054:	2070      	movs	r0, #112	; 0x70
 8001056:	f001 f9f3 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE16_IC_1_ADDR, REG_SOUT_SOURCE16_IC_1_BYTE, R45_SOUT_SOURCE16_IC_1_Default );
 800105a:	4b70      	ldr	r3, [pc, #448]	; (800121c <default_download_IC_1+0x430>)
 800105c:	2202      	movs	r2, #2
 800105e:	f24f 1190 	movw	r1, #61840	; 0xf190
 8001062:	2070      	movs	r0, #112	; 0x70
 8001064:	f001 f9ec 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE17_IC_1_ADDR, REG_SOUT_SOURCE17_IC_1_BYTE, R46_SOUT_SOURCE17_IC_1_Default );
 8001068:	4b6d      	ldr	r3, [pc, #436]	; (8001220 <default_download_IC_1+0x434>)
 800106a:	2202      	movs	r2, #2
 800106c:	f24f 1191 	movw	r1, #61841	; 0xf191
 8001070:	2070      	movs	r0, #112	; 0x70
 8001072:	f001 f9e5 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE18_IC_1_ADDR, REG_SOUT_SOURCE18_IC_1_BYTE, R47_SOUT_SOURCE18_IC_1_Default );
 8001076:	4b6b      	ldr	r3, [pc, #428]	; (8001224 <default_download_IC_1+0x438>)
 8001078:	2202      	movs	r2, #2
 800107a:	f24f 1192 	movw	r1, #61842	; 0xf192
 800107e:	2070      	movs	r0, #112	; 0x70
 8001080:	f001 f9de 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE19_IC_1_ADDR, REG_SOUT_SOURCE19_IC_1_BYTE, R48_SOUT_SOURCE19_IC_1_Default );
 8001084:	4b68      	ldr	r3, [pc, #416]	; (8001228 <default_download_IC_1+0x43c>)
 8001086:	2202      	movs	r2, #2
 8001088:	f24f 1193 	movw	r1, #61843	; 0xf193
 800108c:	2070      	movs	r0, #112	; 0x70
 800108e:	f001 f9d7 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE20_IC_1_ADDR, REG_SOUT_SOURCE20_IC_1_BYTE, R49_SOUT_SOURCE20_IC_1_Default );
 8001092:	4b66      	ldr	r3, [pc, #408]	; (800122c <default_download_IC_1+0x440>)
 8001094:	2202      	movs	r2, #2
 8001096:	f24f 1194 	movw	r1, #61844	; 0xf194
 800109a:	2070      	movs	r0, #112	; 0x70
 800109c:	f001 f9d0 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE21_IC_1_ADDR, REG_SOUT_SOURCE21_IC_1_BYTE, R50_SOUT_SOURCE21_IC_1_Default );
 80010a0:	4b63      	ldr	r3, [pc, #396]	; (8001230 <default_download_IC_1+0x444>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	f24f 1195 	movw	r1, #61845	; 0xf195
 80010a8:	2070      	movs	r0, #112	; 0x70
 80010aa:	f001 f9c9 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE22_IC_1_ADDR, REG_SOUT_SOURCE22_IC_1_BYTE, R51_SOUT_SOURCE22_IC_1_Default );
 80010ae:	4b61      	ldr	r3, [pc, #388]	; (8001234 <default_download_IC_1+0x448>)
 80010b0:	2202      	movs	r2, #2
 80010b2:	f24f 1196 	movw	r1, #61846	; 0xf196
 80010b6:	2070      	movs	r0, #112	; 0x70
 80010b8:	f001 f9c2 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE23_IC_1_ADDR, REG_SOUT_SOURCE23_IC_1_BYTE, R52_SOUT_SOURCE23_IC_1_Default );
 80010bc:	4b5e      	ldr	r3, [pc, #376]	; (8001238 <default_download_IC_1+0x44c>)
 80010be:	2202      	movs	r2, #2
 80010c0:	f24f 1197 	movw	r1, #61847	; 0xf197
 80010c4:	2070      	movs	r0, #112	; 0x70
 80010c6:	f001 f9bb 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_0_0_IC_1_ADDR, REG_SERIAL_BYTE_0_0_IC_1_BYTE, R53_SERIAL_BYTE_0_0_IC_1_Default );
 80010ca:	4b5c      	ldr	r3, [pc, #368]	; (800123c <default_download_IC_1+0x450>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	f44f 4172 	mov.w	r1, #61952	; 0xf200
 80010d2:	2070      	movs	r0, #112	; 0x70
 80010d4:	f001 f9b4 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_4_0_IC_1_ADDR, REG_SERIAL_BYTE_4_0_IC_1_BYTE, R54_SERIAL_BYTE_4_0_IC_1_Default );
 80010d8:	4b59      	ldr	r3, [pc, #356]	; (8001240 <default_download_IC_1+0x454>)
 80010da:	2202      	movs	r2, #2
 80010dc:	f24f 2110 	movw	r1, #61968	; 0xf210
 80010e0:	2070      	movs	r0, #112	; 0x70
 80010e2:	f001 f9ad 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
 80010e6:	4b57      	ldr	r3, [pc, #348]	; (8001244 <default_download_IC_1+0x458>)
 80010e8:	f641 223c 	movw	r2, #6716	; 0x1a3c
 80010ec:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80010f0:	2070      	movs	r0, #112	; 0x70
 80010f2:	f001 f9a5 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, Param_Data_IC_1 );
 80010f6:	4b54      	ldr	r3, [pc, #336]	; (8001248 <default_download_IC_1+0x45c>)
 80010f8:	f641 32ec 	movw	r2, #7148	; 0x1bec
 80010fc:	2100      	movs	r1, #0
 80010fe:	2070      	movs	r0, #112	; 0x70
 8001100:	f001 f99e 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, DM1_DATA_ADDR_IC_1, DM1_DATA_SIZE_IC_1, DM1_DATA_Data_IC_1 );
 8001104:	4b51      	ldr	r3, [pc, #324]	; (800124c <default_download_IC_1+0x460>)
 8001106:	f44f 6209 	mov.w	r2, #2192	; 0x890
 800110a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800110e:	2070      	movs	r0, #112	; 0x70
 8001110:	f001 f996 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R58_KILL_CORE_IC_1_Default );
 8001114:	4b4e      	ldr	r3, [pc, #312]	; (8001250 <default_download_IC_1+0x464>)
 8001116:	2202      	movs	r2, #2
 8001118:	f24f 4103 	movw	r1, #62467	; 0xf403
 800111c:	2070      	movs	r0, #112	; 0x70
 800111e:	f001 f98f 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_ADDRESS_IC_1_ADDR, REG_START_ADDRESS_IC_1_BYTE, R59_START_ADDRESS_IC_1_Default );
 8001122:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <default_download_IC_1+0x468>)
 8001124:	2202      	movs	r2, #2
 8001126:	f24f 4104 	movw	r1, #62468	; 0xf404
 800112a:	2070      	movs	r0, #112	; 0x70
 800112c:	f001 f988 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_PULSE_IC_1_ADDR, REG_START_PULSE_IC_1_BYTE, R60_START_PULSE_IC_1_Default );
 8001130:	4b49      	ldr	r3, [pc, #292]	; (8001258 <default_download_IC_1+0x46c>)
 8001132:	2202      	movs	r2, #2
 8001134:	f24f 4101 	movw	r1, #62465	; 0xf401
 8001138:	2070      	movs	r0, #112	; 0x70
 800113a:	f001 f981 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R61_START_CORE_IC_1_Default );
 800113e:	4b47      	ldr	r3, [pc, #284]	; (800125c <default_download_IC_1+0x470>)
 8001140:	2202      	movs	r2, #2
 8001142:	f24f 4102 	movw	r1, #62466	; 0xf402
 8001146:	2070      	movs	r0, #112	; 0x70
 8001148:	f001 f97a 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R62_START_CORE_IC_1_Default );
 800114c:	4b44      	ldr	r3, [pc, #272]	; (8001260 <default_download_IC_1+0x474>)
 800114e:	2202      	movs	r2, #2
 8001150:	f24f 4102 	movw	r1, #62466	; 0xf402
 8001154:	2070      	movs	r0, #112	; 0x70
 8001156:	f001 f973 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R63_START_DELAY_IC_1_SIZE, R63_START_DELAY_IC_1_Default );
 800115a:	4a42      	ldr	r2, [pc, #264]	; (8001264 <default_download_IC_1+0x478>)
 800115c:	2102      	movs	r1, #2
 800115e:	2070      	movs	r0, #112	; 0x70
 8001160:	f001 f992 	bl	8002488 <SIGMA_WRITE_DELAY>
 8001164:	e080      	b.n	8001268 <default_download_IC_1+0x47c>
 8001166:	bf00      	nop
 8001168:	20004004 	.word	0x20004004
 800116c:	20003eb8 	.word	0x20003eb8
 8001170:	20003ebc 	.word	0x20003ebc
 8001174:	20004008 	.word	0x20004008
 8001178:	20003ec0 	.word	0x20003ec0
 800117c:	20003ec4 	.word	0x20003ec4
 8001180:	2000400c 	.word	0x2000400c
 8001184:	20003ec8 	.word	0x20003ec8
 8001188:	20004010 	.word	0x20004010
 800118c:	20003ecc 	.word	0x20003ecc
 8001190:	20003ed0 	.word	0x20003ed0
 8001194:	20003ed4 	.word	0x20003ed4
 8001198:	20003ed8 	.word	0x20003ed8
 800119c:	20003edc 	.word	0x20003edc
 80011a0:	20003ee0 	.word	0x20003ee0
 80011a4:	20003ee4 	.word	0x20003ee4
 80011a8:	20004014 	.word	0x20004014
 80011ac:	20003ee8 	.word	0x20003ee8
 80011b0:	20003eec 	.word	0x20003eec
 80011b4:	20003ef0 	.word	0x20003ef0
 80011b8:	20003ef4 	.word	0x20003ef4
 80011bc:	20003ef8 	.word	0x20003ef8
 80011c0:	20003efc 	.word	0x20003efc
 80011c4:	20003f00 	.word	0x20003f00
 80011c8:	20003f04 	.word	0x20003f04
 80011cc:	20003f08 	.word	0x20003f08
 80011d0:	20003f0c 	.word	0x20003f0c
 80011d4:	20003f10 	.word	0x20003f10
 80011d8:	20003f14 	.word	0x20003f14
 80011dc:	20003f18 	.word	0x20003f18
 80011e0:	20003f1c 	.word	0x20003f1c
 80011e4:	20003f20 	.word	0x20003f20
 80011e8:	20003f24 	.word	0x20003f24
 80011ec:	20003f28 	.word	0x20003f28
 80011f0:	20003f2c 	.word	0x20003f2c
 80011f4:	20003f30 	.word	0x20003f30
 80011f8:	20003f34 	.word	0x20003f34
 80011fc:	20003f38 	.word	0x20003f38
 8001200:	20003f3c 	.word	0x20003f3c
 8001204:	20003f40 	.word	0x20003f40
 8001208:	20003f44 	.word	0x20003f44
 800120c:	20003f48 	.word	0x20003f48
 8001210:	20003f4c 	.word	0x20003f4c
 8001214:	20003f50 	.word	0x20003f50
 8001218:	20003f54 	.word	0x20003f54
 800121c:	20003f58 	.word	0x20003f58
 8001220:	20003f5c 	.word	0x20003f5c
 8001224:	20003f60 	.word	0x20003f60
 8001228:	20003f64 	.word	0x20003f64
 800122c:	20003f68 	.word	0x20003f68
 8001230:	20003f6c 	.word	0x20003f6c
 8001234:	20003f70 	.word	0x20003f70
 8001238:	20003f74 	.word	0x20003f74
 800123c:	20003f78 	.word	0x20003f78
 8001240:	20003f7c 	.word	0x20003f7c
 8001244:	20000890 	.word	0x20000890
 8001248:	200022cc 	.word	0x200022cc
 800124c:	20000000 	.word	0x20000000
 8001250:	20004018 	.word	0x20004018
 8001254:	2000401c 	.word	0x2000401c
 8001258:	20003f80 	.word	0x20003f80
 800125c:	20004020 	.word	0x20004020
 8001260:	20003f84 	.word	0x20003f84
 8001264:	20003f88 	.word	0x20003f88
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R64_HIBERNATE_IC_1_Default );
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <default_download_IC_1+0x490>)
 800126a:	2202      	movs	r2, #2
 800126c:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8001270:	2070      	movs	r0, #112	; 0x70
 8001272:	f001 f8e5 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20004024 	.word	0x20004024

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b0e9      	sub	sp, #420	; 0x1a4
 8001284:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	  uint16_t k = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
	  uint16_t pote_aux = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
	  uint16_t BandAddress[ADC_POT]; // Addresses of filters
	  uint32_t vol_data[30]; // Fixed volume values
	  uint32_t boost_data[30]; // Fixed boost loudness values
	  uint32_t comp_data[30]; // Fixed compensation values

	  BandAddress[0] = MOD_BAND32_SEL_DCINPALG145X1VALUE_ADDR;
 8001292:	f44f 63d9 	mov.w	r3, #1736	; 0x6c8
 8001296:	f8a7 316c 	strh.w	r3, [r7, #364]	; 0x16c
	  BandAddress[1] = MOD_BAND64_SEL_DCINPALG145X2VALUE_ADDR;
 800129a:	f240 63c9 	movw	r3, #1737	; 0x6c9
 800129e:	f8a7 316e 	strh.w	r3, [r7, #366]	; 0x16e
	  BandAddress[2] = MOD_BAND128_SEL_DCINPALG145X3VALUE_ADDR;
 80012a2:	f240 63ca 	movw	r3, #1738	; 0x6ca
 80012a6:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
	  BandAddress[3] = MOD_BAND256_SEL_DCINPALG145X4VALUE_ADDR;
 80012aa:	f240 63cb 	movw	r3, #1739	; 0x6cb
 80012ae:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
	  BandAddress[4] = MOD_BAND512_SEL_DCINPALG145X5VALUE_ADDR;
 80012b2:	f240 63cc 	movw	r3, #1740	; 0x6cc
 80012b6:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
	  BandAddress[5] = MOD_BAND1K_SEL_DCINPALG145X6VALUE_ADDR;
 80012ba:	f240 63cd 	movw	r3, #1741	; 0x6cd
 80012be:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176
	  BandAddress[6] = MOD_BAND2K_SEL_DCINPALG145X7VALUE_ADDR;
 80012c2:	f240 63ce 	movw	r3, #1742	; 0x6ce
 80012c6:	f8a7 3178 	strh.w	r3, [r7, #376]	; 0x178
	  BandAddress[7] = MOD_BAND4K_SEL_DCINPALG145X8VALUE_ADDR;
 80012ca:	f240 63cf 	movw	r3, #1743	; 0x6cf
 80012ce:	f8a7 317a 	strh.w	r3, [r7, #378]	; 0x17a
	  BandAddress[8] = MOD_BAND8K_SEL_DCINPALG145X9VALUE_ADDR;
 80012d2:	f44f 63da 	mov.w	r3, #1744	; 0x6d0
 80012d6:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
	  BandAddress[9] = MOD_BAND16K_SEL_DCINPALG145X10VALUE_ADDR;
 80012da:	f240 63d1 	movw	r3, #1745	; 0x6d1
 80012de:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
	  BandAddress[10] = MOD_BANDSUB_SEL_DCINPALG145X11VALUE_ADDR;
 80012e2:	f240 63d2 	movw	r3, #1746	; 0x6d2
 80012e6:	f8a7 3180 	strh.w	r3, [r7, #384]	; 0x180
	  BandAddress[VOL_ARRAY] = MOD_VOL_GAINALGNS145X1GAIN_ADDR;
 80012ea:	f44f 63db 	mov.w	r3, #1752	; 0x6d8
 80012ee:	f8a7 3182 	strh.w	r3, [r7, #386]	; 0x182
	  BandAddress[LOUD_LOW_ARRAY] = MOD_LOUD_ALG0_LEVEL0_ADDR;
 80012f2:	23b5      	movs	r3, #181	; 0xb5
 80012f4:	f8a7 3184 	strh.w	r3, [r7, #388]	; 0x184
	  BandAddress[LOUD_HIGH_ARRAY] = MOD_LOUD_ALG0_LEVEL1_ADDR;
 80012f8:	23b6      	movs	r3, #182	; 0xb6
 80012fa:	f8a7 3186 	strh.w	r3, [r7, #390]	; 0x186
	  BandAddress[LOUD_GRL_ARRAY] = MOD_LOUD_SEL_DCINPALG145X12VALUE_ADDR;
 80012fe:	f240 63d3 	movw	r3, #1747	; 0x6d3
 8001302:	f8a7 3188 	strh.w	r3, [r7, #392]	; 0x188

	  // 8.24 FixPoint
	  vol_data[29] = 0x01000000; // 0dB
 8001306:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800130a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	  vol_data[28] = 0x00e42904; // -1dB
 800130e:	4bc2      	ldr	r3, [pc, #776]	; (8001618 <main+0x398>)
 8001310:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	  vol_data[27] = 0x00cb5918; // -2dB
 8001314:	4bc1      	ldr	r3, [pc, #772]	; (800161c <main+0x39c>)
 8001316:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	  vol_data[26] = 0x00b53bee; // -3dB
 800131a:	4bc1      	ldr	r3, [pc, #772]	; (8001620 <main+0x3a0>)
 800131c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	  vol_data[25] = 0x00a1866a; // -4dB
 8001320:	4bc0      	ldr	r3, [pc, #768]	; (8001624 <main+0x3a4>)
 8001322:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	  vol_data[24] = 0x008ff598; // -5dB
 8001326:	4bc0      	ldr	r3, [pc, #768]	; (8001628 <main+0x3a8>)
 8001328:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	  vol_data[23] = 0x00804dce; // -6dB
 800132c:	4bbf      	ldr	r3, [pc, #764]	; (800162c <main+0x3ac>)
 800132e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	  vol_data[22] = 0x006fbf80; // -7dB (-7.2dB)
 8001332:	4bbf      	ldr	r3, [pc, #764]	; (8001630 <main+0x3b0>)
 8001334:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	  vol_data[21] = 0x0065ea58; // -8dB
 8001338:	4bbe      	ldr	r3, [pc, #760]	; (8001634 <main+0x3b4>)
 800133a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	  vol_data[20] = 0x005ad50c; // -9dB
 800133e:	4bbe      	ldr	r3, [pc, #760]	; (8001638 <main+0x3b8>)
 8001340:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	  vol_data[19] = 0x0050f44c; // -10dB
 8001344:	4bbd      	ldr	r3, [pc, #756]	; (800163c <main+0x3bc>)
 8001346:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	  vol_data[18] = 0x0048268c; // -11dB
 800134a:	4bbd      	ldr	r3, [pc, #756]	; (8001640 <main+0x3c0>)
 800134c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	  vol_data[17] = 0x00404de6; // -12dB
 8001350:	4bbc      	ldr	r3, [pc, #752]	; (8001644 <main+0x3c4>)
 8001352:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	  vol_data[16] = 0x00394fae; // -13dB
 8001356:	4bbc      	ldr	r3, [pc, #752]	; (8001648 <main+0x3c8>)
 8001358:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  vol_data[15] = 0x00331426; // -14dB
 800135c:	4bbb      	ldr	r3, [pc, #748]	; (800164c <main+0x3cc>)
 800135e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	  vol_data[14] = 0x002d8620; // -15dB
 8001362:	4bbb      	ldr	r3, [pc, #748]	; (8001650 <main+0x3d0>)
 8001364:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  vol_data[13] = 0x002892c0; // -16dB
 8001368:	4bba      	ldr	r3, [pc, #744]	; (8001654 <main+0x3d4>)
 800136a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  vol_data[12] = 0x00242934; // -17dB
 800136e:	4bba      	ldr	r3, [pc, #744]	; (8001658 <main+0x3d8>)
 8001370:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	  vol_data[11] = 0x00203a7e; // -18dB
 8001374:	4bb9      	ldr	r3, [pc, #740]	; (800165c <main+0x3dc>)
 8001376:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  vol_data[10] = 0x001cb942; // -19dB
 800137a:	4bb9      	ldr	r3, [pc, #740]	; (8001660 <main+0x3e0>)
 800137c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	  vol_data[9] = 0x00199998; // -20dB
 8001380:	4bb8      	ldr	r3, [pc, #736]	; (8001664 <main+0x3e4>)
 8001382:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  vol_data[8] = 0x0016d0e6; // -21dB
 8001386:	4bb8      	ldr	r3, [pc, #736]	; (8001668 <main+0x3e8>)
 8001388:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	  vol_data[7] = 0x001455b4; // -22dB
 800138c:	4bb7      	ldr	r3, [pc, #732]	; (800166c <main+0x3ec>)
 800138e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	  vol_data[6] = 0x00121f96; // -23dB
 8001392:	4bb7      	ldr	r3, [pc, #732]	; (8001670 <main+0x3f0>)
 8001394:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  vol_data[5] = 0x0010270a; // -24dB
 8001398:	4bb6      	ldr	r3, [pc, #728]	; (8001674 <main+0x3f4>)
 800139a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	  vol_data[4] = 0x000e655c; // -25dB
 800139e:	4bb6      	ldr	r3, [pc, #728]	; (8001678 <main+0x3f8>)
 80013a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	  vol_data[3] = 0x000cd494; // -26dB
 80013a4:	4bb5      	ldr	r3, [pc, #724]	; (800167c <main+0x3fc>)
 80013a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	  vol_data[2] = 0x000b6f62; // -27dB
 80013aa:	4bb5      	ldr	r3, [pc, #724]	; (8001680 <main+0x400>)
 80013ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  vol_data[1] = 0x000a3108; // -28dB
 80013b0:	4bb4      	ldr	r3, [pc, #720]	; (8001684 <main+0x404>)
 80013b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	  vol_data[0] = 0x0009154e; // -29dB
 80013b6:	4bb4      	ldr	r3, [pc, #720]	; (8001688 <main+0x408>)
 80013b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	  // 8.24 Compensation FixPoint
	  comp_data[29] = 0x01000000; // 0dB
 80013bc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80013c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80013c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013c8:	675a      	str	r2, [r3, #116]	; 0x74
	  comp_data[28] = 0x011F3B64; // +1dB
 80013ca:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80013ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80013d2:	4aae      	ldr	r2, [pc, #696]	; (800168c <main+0x40c>)
 80013d4:	671a      	str	r2, [r3, #112]	; 0x70
	  comp_data[27] = 0x014248E8; // +2dB
 80013d6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80013da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80013de:	4aac      	ldr	r2, [pc, #688]	; (8001690 <main+0x410>)
 80013e0:	66da      	str	r2, [r3, #108]	; 0x6c
	  comp_data[26] = 0x01699C0F; // +3dB
 80013e2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80013e6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80013ea:	4aaa      	ldr	r2, [pc, #680]	; (8001694 <main+0x414>)
 80013ec:	669a      	str	r2, [r3, #104]	; 0x68
	  comp_data[25] = 0x0195BB8C; // +4dB
 80013ee:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80013f2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80013f6:	4aa8      	ldr	r2, [pc, #672]	; (8001698 <main+0x418>)
 80013f8:	665a      	str	r2, [r3, #100]	; 0x64
	  comp_data[24] = 0x01C73D51; // +5dB
 80013fa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80013fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001402:	4aa6      	ldr	r2, [pc, #664]	; (800169c <main+0x41c>)
 8001404:	661a      	str	r2, [r3, #96]	; 0x60
	  comp_data[23] = 0x02000000; // +6dB
 8001406:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800140a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800140e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001412:	65da      	str	r2, [r3, #92]	; 0x5c
	  comp_data[22] = 0x023D1CD1; // +7dB
 8001414:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001418:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800141c:	4aa0      	ldr	r2, [pc, #640]	; (80016a0 <main+0x420>)
 800141e:	659a      	str	r2, [r3, #88]	; 0x58
	  comp_data[21] = 0x02830AFD; // +8dB
 8001420:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001424:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001428:	4a9e      	ldr	r2, [pc, #632]	; (80016a4 <main+0x424>)
 800142a:	655a      	str	r2, [r3, #84]	; 0x54
	  comp_data[20] = 0x02D1818B; // +9dB
 800142c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001430:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001434:	4a9c      	ldr	r2, [pc, #624]	; (80016a8 <main+0x428>)
 8001436:	651a      	str	r2, [r3, #80]	; 0x50
	  comp_data[19] = 0x03298B07; // +10dB
 8001438:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800143c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001440:	4a9a      	ldr	r2, [pc, #616]	; (80016ac <main+0x42c>)
 8001442:	64da      	str	r2, [r3, #76]	; 0x4c
	  comp_data[18] = 0x038C5280; // +11dB
 8001444:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001448:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800144c:	4a98      	ldr	r2, [pc, #608]	; (80016b0 <main+0x430>)
 800144e:	649a      	str	r2, [r3, #72]	; 0x48
	  comp_data[17] = 0x03FB2783; // +12dB
 8001450:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001454:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001458:	4a96      	ldr	r2, [pc, #600]	; (80016b4 <main+0x434>)
 800145a:	645a      	str	r2, [r3, #68]	; 0x44
	  comp_data[16] = 0x0477828F; // +13dB
 800145c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001460:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001464:	4a94      	ldr	r2, [pc, #592]	; (80016b8 <main+0x438>)
 8001466:	641a      	str	r2, [r3, #64]	; 0x40
	  comp_data[15] = 0x05030A10; // +14dB
 8001468:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800146c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001470:	4a92      	ldr	r2, [pc, #584]	; (80016bc <main+0x43c>)
 8001472:	63da      	str	r2, [r3, #60]	; 0x3c
	  comp_data[14] = 0x059F9802; // +15dB
 8001474:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001478:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800147c:	4a90      	ldr	r2, [pc, #576]	; (80016c0 <main+0x440>)
 800147e:	639a      	str	r2, [r3, #56]	; 0x38
	  comp_data[13] = 0x064F4034; // +16dB
 8001480:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001484:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001488:	4a8e      	ldr	r2, [pc, #568]	; (80016c4 <main+0x444>)
 800148a:	635a      	str	r2, [r3, #52]	; 0x34
	  comp_data[12] = 0x07145759; // +17dB
 800148c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001490:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001494:	4a8c      	ldr	r2, [pc, #560]	; (80016c8 <main+0x448>)
 8001496:	631a      	str	r2, [r3, #48]	; 0x30
	  comp_data[11] = 0x07F17AF3; // +18dB
 8001498:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800149c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80014a0:	4a8a      	ldr	r2, [pc, #552]	; (80016cc <main+0x44c>)
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
	  comp_data[10] = 0x08E99A36; // +19dB
 80014a4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80014ac:	4a88      	ldr	r2, [pc, #544]	; (80016d0 <main+0x450>)
 80014ae:	629a      	str	r2, [r3, #40]	; 0x28
	  comp_data[9] = 0x0A000000; // +20dB
 80014b0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014b4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80014b8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24
	  comp_data[8] = 0x0B385E03; // +21dB
 80014be:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014c2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80014c6:	4a83      	ldr	r2, [pc, #524]	; (80016d4 <main+0x454>)
 80014c8:	621a      	str	r2, [r3, #32]
	  comp_data[7] = 0x0C96D95B; // +22dB
 80014ca:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80014d2:	4a81      	ldr	r2, [pc, #516]	; (80016d8 <main+0x458>)
 80014d4:	61da      	str	r2, [r3, #28]
	  comp_data[6] = 0x0E20189B; // +23dB
 80014d6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80014de:	4a7f      	ldr	r2, [pc, #508]	; (80016dc <main+0x45c>)
 80014e0:	619a      	str	r2, [r3, #24]
	  comp_data[5] = 0x0FD9539A; // +24dB
 80014e2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014e6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80014ea:	4a7d      	ldr	r2, [pc, #500]	; (80016e0 <main+0x460>)
 80014ec:	615a      	str	r2, [r3, #20]
	  comp_data[4] = 0x11C86531; // +25dB
 80014ee:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014f2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80014f6:	4a7b      	ldr	r2, [pc, #492]	; (80016e4 <main+0x464>)
 80014f8:	611a      	str	r2, [r3, #16]
	  comp_data[3] = 0x13F3DF1C; // +26dB
 80014fa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001502:	4a79      	ldr	r2, [pc, #484]	; (80016e8 <main+0x468>)
 8001504:	60da      	str	r2, [r3, #12]
	  comp_data[2] = 0x16632049; // +27dB
 8001506:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800150a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800150e:	4a77      	ldr	r2, [pc, #476]	; (80016ec <main+0x46c>)
 8001510:	609a      	str	r2, [r3, #8]
	  comp_data[1] = 0x191E6DE4; // +28dB
 8001512:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001516:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800151a:	4a75      	ldr	r2, [pc, #468]	; (80016f0 <main+0x470>)
 800151c:	605a      	str	r2, [r3, #4]
	  comp_data[0] = 0x1C2F0F70; // +29dB
 800151e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001522:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001526:	4a73      	ldr	r2, [pc, #460]	; (80016f4 <main+0x474>)
 8001528:	601a      	str	r2, [r3, #0]

	  // 8.24 FixPoint
	  boost_data[29] = 0x02800000; // 2.50
 800152a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800152e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001532:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
 8001536:	675a      	str	r2, [r3, #116]	; 0x74
	  boost_data[28] = 0x02666666; // 2.40
 8001538:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800153c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001540:	4a6d      	ldr	r2, [pc, #436]	; (80016f8 <main+0x478>)
 8001542:	671a      	str	r2, [r3, #112]	; 0x70
	  boost_data[27] = 0x02570a3c; // 2.34
 8001544:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001548:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800154c:	4a6b      	ldr	r2, [pc, #428]	; (80016fc <main+0x47c>)
 800154e:	66da      	str	r2, [r3, #108]	; 0x6c
	  boost_data[26] = 0x02451eb8; // 2.27
 8001550:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001554:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001558:	4a69      	ldr	r2, [pc, #420]	; (8001700 <main+0x480>)
 800155a:	669a      	str	r2, [r3, #104]	; 0x68
	  boost_data[25] = 0x02333332; // 2.20
 800155c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001560:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001564:	4a67      	ldr	r2, [pc, #412]	; (8001704 <main+0x484>)
 8001566:	665a      	str	r2, [r3, #100]	; 0x64
	  boost_data[24] = 0x022147ae; // 2.13
 8001568:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800156c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001570:	4a65      	ldr	r2, [pc, #404]	; (8001708 <main+0x488>)
 8001572:	661a      	str	r2, [r3, #96]	; 0x60
	  boost_data[23] = 0x020f5c28; // 2.06
 8001574:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001578:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800157c:	4a63      	ldr	r2, [pc, #396]	; (800170c <main+0x48c>)
 800157e:	65da      	str	r2, [r3, #92]	; 0x5c
	  boost_data[22] = 0x02000000; // 2.00
 8001580:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001584:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001588:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800158c:	659a      	str	r2, [r3, #88]	; 0x58
	  boost_data[21] = 0x01ee147a; // 1.93
 800158e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001592:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001596:	4a5e      	ldr	r2, [pc, #376]	; (8001710 <main+0x490>)
 8001598:	655a      	str	r2, [r3, #84]	; 0x54
	  boost_data[20] = 0x01dc28f4; // 1.86
 800159a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800159e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015a2:	4a5c      	ldr	r2, [pc, #368]	; (8001714 <main+0x494>)
 80015a4:	651a      	str	r2, [r3, #80]	; 0x50
	  boost_data[19] = 0x01ca3d70; // 1.79
 80015a6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015ae:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <main+0x498>)
 80015b0:	64da      	str	r2, [r3, #76]	; 0x4c
	  boost_data[18] = 0x01b851ea; // 1.72
 80015b2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015ba:	4a58      	ldr	r2, [pc, #352]	; (800171c <main+0x49c>)
 80015bc:	649a      	str	r2, [r3, #72]	; 0x48
	  boost_data[17] = 0x01a8f5c2; // 1.66
 80015be:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015c6:	4a56      	ldr	r2, [pc, #344]	; (8001720 <main+0x4a0>)
 80015c8:	645a      	str	r2, [r3, #68]	; 0x44
	  boost_data[16] = 0x01970a3c; // 1.59
 80015ca:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015d2:	4a54      	ldr	r2, [pc, #336]	; (8001724 <main+0x4a4>)
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40
	  boost_data[15] = 0x01851eb8; // 1.52
 80015d6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015de:	4a52      	ldr	r2, [pc, #328]	; (8001728 <main+0x4a8>)
 80015e0:	63da      	str	r2, [r3, #60]	; 0x3c
	  boost_data[14] = 0x01733332; // 1.45
 80015e2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015ea:	4a50      	ldr	r2, [pc, #320]	; (800172c <main+0x4ac>)
 80015ec:	639a      	str	r2, [r3, #56]	; 0x38
	  boost_data[13] = 0x016147ae; // 1.38
 80015ee:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015f6:	4a4e      	ldr	r2, [pc, #312]	; (8001730 <main+0x4b0>)
 80015f8:	635a      	str	r2, [r3, #52]	; 0x34
	  boost_data[12] = 0x0151eb84; // 1.32
 80015fa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001602:	4a4c      	ldr	r2, [pc, #304]	; (8001734 <main+0x4b4>)
 8001604:	631a      	str	r2, [r3, #48]	; 0x30
	  boost_data[11] = 0x01400000; // 1.25
 8001606:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800160a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800160e:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
 8001614:	e090      	b.n	8001738 <main+0x4b8>
 8001616:	bf00      	nop
 8001618:	00e42904 	.word	0x00e42904
 800161c:	00cb5918 	.word	0x00cb5918
 8001620:	00b53bee 	.word	0x00b53bee
 8001624:	00a1866a 	.word	0x00a1866a
 8001628:	008ff598 	.word	0x008ff598
 800162c:	00804dce 	.word	0x00804dce
 8001630:	006fbf80 	.word	0x006fbf80
 8001634:	0065ea58 	.word	0x0065ea58
 8001638:	005ad50c 	.word	0x005ad50c
 800163c:	0050f44c 	.word	0x0050f44c
 8001640:	0048268c 	.word	0x0048268c
 8001644:	00404de6 	.word	0x00404de6
 8001648:	00394fae 	.word	0x00394fae
 800164c:	00331426 	.word	0x00331426
 8001650:	002d8620 	.word	0x002d8620
 8001654:	002892c0 	.word	0x002892c0
 8001658:	00242934 	.word	0x00242934
 800165c:	00203a7e 	.word	0x00203a7e
 8001660:	001cb942 	.word	0x001cb942
 8001664:	00199998 	.word	0x00199998
 8001668:	0016d0e6 	.word	0x0016d0e6
 800166c:	001455b4 	.word	0x001455b4
 8001670:	00121f96 	.word	0x00121f96
 8001674:	0010270a 	.word	0x0010270a
 8001678:	000e655c 	.word	0x000e655c
 800167c:	000cd494 	.word	0x000cd494
 8001680:	000b6f62 	.word	0x000b6f62
 8001684:	000a3108 	.word	0x000a3108
 8001688:	0009154e 	.word	0x0009154e
 800168c:	011f3b64 	.word	0x011f3b64
 8001690:	014248e8 	.word	0x014248e8
 8001694:	01699c0f 	.word	0x01699c0f
 8001698:	0195bb8c 	.word	0x0195bb8c
 800169c:	01c73d51 	.word	0x01c73d51
 80016a0:	023d1cd1 	.word	0x023d1cd1
 80016a4:	02830afd 	.word	0x02830afd
 80016a8:	02d1818b 	.word	0x02d1818b
 80016ac:	03298b07 	.word	0x03298b07
 80016b0:	038c5280 	.word	0x038c5280
 80016b4:	03fb2783 	.word	0x03fb2783
 80016b8:	0477828f 	.word	0x0477828f
 80016bc:	05030a10 	.word	0x05030a10
 80016c0:	059f9802 	.word	0x059f9802
 80016c4:	064f4034 	.word	0x064f4034
 80016c8:	07145759 	.word	0x07145759
 80016cc:	07f17af3 	.word	0x07f17af3
 80016d0:	08e99a36 	.word	0x08e99a36
 80016d4:	0b385e03 	.word	0x0b385e03
 80016d8:	0c96d95b 	.word	0x0c96d95b
 80016dc:	0e20189b 	.word	0x0e20189b
 80016e0:	0fd9539a 	.word	0x0fd9539a
 80016e4:	11c86531 	.word	0x11c86531
 80016e8:	13f3df1c 	.word	0x13f3df1c
 80016ec:	16632049 	.word	0x16632049
 80016f0:	191e6de4 	.word	0x191e6de4
 80016f4:	1c2f0f70 	.word	0x1c2f0f70
 80016f8:	02666666 	.word	0x02666666
 80016fc:	02570a3c 	.word	0x02570a3c
 8001700:	02451eb8 	.word	0x02451eb8
 8001704:	02333332 	.word	0x02333332
 8001708:	022147ae 	.word	0x022147ae
 800170c:	020f5c28 	.word	0x020f5c28
 8001710:	01ee147a 	.word	0x01ee147a
 8001714:	01dc28f4 	.word	0x01dc28f4
 8001718:	01ca3d70 	.word	0x01ca3d70
 800171c:	01b851ea 	.word	0x01b851ea
 8001720:	01a8f5c2 	.word	0x01a8f5c2
 8001724:	01970a3c 	.word	0x01970a3c
 8001728:	01851eb8 	.word	0x01851eb8
 800172c:	01733332 	.word	0x01733332
 8001730:	016147ae 	.word	0x016147ae
 8001734:	0151eb84 	.word	0x0151eb84
	  boost_data[10] = 0x012e147a; // 1.18
 8001738:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800173c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001740:	4a21      	ldr	r2, [pc, #132]	; (80017c8 <main+0x548>)
 8001742:	629a      	str	r2, [r3, #40]	; 0x28
	  boost_data[9] =  0x011c28f4; // 1.11
 8001744:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001748:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800174c:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <main+0x54c>)
 800174e:	625a      	str	r2, [r3, #36]	; 0x24
	  boost_data[8] =  0x010a3d70; // 1.04
 8001750:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001754:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001758:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <main+0x550>)
 800175a:	621a      	str	r2, [r3, #32]
	  boost_data[7] =  0x00fae146; // 0.98
 800175c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001760:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001764:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <main+0x554>)
 8001766:	61da      	str	r2, [r3, #28]
	  boost_data[6] =  0x00e8f5c2; // 0.91
 8001768:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800176c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <main+0x558>)
 8001772:	619a      	str	r2, [r3, #24]
	  boost_data[5] =  0x00d70a3c; // 0.84
 8001774:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001778:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800177c:	4a17      	ldr	r2, [pc, #92]	; (80017dc <main+0x55c>)
 800177e:	615a      	str	r2, [r3, #20]
	  boost_data[4] =  0x00c51eb8; // 0.77
 8001780:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001784:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001788:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <main+0x560>)
 800178a:	611a      	str	r2, [r3, #16]
	  boost_data[3] =  0x00b33332; // 0.70
 800178c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001790:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001794:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <main+0x564>)
 8001796:	60da      	str	r2, [r3, #12]
	  boost_data[2] =  0x00a3d70a; // 0.64
 8001798:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800179c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017a0:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <main+0x568>)
 80017a2:	609a      	str	r2, [r3, #8]
	  boost_data[1] =  0x0091eb84; // 0.57
 80017a4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017ac:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <main+0x56c>)
 80017ae:	605a      	str	r2, [r3, #4]
	  boost_data[0] =  0x00800000; // 0.50
 80017b0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017bc:	601a      	str	r2, [r3, #0]

	  for(k=0; k<30; k++)
 80017be:	2300      	movs	r3, #0
 80017c0:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
 80017c4:	e063      	b.n	800188e <main+0x60e>
 80017c6:	bf00      	nop
 80017c8:	012e147a 	.word	0x012e147a
 80017cc:	011c28f4 	.word	0x011c28f4
 80017d0:	010a3d70 	.word	0x010a3d70
 80017d4:	00fae146 	.word	0x00fae146
 80017d8:	00e8f5c2 	.word	0x00e8f5c2
 80017dc:	00d70a3c 	.word	0x00d70a3c
 80017e0:	00c51eb8 	.word	0x00c51eb8
 80017e4:	00b33332 	.word	0x00b33332
 80017e8:	00a3d70a 	.word	0x00a3d70a
 80017ec:	0091eb84 	.word	0x0091eb84
	  {
		  log_in_table[k] = 4096.0*log10(1.0+(3.0*k/10.0));
 80017f0:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fe41 	bl	800047c <__aeabi_i2d>
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	4bbb      	ldr	r3, [pc, #748]	; (8001aec <main+0x86c>)
 8001800:	f7fe fea6 	bl	8000550 <__aeabi_dmul>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	4bb7      	ldr	r3, [pc, #732]	; (8001af0 <main+0x870>)
 8001812:	f7fe ffc7 	bl	80007a4 <__aeabi_ddiv>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	4bb4      	ldr	r3, [pc, #720]	; (8001af4 <main+0x874>)
 8001824:	f7fe fcde 	bl	80001e4 <__adddf3>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	ec43 2b17 	vmov	d7, r2, r3
 8001830:	eeb0 0a47 	vmov.f32	s0, s14
 8001834:	eef0 0a67 	vmov.f32	s1, s15
 8001838:	f004 f822 	bl	8005880 <log10>
 800183c:	ec51 0b10 	vmov	r0, r1, d0
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4bac      	ldr	r3, [pc, #688]	; (8001af8 <main+0x878>)
 8001846:	f7fe fe83 	bl	8000550 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	f8b7 418e 	ldrh.w	r4, [r7, #398]	; 0x18e
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f7ff f92b 	bl	8000ab0 <__aeabi_d2uiz>
 800185a:	4603      	mov	r3, r0
 800185c:	b29a      	uxth	r2, r3
 800185e:	4ba7      	ldr	r3, [pc, #668]	; (8001afc <main+0x87c>)
 8001860:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  linear_in_table[k] = 4096*k/30;
 8001864:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001868:	031b      	lsls	r3, r3, #12
 800186a:	4aa5      	ldr	r2, [pc, #660]	; (8001b00 <main+0x880>)
 800186c:	fb82 1203 	smull	r1, r2, r2, r3
 8001870:	441a      	add	r2, r3
 8001872:	1112      	asrs	r2, r2, #4
 8001874:	17db      	asrs	r3, r3, #31
 8001876:	1ad2      	subs	r2, r2, r3
 8001878:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 800187c:	b291      	uxth	r1, r2
 800187e:	4aa1      	ldr	r2, [pc, #644]	; (8001b04 <main+0x884>)
 8001880:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(k=0; k<30; k++)
 8001884:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001888:	3301      	adds	r3, #1
 800188a:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
 800188e:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001892:	2b1d      	cmp	r3, #29
 8001894:	d9ac      	bls.n	80017f0 <main+0x570>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001896:	f001 f989 	bl	8002bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800189a:	f000 facb 	bl	8001e34 <SystemClock_Config>
//  MX_I2C3_Init();
//  MX_TIM2_Init();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800189e:	f000 fd43 	bl	8002328 <MX_GPIO_Init>
  MX_DMA_Init();
 80018a2:	f000 fd21 	bl	80022e8 <MX_DMA_Init>
  MX_I2C2_Init();
 80018a6:	f000 fc75 	bl	8002194 <MX_I2C2_Init>
  MX_I2C3_Init();
 80018aa:	f000 fca1 	bl	80021f0 <MX_I2C3_Init>
  MX_ADC1_Init();
 80018ae:	f000 fb2d 	bl	8001f0c <MX_ADC1_Init>
  MX_I2C1_Init();
 80018b2:	f000 fc41 	bl	8002138 <MX_I2C1_Init>
  MX_TIM2_Init();
 80018b6:	f000 fcc9 	bl	800224c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Disable DSP
  HAL_GPIO_WritePin(nRST_DSP_GPIO_Port, nRST_DSP_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c0:	4891      	ldr	r0, [pc, #580]	; (8001b08 <main+0x888>)
 80018c2:	f002 fbf7 	bl	80040b4 <HAL_GPIO_WritePin>

  // Disable CLK
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018cc:	488e      	ldr	r0, [pc, #568]	; (8001b08 <main+0x888>)
 80018ce:	f002 fbf1 	bl	80040b4 <HAL_GPIO_WritePin>

  // Configure Sampling Rate SR = Standard => 0
  //							  Double   => 1
  HAL_GPIO_WritePin(SR_GPIO_Port, SR_Pin, GPIO_PIN_SET);
 80018d2:	2201      	movs	r2, #1
 80018d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d8:	488c      	ldr	r0, [pc, #560]	; (8001b0c <main+0x88c>)
 80018da:	f002 fbeb 	bl	80040b4 <HAL_GPIO_WritePin>
  // Configure System Clock SCKO1 CSEL = 0 (default)
  HAL_GPIO_WritePin(CSEL_GPIO_Port, CSEL_Pin, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e4:	4889      	ldr	r0, [pc, #548]	; (8001b0c <main+0x88c>)
 80018e6:	f002 fbe5 	bl	80040b4 <HAL_GPIO_WritePin>
  // Configure Sampling Frequency Group = 32KHz => 10
  HAL_GPIO_WritePin(FS2_GPIO_Port, FS2_Pin, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018f0:	4886      	ldr	r0, [pc, #536]	; (8001b0c <main+0x88c>)
 80018f2:	f002 fbdf 	bl	80040b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FS1_GPIO_Port, FS1_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fc:	4883      	ldr	r0, [pc, #524]	; (8001b0c <main+0x88c>)
 80018fe:	f002 fbd9 	bl	80040b4 <HAL_GPIO_WritePin>

  // Enable CLK
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_SET);
 8001902:	2201      	movs	r2, #1
 8001904:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001908:	487f      	ldr	r0, [pc, #508]	; (8001b08 <main+0x888>)
 800190a:	f002 fbd3 	bl	80040b4 <HAL_GPIO_WritePin>

  HAL_Delay(500);
 800190e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001912:	f001 f9bd 	bl	8002c90 <HAL_Delay>

  // Configure DAC format to I2S 16-24 bit, slow roll-off
  auxData[0] = 0b00101000;
 8001916:	4b7e      	ldr	r3, [pc, #504]	; (8001b10 <main+0x890>)
 8001918:	2228      	movs	r2, #40	; 0x28
 800191a:	701a      	strb	r2, [r3, #0]
  auxData[1] = 0x00;
 800191c:	4b7c      	ldr	r3, [pc, #496]	; (8001b10 <main+0x890>)
 800191e:	2200      	movs	r2, #0
 8001920:	705a      	strb	r2, [r3, #1]
  stat = HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, 0x09, 1, auxData, 1, 1000);
 8001922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	2301      	movs	r3, #1
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	4b78      	ldr	r3, [pc, #480]	; (8001b10 <main+0x890>)
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2301      	movs	r3, #1
 8001932:	2209      	movs	r2, #9
 8001934:	2198      	movs	r1, #152	; 0x98
 8001936:	4877      	ldr	r0, [pc, #476]	; (8001b14 <main+0x894>)
 8001938:	f002 fd1a 	bl	8004370 <HAL_I2C_Mem_Write>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	4b75      	ldr	r3, [pc, #468]	; (8001b18 <main+0x898>)
 8001942:	701a      	strb	r2, [r3, #0]

  auxData[0] = 0b00101001;
 8001944:	4b72      	ldr	r3, [pc, #456]	; (8001b10 <main+0x890>)
 8001946:	2229      	movs	r2, #41	; 0x29
 8001948:	701a      	strb	r2, [r3, #0]
  auxData[1] = 0x00;
 800194a:	4b71      	ldr	r3, [pc, #452]	; (8001b10 <main+0x890>)
 800194c:	2200      	movs	r2, #0
 800194e:	705a      	strb	r2, [r3, #1]
  stat = HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, 0x0A, 1, auxData, 1, 1000);
 8001950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001954:	9302      	str	r3, [sp, #8]
 8001956:	2301      	movs	r3, #1
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	4b6d      	ldr	r3, [pc, #436]	; (8001b10 <main+0x890>)
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2301      	movs	r3, #1
 8001960:	220a      	movs	r2, #10
 8001962:	2198      	movs	r1, #152	; 0x98
 8001964:	486b      	ldr	r0, [pc, #428]	; (8001b14 <main+0x894>)
 8001966:	f002 fd03 	bl	8004370 <HAL_I2C_Mem_Write>
 800196a:	4603      	mov	r3, r0
 800196c:	461a      	mov	r2, r3
 800196e:	4b6a      	ldr	r3, [pc, #424]	; (8001b18 <main+0x898>)
 8001970:	701a      	strb	r2, [r3, #0]

  // Configure DAC over-sampling wide, sharp roll-off
  auxData[0] = 0b10000000;
 8001972:	4b67      	ldr	r3, [pc, #412]	; (8001b10 <main+0x890>)
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	701a      	strb	r2, [r3, #0]
  auxData[1] = 0x00;
 8001978:	4b65      	ldr	r3, [pc, #404]	; (8001b10 <main+0x890>)
 800197a:	2200      	movs	r2, #0
 800197c:	705a      	strb	r2, [r3, #1]
  stat = HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, 0x0C, 1, auxData, 1, 1000);
 800197e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001982:	9302      	str	r3, [sp, #8]
 8001984:	2301      	movs	r3, #1
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	4b61      	ldr	r3, [pc, #388]	; (8001b10 <main+0x890>)
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2301      	movs	r3, #1
 800198e:	220c      	movs	r2, #12
 8001990:	2198      	movs	r1, #152	; 0x98
 8001992:	4860      	ldr	r0, [pc, #384]	; (8001b14 <main+0x894>)
 8001994:	f002 fcec 	bl	8004370 <HAL_I2C_Mem_Write>
 8001998:	4603      	mov	r3, r0
 800199a:	461a      	mov	r2, r3
 800199c:	4b5e      	ldr	r3, [pc, #376]	; (8001b18 <main+0x898>)
 800199e:	701a      	strb	r2, [r3, #0]

  // Enable DSP
  HAL_GPIO_WritePin(nRST_DSP_GPIO_Port, nRST_DSP_Pin, GPIO_PIN_SET);
 80019a0:	2201      	movs	r2, #1
 80019a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a6:	4858      	ldr	r0, [pc, #352]	; (8001b08 <main+0x888>)
 80019a8:	f002 fb84 	bl	80040b4 <HAL_GPIO_WritePin>

  HAL_Delay(500);
 80019ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019b0:	f001 f96e 	bl	8002c90 <HAL_Delay>

  default_download_IC_1();
 80019b4:	f7ff fa1a 	bl	8000dec <default_download_IC_1>
  HAL_Delay(500);
 80019b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019bc:	f001 f968 	bl	8002c90 <HAL_Delay>

  //Configure ADCs clock settings
  auxData[0] = 0b01000000;
 80019c0:	4b53      	ldr	r3, [pc, #332]	; (8001b10 <main+0x890>)
 80019c2:	2240      	movs	r2, #64	; 0x40
 80019c4:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c1, ADC_ADDR, 0x20, 1, auxData, 1, 1000);
 80019c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ca:	9302      	str	r3, [sp, #8]
 80019cc:	2301      	movs	r3, #1
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	4b4f      	ldr	r3, [pc, #316]	; (8001b10 <main+0x890>)
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2301      	movs	r3, #1
 80019d6:	2220      	movs	r2, #32
 80019d8:	2194      	movs	r1, #148	; 0x94
 80019da:	4850      	ldr	r0, [pc, #320]	; (8001b1c <main+0x89c>)
 80019dc:	f002 fcc8 	bl	8004370 <HAL_I2C_Mem_Write>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b4c      	ldr	r3, [pc, #304]	; (8001b18 <main+0x898>)
 80019e6:	701a      	strb	r2, [r3, #0]

  auxData[0] = 0b00000001;
 80019e8:	4b49      	ldr	r3, [pc, #292]	; (8001b10 <main+0x890>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c1, ADC_ADDR, 0x0D, 1, auxData, 1, 1000);
 80019ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f2:	9302      	str	r3, [sp, #8]
 80019f4:	2301      	movs	r3, #1
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	4b45      	ldr	r3, [pc, #276]	; (8001b10 <main+0x890>)
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2301      	movs	r3, #1
 80019fe:	220d      	movs	r2, #13
 8001a00:	2194      	movs	r1, #148	; 0x94
 8001a02:	4846      	ldr	r0, [pc, #280]	; (8001b1c <main+0x89c>)
 8001a04:	f002 fcb4 	bl	8004370 <HAL_I2C_Mem_Write>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b42      	ldr	r3, [pc, #264]	; (8001b18 <main+0x898>)
 8001a0e:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c2, ADC_ADDR, 0x0D, 1, auxData, 1, 1000);
 8001a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	2301      	movs	r3, #1
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	4b3d      	ldr	r3, [pc, #244]	; (8001b10 <main+0x890>)
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	220d      	movs	r2, #13
 8001a22:	2194      	movs	r1, #148	; 0x94
 8001a24:	483e      	ldr	r0, [pc, #248]	; (8001b20 <main+0x8a0>)
 8001a26:	f002 fca3 	bl	8004370 <HAL_I2C_Mem_Write>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b3a      	ldr	r3, [pc, #232]	; (8001b18 <main+0x898>)
 8001a30:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c3, ADC_ADDR, 0x0D, 1, auxData, 1, 1000);
 8001a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a36:	9302      	str	r3, [sp, #8]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <main+0x890>)
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2301      	movs	r3, #1
 8001a42:	220d      	movs	r2, #13
 8001a44:	2194      	movs	r1, #148	; 0x94
 8001a46:	4833      	ldr	r0, [pc, #204]	; (8001b14 <main+0x894>)
 8001a48:	f002 fc92 	bl	8004370 <HAL_I2C_Mem_Write>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b31      	ldr	r3, [pc, #196]	; (8001b18 <main+0x898>)
 8001a52:	701a      	strb	r2, [r3, #0]

  stat = HAL_I2C_Mem_Write(&hi2c1, ADC_ADDR, 0x0E, 1, auxData, 1, 1000);
 8001a54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a58:	9302      	str	r3, [sp, #8]
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <main+0x890>)
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2301      	movs	r3, #1
 8001a64:	220e      	movs	r2, #14
 8001a66:	2194      	movs	r1, #148	; 0x94
 8001a68:	482c      	ldr	r0, [pc, #176]	; (8001b1c <main+0x89c>)
 8001a6a:	f002 fc81 	bl	8004370 <HAL_I2C_Mem_Write>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <main+0x898>)
 8001a74:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c2, ADC_ADDR, 0x0E, 1, auxData, 1, 1000);
 8001a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7a:	9302      	str	r3, [sp, #8]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <main+0x890>)
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2301      	movs	r3, #1
 8001a86:	220e      	movs	r2, #14
 8001a88:	2194      	movs	r1, #148	; 0x94
 8001a8a:	4825      	ldr	r0, [pc, #148]	; (8001b20 <main+0x8a0>)
 8001a8c:	f002 fc70 	bl	8004370 <HAL_I2C_Mem_Write>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <main+0x898>)
 8001a96:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c3, ADC_ADDR, 0x0E, 1, auxData, 1, 1000);
 8001a98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <main+0x890>)
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	220e      	movs	r2, #14
 8001aaa:	2194      	movs	r1, #148	; 0x94
 8001aac:	4819      	ldr	r0, [pc, #100]	; (8001b14 <main+0x894>)
 8001aae:	f002 fc5f 	bl	8004370 <HAL_I2C_Mem_Write>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <main+0x898>)
 8001ab8:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start(&htim2);
 8001aba:	481a      	ldr	r0, [pc, #104]	; (8001b24 <main+0x8a4>)
 8001abc:	f003 fc04 	bl	80052c8 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, value, ADC_POT);
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	4919      	ldr	r1, [pc, #100]	; (8001b28 <main+0x8a8>)
 8001ac4:	4819      	ldr	r0, [pc, #100]	; (8001b2c <main+0x8ac>)
 8001ac6:	f001 f94b 	bl	8002d60 <HAL_ADC_Start_DMA>

  HAL_Delay(250);
 8001aca:	20fa      	movs	r0, #250	; 0xfa
 8001acc:	f001 f8e0 	bl	8002c90 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  aux[0] = 0x00;
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <main+0x8b0>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
	  aux[1] = 0x00;
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <main+0x8b0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	705a      	strb	r2, [r3, #1]
	  aux[2] = 0x00;
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <main+0x8b0>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	709a      	strb	r2, [r3, #2]

	  for(k=0; k<VOL_ARRAY; k++) // Filters 32Hz - 16KHz + Subwoofer
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
 8001ae8:	e04e      	b.n	8001b88 <main+0x908>
 8001aea:	bf00      	nop
 8001aec:	40080000 	.word	0x40080000
 8001af0:	40240000 	.word	0x40240000
 8001af4:	3ff00000 	.word	0x3ff00000
 8001af8:	40b00000 	.word	0x40b00000
 8001afc:	20004278 	.word	0x20004278
 8001b00:	88888889 	.word	0x88888889
 8001b04:	200042b4 	.word	0x200042b4
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	20004218 	.word	0x20004218
 8001b14:	20004178 	.word	0x20004178
 8001b18:	20004214 	.word	0x20004214
 8001b1c:	200040d0 	.word	0x200040d0
 8001b20:	20004124 	.word	0x20004124
 8001b24:	200041cc 	.word	0x200041cc
 8001b28:	2000421c 	.word	0x2000421c
 8001b2c:	20004028 	.word	0x20004028
 8001b30:	20004310 	.word	0x20004310
	  {
		  if(flag[k] == 1)
 8001b34:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001b38:	4abb      	ldr	r2, [pc, #748]	; (8001e28 <main+0xba8>)
 8001b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d11d      	bne.n	8001b7e <main+0x8fe>
		  {
			  flag[k] = 0;
 8001b42:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001b46:	4ab8      	ldr	r2, [pc, #736]	; (8001e28 <main+0xba8>)
 8001b48:	2100      	movs	r1, #0
 8001b4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  aux[3] = 29 - pote[k];
 8001b4e:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001b52:	4ab6      	ldr	r2, [pc, #728]	; (8001e2c <main+0xbac>)
 8001b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f1c3 031d 	rsb	r3, r3, #29
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	4bb3      	ldr	r3, [pc, #716]	; (8001e30 <main+0xbb0>)
 8001b62:	70da      	strb	r2, [r3, #3]
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, BandAddress[k], 4, aux);
 8001b64:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001b6e:	443b      	add	r3, r7
 8001b70:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8001b74:	4bae      	ldr	r3, [pc, #696]	; (8001e30 <main+0xbb0>)
 8001b76:	2204      	movs	r2, #4
 8001b78:	2070      	movs	r0, #112	; 0x70
 8001b7a:	f000 fc61 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	  for(k=0; k<VOL_ARRAY; k++) // Filters 32Hz - 16KHz + Subwoofer
 8001b7e:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001b82:	3301      	adds	r3, #1
 8001b84:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
 8001b88:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001b8c:	2b0a      	cmp	r3, #10
 8001b8e:	d9d1      	bls.n	8001b34 <main+0x8b4>
		  }
	  }

	  aux[0] = 0x00;
 8001b90:	4ba7      	ldr	r3, [pc, #668]	; (8001e30 <main+0xbb0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
	  aux[1] = 0x00;
 8001b96:	4ba6      	ldr	r3, [pc, #664]	; (8001e30 <main+0xbb0>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	705a      	strb	r2, [r3, #1]
	  aux[2] = 0x00;
 8001b9c:	4ba4      	ldr	r3, [pc, #656]	; (8001e30 <main+0xbb0>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	709a      	strb	r2, [r3, #2]

	  if(flag[VOL_ARRAY] == 1) // Volume
 8001ba2:	4ba1      	ldr	r3, [pc, #644]	; (8001e28 <main+0xba8>)
 8001ba4:	8adb      	ldrh	r3, [r3, #22]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d13e      	bne.n	8001c28 <main+0x9a8>
	  {
		  flag[VOL_ARRAY] = 0;
 8001baa:	4b9f      	ldr	r3, [pc, #636]	; (8001e28 <main+0xba8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	82da      	strh	r2, [r3, #22]
		  pote_aux = 29 - pote[VOL_ARRAY];
 8001bb0:	4b9e      	ldr	r3, [pc, #632]	; (8001e2c <main+0xbac>)
 8001bb2:	8adb      	ldrh	r3, [r3, #22]
 8001bb4:	f1c3 031d 	rsb	r3, r3, #29
 8001bb8:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
		  aux[3] = 0xFF & (vol_data[pote_aux]);
 8001bbc:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001bc6:	443b      	add	r3, r7
 8001bc8:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4b98      	ldr	r3, [pc, #608]	; (8001e30 <main+0xbb0>)
 8001bd0:	70da      	strb	r2, [r3, #3]
		  aux[2] = 0xFF & ((vol_data[pote_aux])>>8);
 8001bd2:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001bdc:	443b      	add	r3, r7
 8001bde:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4b92      	ldr	r3, [pc, #584]	; (8001e30 <main+0xbb0>)
 8001be8:	709a      	strb	r2, [r3, #2]
		  aux[1] = 0xFF & ((vol_data[pote_aux])>>16);
 8001bea:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001bf4:	443b      	add	r3, r7
 8001bf6:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001bfa:	0c1b      	lsrs	r3, r3, #16
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4b8c      	ldr	r3, [pc, #560]	; (8001e30 <main+0xbb0>)
 8001c00:	705a      	strb	r2, [r3, #1]
		  aux[0] = 0xFF & ((vol_data[pote_aux])>>24);
 8001c02:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001c0c:	443b      	add	r3, r7
 8001c0e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001c12:	0e1b      	lsrs	r3, r3, #24
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b86      	ldr	r3, [pc, #536]	; (8001e30 <main+0xbb0>)
 8001c18:	701a      	strb	r2, [r3, #0]
		  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, BandAddress[VOL_ARRAY], 4, aux);
 8001c1a:	f8b7 1182 	ldrh.w	r1, [r7, #386]	; 0x182
 8001c1e:	4b84      	ldr	r3, [pc, #528]	; (8001e30 <main+0xbb0>)
 8001c20:	2204      	movs	r2, #4
 8001c22:	2070      	movs	r0, #112	; 0x70
 8001c24:	f000 fc0c 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	  }

	  if(flag[LOUD_LOW_ARRAY] == 1) // Loudness Low Boost
 8001c28:	4b7f      	ldr	r3, [pc, #508]	; (8001e28 <main+0xba8>)
 8001c2a:	8b1b      	ldrh	r3, [r3, #24]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d13e      	bne.n	8001cae <main+0xa2e>
	  {
		  flag[LOUD_LOW_ARRAY] = 0;
 8001c30:	4b7d      	ldr	r3, [pc, #500]	; (8001e28 <main+0xba8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	831a      	strh	r2, [r3, #24]
		  pote_aux = 29 - pote[LOUD_LOW_ARRAY];
 8001c36:	4b7d      	ldr	r3, [pc, #500]	; (8001e2c <main+0xbac>)
 8001c38:	8b1b      	ldrh	r3, [r3, #24]
 8001c3a:	f1c3 031d 	rsb	r3, r3, #29
 8001c3e:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
		  aux[3] = 0xFF & (boost_data[pote_aux]);
 8001c42:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001c46:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001c4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	4b76      	ldr	r3, [pc, #472]	; (8001e30 <main+0xbb0>)
 8001c56:	70da      	strb	r2, [r3, #3]
		  aux[2] = 0xFF & ((boost_data[pote_aux])>>8);
 8001c58:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001c5c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001c60:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	4b70      	ldr	r3, [pc, #448]	; (8001e30 <main+0xbb0>)
 8001c6e:	709a      	strb	r2, [r3, #2]
		  aux[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8001c70:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001c74:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001c78:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	4b6a      	ldr	r3, [pc, #424]	; (8001e30 <main+0xbb0>)
 8001c86:	705a      	strb	r2, [r3, #1]
		  aux[0] = 0xFF & ((boost_data[pote_aux])>>24);
 8001c88:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001c8c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001c90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c98:	0e1b      	lsrs	r3, r3, #24
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b64      	ldr	r3, [pc, #400]	; (8001e30 <main+0xbb0>)
 8001c9e:	701a      	strb	r2, [r3, #0]
		  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, BandAddress[LOUD_LOW_ARRAY], 4, aux);
 8001ca0:	f8b7 1184 	ldrh.w	r1, [r7, #388]	; 0x184
 8001ca4:	4b62      	ldr	r3, [pc, #392]	; (8001e30 <main+0xbb0>)
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	2070      	movs	r0, #112	; 0x70
 8001caa:	f000 fbc9 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	  }

	  if(flag[LOUD_HIGH_ARRAY] == 1) // Loudness High Boost
 8001cae:	4b5e      	ldr	r3, [pc, #376]	; (8001e28 <main+0xba8>)
 8001cb0:	8b5b      	ldrh	r3, [r3, #26]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d13e      	bne.n	8001d34 <main+0xab4>
	  {
		  flag[LOUD_HIGH_ARRAY] = 0;
 8001cb6:	4b5c      	ldr	r3, [pc, #368]	; (8001e28 <main+0xba8>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	835a      	strh	r2, [r3, #26]
		  pote_aux = 29 - pote[LOUD_HIGH_ARRAY];
 8001cbc:	4b5b      	ldr	r3, [pc, #364]	; (8001e2c <main+0xbac>)
 8001cbe:	8b5b      	ldrh	r3, [r3, #26]
 8001cc0:	f1c3 031d 	rsb	r3, r3, #29
 8001cc4:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
		  aux[3] = 0xFF & (boost_data[pote_aux]);
 8001cc8:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001ccc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001cd0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4b55      	ldr	r3, [pc, #340]	; (8001e30 <main+0xbb0>)
 8001cdc:	70da      	strb	r2, [r3, #3]
		  aux[2] = 0xFF & ((boost_data[pote_aux])>>8);
 8001cde:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001ce2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001ce6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cee:	0a1b      	lsrs	r3, r3, #8
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b4f      	ldr	r3, [pc, #316]	; (8001e30 <main+0xbb0>)
 8001cf4:	709a      	strb	r2, [r3, #2]
		  aux[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8001cf6:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001cfa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001cfe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d06:	0c1b      	lsrs	r3, r3, #16
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <main+0xbb0>)
 8001d0c:	705a      	strb	r2, [r3, #1]
		  aux[0] = 0xFF & ((boost_data[pote_aux])>>24);
 8001d0e:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001d12:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001d16:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1e:	0e1b      	lsrs	r3, r3, #24
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4b43      	ldr	r3, [pc, #268]	; (8001e30 <main+0xbb0>)
 8001d24:	701a      	strb	r2, [r3, #0]
		  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, BandAddress[LOUD_HIGH_ARRAY], 4, aux);
 8001d26:	f8b7 1186 	ldrh.w	r1, [r7, #390]	; 0x186
 8001d2a:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <main+0xbb0>)
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	2070      	movs	r0, #112	; 0x70
 8001d30:	f000 fb86 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	  }

	  if(flag[LOUD_GRL_ARRAY] == 1) // Loudness
 8001d34:	4b3c      	ldr	r3, [pc, #240]	; (8001e28 <main+0xba8>)
 8001d36:	8b9b      	ldrh	r3, [r3, #28]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	f47f aec9 	bne.w	8001ad0 <main+0x850>
	  {
		  flag[LOUD_GRL_ARRAY] = 0;
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <main+0xba8>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	839a      	strh	r2, [r3, #28]
		  pote_aux = pote[LOUD_GRL_ARRAY];
 8001d44:	4b39      	ldr	r3, [pc, #228]	; (8001e2c <main+0xbac>)
 8001d46:	8b9b      	ldrh	r3, [r3, #28]
 8001d48:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
		  aux[3] = 0xFF & (vol_data[pote_aux]);
 8001d4c:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001d56:	443b      	add	r3, r7
 8001d58:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <main+0xbb0>)
 8001d60:	70da      	strb	r2, [r3, #3]
		  aux[2] = 0xFF & ((vol_data[pote_aux])>>8);
 8001d62:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001d6c:	443b      	add	r3, r7
 8001d6e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <main+0xbb0>)
 8001d78:	709a      	strb	r2, [r3, #2]
		  aux[1] = 0xFF & ((vol_data[pote_aux])>>16);
 8001d7a:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001d84:	443b      	add	r3, r7
 8001d86:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001d8a:	0c1b      	lsrs	r3, r3, #16
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <main+0xbb0>)
 8001d90:	705a      	strb	r2, [r3, #1]
		  aux[0] = 0xFF & ((vol_data[pote_aux])>>24);
 8001d92:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001d9c:	443b      	add	r3, r7
 8001d9e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001da2:	0e1b      	lsrs	r3, r3, #24
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <main+0xbb0>)
 8001da8:	701a      	strb	r2, [r3, #0]
		  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, BandAddress[LOUD_GRL_ARRAY], 4, aux);
 8001daa:	f8b7 1188 	ldrh.w	r1, [r7, #392]	; 0x188
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <main+0xbb0>)
 8001db0:	2204      	movs	r2, #4
 8001db2:	2070      	movs	r0, #112	; 0x70
 8001db4:	f000 fb44 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
		  aux[3] = 0xFF & (comp_data[pote_aux]);
 8001db8:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001dbc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001dc0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <main+0xbb0>)
 8001dcc:	70da      	strb	r2, [r3, #3]
		  aux[2] = 0xFF & ((comp_data[pote_aux])>>8);
 8001dce:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001dd2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001dd6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dde:	0a1b      	lsrs	r3, r3, #8
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <main+0xbb0>)
 8001de4:	709a      	strb	r2, [r3, #2]
		  aux[1] = 0xFF & ((comp_data[pote_aux])>>16);
 8001de6:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001dea:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001dee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df6:	0c1b      	lsrs	r3, r3, #16
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <main+0xbb0>)
 8001dfc:	705a      	strb	r2, [r3, #1]
		  aux[0] = 0xFF & ((comp_data[pote_aux])>>24);
 8001dfe:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001e02:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001e06:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0e:	0e1b      	lsrs	r3, r3, #24
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <main+0xbb0>)
 8001e14:	701a      	strb	r2, [r3, #0]
		  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_LOUDCOMP_GAINALGNS145X2GAIN_ADDR, 4, aux);
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <main+0xbb0>)
 8001e18:	2204      	movs	r2, #4
 8001e1a:	f240 61d7 	movw	r1, #1751	; 0x6d7
 8001e1e:	2070      	movs	r0, #112	; 0x70
 8001e20:	f000 fb0e 	bl	8002440 <SIGMA_WRITE_REGISTER_BLOCK>
	  aux[0] = 0x00;
 8001e24:	e654      	b.n	8001ad0 <main+0x850>
 8001e26:	bf00      	nop
 8001e28:	200042f0 	.word	0x200042f0
 8001e2c:	20004258 	.word	0x20004258
 8001e30:	20004310 	.word	0x20004310

08001e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b094      	sub	sp, #80	; 0x50
 8001e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3a:	f107 0320 	add.w	r3, r7, #32
 8001e3e:	2230      	movs	r2, #48	; 0x30
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 fcea 	bl	800581c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <SystemClock_Config+0xd0>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	4a28      	ldr	r2, [pc, #160]	; (8001f04 <SystemClock_Config+0xd0>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e66:	6413      	str	r3, [r2, #64]	; 0x40
 8001e68:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <SystemClock_Config+0xd0>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e74:	2300      	movs	r3, #0
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <SystemClock_Config+0xd4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e80:	4a21      	ldr	r2, [pc, #132]	; (8001f08 <SystemClock_Config+0xd4>)
 8001e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <SystemClock_Config+0xd4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e94:	2301      	movs	r3, #1
 8001e96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001e98:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ea2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 27;
 8001ea8:	231b      	movs	r3, #27
 8001eaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001eac:	23a0      	movs	r3, #160	; 0xa0
 8001eae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb8:	f107 0320 	add.w	r3, r7, #32
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 fd6f 	bl	80049a0 <HAL_RCC_OscConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ec8:	f000 fc1e 	bl	8002708 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ecc:	230f      	movs	r3, #15
 8001ece:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001edc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	2102      	movs	r1, #2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f002 ffd0 	bl	8004e90 <HAL_RCC_ClockConfig>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001ef6:	f000 fc07 	bl	8002708 <Error_Handler>
  }
}
 8001efa:	bf00      	nop
 8001efc:	3750      	adds	r7, #80	; 0x50
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40007000 	.word	0x40007000

08001f0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f12:	463b      	mov	r3, r7
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f1e:	4b84      	ldr	r3, [pc, #528]	; (8002130 <MX_ADC1_Init+0x224>)
 8001f20:	4a84      	ldr	r2, [pc, #528]	; (8002134 <MX_ADC1_Init+0x228>)
 8001f22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f24:	4b82      	ldr	r3, [pc, #520]	; (8002130 <MX_ADC1_Init+0x224>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f2a:	4b81      	ldr	r3, [pc, #516]	; (8002130 <MX_ADC1_Init+0x224>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001f30:	4b7f      	ldr	r3, [pc, #508]	; (8002130 <MX_ADC1_Init+0x224>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f36:	4b7e      	ldr	r3, [pc, #504]	; (8002130 <MX_ADC1_Init+0x224>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f3c:	4b7c      	ldr	r3, [pc, #496]	; (8002130 <MX_ADC1_Init+0x224>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001f44:	4b7a      	ldr	r3, [pc, #488]	; (8002130 <MX_ADC1_Init+0x224>)
 8001f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001f4c:	4b78      	ldr	r3, [pc, #480]	; (8002130 <MX_ADC1_Init+0x224>)
 8001f4e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f54:	4b76      	ldr	r3, [pc, #472]	; (8002130 <MX_ADC1_Init+0x224>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 15;
 8001f5a:	4b75      	ldr	r3, [pc, #468]	; (8002130 <MX_ADC1_Init+0x224>)
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f60:	4b73      	ldr	r3, [pc, #460]	; (8002130 <MX_ADC1_Init+0x224>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001f68:	4b71      	ldr	r3, [pc, #452]	; (8002130 <MX_ADC1_Init+0x224>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f6e:	4870      	ldr	r0, [pc, #448]	; (8002130 <MX_ADC1_Init+0x224>)
 8001f70:	f000 feb2 	bl	8002cd8 <HAL_ADC_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001f7a:	f000 fbc5 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001f86:	2301      	movs	r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4868      	ldr	r0, [pc, #416]	; (8002130 <MX_ADC1_Init+0x224>)
 8001f90:	f000 ffea 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001f9a:	f000 fbb5 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4861      	ldr	r0, [pc, #388]	; (8002130 <MX_ADC1_Init+0x224>)
 8001fac:	f000 ffdc 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001fb6:	f000 fba7 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	485a      	ldr	r0, [pc, #360]	; (8002130 <MX_ADC1_Init+0x224>)
 8001fc8:	f000 ffce 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001fd2:	f000 fb99 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fde:	463b      	mov	r3, r7
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4853      	ldr	r0, [pc, #332]	; (8002130 <MX_ADC1_Init+0x224>)
 8001fe4:	f000 ffc0 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001fee:	f000 fb8b 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001ff6:	2305      	movs	r3, #5
 8001ff8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	484c      	ldr	r0, [pc, #304]	; (8002130 <MX_ADC1_Init+0x224>)
 8002000:	f000 ffb2 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800200a:	f000 fb7d 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800200e:	2305      	movs	r3, #5
 8002010:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002012:	2306      	movs	r3, #6
 8002014:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002016:	463b      	mov	r3, r7
 8002018:	4619      	mov	r1, r3
 800201a:	4845      	ldr	r0, [pc, #276]	; (8002130 <MX_ADC1_Init+0x224>)
 800201c:	f000 ffa4 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8002026:	f000 fb6f 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800202a:	2306      	movs	r3, #6
 800202c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800202e:	2307      	movs	r3, #7
 8002030:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002032:	463b      	mov	r3, r7
 8002034:	4619      	mov	r1, r3
 8002036:	483e      	ldr	r0, [pc, #248]	; (8002130 <MX_ADC1_Init+0x224>)
 8002038:	f000 ff96 	bl	8002f68 <HAL_ADC_ConfigChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8002042:	f000 fb61 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002046:	2307      	movs	r3, #7
 8002048:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800204a:	2308      	movs	r3, #8
 800204c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800204e:	463b      	mov	r3, r7
 8002050:	4619      	mov	r1, r3
 8002052:	4837      	ldr	r0, [pc, #220]	; (8002130 <MX_ADC1_Init+0x224>)
 8002054:	f000 ff88 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 800205e:	f000 fb53 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002062:	2308      	movs	r3, #8
 8002064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002066:	2309      	movs	r3, #9
 8002068:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800206a:	463b      	mov	r3, r7
 800206c:	4619      	mov	r1, r3
 800206e:	4830      	ldr	r0, [pc, #192]	; (8002130 <MX_ADC1_Init+0x224>)
 8002070:	f000 ff7a 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 800207a:	f000 fb45 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800207e:	2309      	movs	r3, #9
 8002080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002082:	230a      	movs	r3, #10
 8002084:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002086:	463b      	mov	r3, r7
 8002088:	4619      	mov	r1, r3
 800208a:	4829      	ldr	r0, [pc, #164]	; (8002130 <MX_ADC1_Init+0x224>)
 800208c:	f000 ff6c 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8002096:	f000 fb37 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800209a:	230a      	movs	r3, #10
 800209c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800209e:	230b      	movs	r3, #11
 80020a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020a2:	463b      	mov	r3, r7
 80020a4:	4619      	mov	r1, r3
 80020a6:	4822      	ldr	r0, [pc, #136]	; (8002130 <MX_ADC1_Init+0x224>)
 80020a8:	f000 ff5e 	bl	8002f68 <HAL_ADC_ConfigChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80020b2:	f000 fb29 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80020b6:	230b      	movs	r3, #11
 80020b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80020ba:	230c      	movs	r3, #12
 80020bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020be:	463b      	mov	r3, r7
 80020c0:	4619      	mov	r1, r3
 80020c2:	481b      	ldr	r0, [pc, #108]	; (8002130 <MX_ADC1_Init+0x224>)
 80020c4:	f000 ff50 	bl	8002f68 <HAL_ADC_ConfigChannel>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 80020ce:	f000 fb1b 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80020d2:	230c      	movs	r3, #12
 80020d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80020d6:	230d      	movs	r3, #13
 80020d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020da:	463b      	mov	r3, r7
 80020dc:	4619      	mov	r1, r3
 80020de:	4814      	ldr	r0, [pc, #80]	; (8002130 <MX_ADC1_Init+0x224>)
 80020e0:	f000 ff42 	bl	8002f68 <HAL_ADC_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 80020ea:	f000 fb0d 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80020ee:	230d      	movs	r3, #13
 80020f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80020f2:	230e      	movs	r3, #14
 80020f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f6:	463b      	mov	r3, r7
 80020f8:	4619      	mov	r1, r3
 80020fa:	480d      	ldr	r0, [pc, #52]	; (8002130 <MX_ADC1_Init+0x224>)
 80020fc:	f000 ff34 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_ADC1_Init+0x1fe>
  {
    Error_Handler();
 8002106:	f000 faff 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800210a:	230e      	movs	r3, #14
 800210c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 800210e:	230f      	movs	r3, #15
 8002110:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002112:	463b      	mov	r3, r7
 8002114:	4619      	mov	r1, r3
 8002116:	4806      	ldr	r0, [pc, #24]	; (8002130 <MX_ADC1_Init+0x224>)
 8002118:	f000 ff26 	bl	8002f68 <HAL_ADC_ConfigChannel>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_ADC1_Init+0x21a>
  {
    Error_Handler();
 8002122:	f000 faf1 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20004028 	.word	0x20004028
 8002134:	40012000 	.word	0x40012000

08002138 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <MX_I2C1_Init+0x50>)
 800213e:	4a13      	ldr	r2, [pc, #76]	; (800218c <MX_I2C1_Init+0x54>)
 8002140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <MX_I2C1_Init+0x50>)
 8002144:	4a12      	ldr	r2, [pc, #72]	; (8002190 <MX_I2C1_Init+0x58>)
 8002146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <MX_I2C1_Init+0x50>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <MX_I2C1_Init+0x50>)
 8002150:	2200      	movs	r2, #0
 8002152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <MX_I2C1_Init+0x50>)
 8002156:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800215a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <MX_I2C1_Init+0x50>)
 800215e:	2200      	movs	r2, #0
 8002160:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <MX_I2C1_Init+0x50>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <MX_I2C1_Init+0x50>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <MX_I2C1_Init+0x50>)
 8002170:	2200      	movs	r2, #0
 8002172:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002174:	4804      	ldr	r0, [pc, #16]	; (8002188 <MX_I2C1_Init+0x50>)
 8002176:	f001 ffb7 	bl	80040e8 <HAL_I2C_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002180:	f000 fac2 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}
 8002188:	200040d0 	.word	0x200040d0
 800218c:	40005400 	.word	0x40005400
 8002190:	00061a80 	.word	0x00061a80

08002194 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <MX_I2C2_Init+0x50>)
 800219a:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <MX_I2C2_Init+0x54>)
 800219c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <MX_I2C2_Init+0x50>)
 80021a0:	4a12      	ldr	r2, [pc, #72]	; (80021ec <MX_I2C2_Init+0x58>)
 80021a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <MX_I2C2_Init+0x50>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <MX_I2C2_Init+0x50>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_I2C2_Init+0x50>)
 80021b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <MX_I2C2_Init+0x50>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <MX_I2C2_Init+0x50>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <MX_I2C2_Init+0x50>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <MX_I2C2_Init+0x50>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021d0:	4804      	ldr	r0, [pc, #16]	; (80021e4 <MX_I2C2_Init+0x50>)
 80021d2:	f001 ff89 	bl	80040e8 <HAL_I2C_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80021dc:	f000 fa94 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20004124 	.word	0x20004124
 80021e8:	40005800 	.word	0x40005800
 80021ec:	00061a80 	.word	0x00061a80

080021f0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <MX_I2C3_Init+0x50>)
 80021f6:	4a13      	ldr	r2, [pc, #76]	; (8002244 <MX_I2C3_Init+0x54>)
 80021f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <MX_I2C3_Init+0x50>)
 80021fc:	4a12      	ldr	r2, [pc, #72]	; (8002248 <MX_I2C3_Init+0x58>)
 80021fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <MX_I2C3_Init+0x50>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <MX_I2C3_Init+0x50>)
 8002208:	2200      	movs	r2, #0
 800220a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <MX_I2C3_Init+0x50>)
 800220e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002212:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <MX_I2C3_Init+0x50>)
 8002216:	2200      	movs	r2, #0
 8002218:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <MX_I2C3_Init+0x50>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <MX_I2C3_Init+0x50>)
 8002222:	2200      	movs	r2, #0
 8002224:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <MX_I2C3_Init+0x50>)
 8002228:	2200      	movs	r2, #0
 800222a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800222c:	4804      	ldr	r0, [pc, #16]	; (8002240 <MX_I2C3_Init+0x50>)
 800222e:	f001 ff5b 	bl	80040e8 <HAL_I2C_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002238:	f000 fa66 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20004178 	.word	0x20004178
 8002244:	40005c00 	.word	0x40005c00
 8002248:	000186a0 	.word	0x000186a0

0800224c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002252:	f107 0308 	add.w	r3, r7, #8
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002260:	463b      	mov	r3, r7
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <MX_TIM2_Init+0x98>)
 800226a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800226e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8002270:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <MX_TIM2_Init+0x98>)
 8002272:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002276:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <MX_TIM2_Init+0x98>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <MX_TIM2_Init+0x98>)
 8002280:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002284:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002286:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <MX_TIM2_Init+0x98>)
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <MX_TIM2_Init+0x98>)
 800228e:	2200      	movs	r2, #0
 8002290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002292:	4814      	ldr	r0, [pc, #80]	; (80022e4 <MX_TIM2_Init+0x98>)
 8002294:	f002 ffc8 	bl	8005228 <HAL_TIM_Base_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800229e:	f000 fa33 	bl	8002708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022a8:	f107 0308 	add.w	r3, r7, #8
 80022ac:	4619      	mov	r1, r3
 80022ae:	480d      	ldr	r0, [pc, #52]	; (80022e4 <MX_TIM2_Init+0x98>)
 80022b0:	f003 f864 	bl	800537c <HAL_TIM_ConfigClockSource>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80022ba:	f000 fa25 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022be:	2320      	movs	r3, #32
 80022c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022c6:	463b      	mov	r3, r7
 80022c8:	4619      	mov	r1, r3
 80022ca:	4806      	ldr	r0, [pc, #24]	; (80022e4 <MX_TIM2_Init+0x98>)
 80022cc:	f003 fa38 	bl	8005740 <HAL_TIMEx_MasterConfigSynchronization>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80022d6:	f000 fa17 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200041cc 	.word	0x200041cc

080022e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_DMA_Init+0x3c>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <MX_DMA_Init+0x3c>)
 80022f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_DMA_Init+0x3c>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	2038      	movs	r0, #56	; 0x38
 8002310:	f001 f9a5 	bl	800365e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002314:	2038      	movs	r0, #56	; 0x38
 8002316:	f001 f9be 	bl	8003696 <HAL_NVIC_EnableIRQ>

}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800

08002328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232e:	f107 0314 	add.w	r3, r7, #20
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
 800233c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b3b      	ldr	r3, [pc, #236]	; (8002430 <MX_GPIO_Init+0x108>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a3a      	ldr	r2, [pc, #232]	; (8002430 <MX_GPIO_Init+0x108>)
 8002348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b38      	ldr	r3, [pc, #224]	; (8002430 <MX_GPIO_Init+0x108>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b34      	ldr	r3, [pc, #208]	; (8002430 <MX_GPIO_Init+0x108>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a33      	ldr	r2, [pc, #204]	; (8002430 <MX_GPIO_Init+0x108>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b31      	ldr	r3, [pc, #196]	; (8002430 <MX_GPIO_Init+0x108>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <MX_GPIO_Init+0x108>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a2c      	ldr	r2, [pc, #176]	; (8002430 <MX_GPIO_Init+0x108>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <MX_GPIO_Init+0x108>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <MX_GPIO_Init+0x108>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a25      	ldr	r2, [pc, #148]	; (8002430 <MX_GPIO_Init+0x108>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b23      	ldr	r3, [pc, #140]	; (8002430 <MX_GPIO_Init+0x108>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRST_DSP_GPIO_Port, nRST_DSP_Pin, GPIO_PIN_SET);
 80023ae:	2201      	movs	r2, #1
 80023b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023b4:	481f      	ldr	r0, [pc, #124]	; (8002434 <MX_GPIO_Init+0x10c>)
 80023b6:	f001 fe7d 	bl	80040b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023c0:	481c      	ldr	r0, [pc, #112]	; (8002434 <MX_GPIO_Init+0x10c>)
 80023c2:	f001 fe77 	bl	80040b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSEL_Pin|SR_Pin|FS2_Pin|FS1_Pin, GPIO_PIN_RESET);
 80023c6:	2200      	movs	r2, #0
 80023c8:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80023cc:	481a      	ldr	r0, [pc, #104]	; (8002438 <MX_GPIO_Init+0x110>)
 80023ce:	f001 fe71 	bl	80040b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : nRST_DSP_Pin EN_SCK_Pin */
  GPIO_InitStruct.Pin = nRST_DSP_Pin|EN_SCK_Pin;
 80023d2:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80023d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80023d8:	2311      	movs	r3, #17
 80023da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023dc:	2301      	movs	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023e0:	2302      	movs	r3, #2
 80023e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4619      	mov	r1, r3
 80023ea:	4812      	ldr	r0, [pc, #72]	; (8002434 <MX_GPIO_Init+0x10c>)
 80023ec:	f001 fcde 	bl	8003dac <HAL_GPIO_Init>

  /*Configure GPIO pins : CSEL_Pin SR_Pin FS2_Pin FS1_Pin */
  GPIO_InitStruct.Pin = CSEL_Pin|SR_Pin|FS2_Pin|FS1_Pin;
 80023f0:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80023f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f6:	2301      	movs	r3, #1
 80023f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023fa:	2301      	movs	r3, #1
 80023fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023fe:	2302      	movs	r3, #2
 8002400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002402:	f107 0314 	add.w	r3, r7, #20
 8002406:	4619      	mov	r1, r3
 8002408:	480b      	ldr	r0, [pc, #44]	; (8002438 <MX_GPIO_Init+0x110>)
 800240a:	f001 fccf 	bl	8003dac <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO0_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO0_Pin|GPIO1_Pin;
 800240e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002418:	2301      	movs	r3, #1
 800241a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	4619      	mov	r1, r3
 8002422:	4806      	ldr	r0, [pc, #24]	; (800243c <MX_GPIO_Init+0x114>)
 8002424:	f001 fcc2 	bl	8003dac <HAL_GPIO_Init>

}
 8002428:	bf00      	nop
 800242a:	3728      	adds	r7, #40	; 0x28
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	40020400 	.word	0x40020400
 8002438:	40020000 	.word	0x40020000
 800243c:	40020800 	.word	0x40020800

08002440 <SIGMA_WRITE_REGISTER_BLOCK>:

/* USER CODE BEGIN 4 */
void SIGMA_WRITE_REGISTER_BLOCK(uint16_t devAddress, uint16_t address, uint16_t length, uint8_t *pData)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af04      	add	r7, sp, #16
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	4603      	mov	r3, r0
 800244a:	81fb      	strh	r3, [r7, #14]
 800244c:	460b      	mov	r3, r1
 800244e:	81bb      	strh	r3, [r7, #12]
 8002450:	4613      	mov	r3, r2
 8002452:	817b      	strh	r3, [r7, #10]
	stat = HAL_I2C_Mem_Write(&hi2c1, devAddress, address, 2, pData, length, 1000);
 8002454:	89ba      	ldrh	r2, [r7, #12]
 8002456:	89f9      	ldrh	r1, [r7, #14]
 8002458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245c:	9302      	str	r3, [sp, #8]
 800245e:	897b      	ldrh	r3, [r7, #10]
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2302      	movs	r3, #2
 8002468:	4805      	ldr	r0, [pc, #20]	; (8002480 <SIGMA_WRITE_REGISTER_BLOCK+0x40>)
 800246a:	f001 ff81 	bl	8004370 <HAL_I2C_Mem_Write>
 800246e:	4603      	mov	r3, r0
 8002470:	461a      	mov	r2, r3
 8002472:	4b04      	ldr	r3, [pc, #16]	; (8002484 <SIGMA_WRITE_REGISTER_BLOCK+0x44>)
 8002474:	701a      	strb	r2, [r3, #0]
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200040d0 	.word	0x200040d0
 8002484:	20004214 	.word	0x20004214

08002488 <SIGMA_WRITE_DELAY>:

void SIGMA_WRITE_DELAY(uint16_t devAddress, uint16_t length, uint8_t *pData)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	603a      	str	r2, [r7, #0]
 8002492:	80fb      	strh	r3, [r7, #6]
 8002494:	460b      	mov	r3, r1
 8002496:	80bb      	strh	r3, [r7, #4]
	HAL_Delay(11);
 8002498:	200b      	movs	r0, #11
 800249a:	f000 fbf9 	bl	8002c90 <HAL_Delay>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
	uint32_t j = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
	uint32_t k = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]


	for(k=VOL_ARRAY; k<ADC_POT; k++) // For volume, loud low, loud high, loud general
 80024bc:	230b      	movs	r3, #11
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e080      	b.n	80025c4 <HAL_ADC_ConvCpltCallback+0x11c>
	{
		for(i=0; i<30; i++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	e077      	b.n	80025b8 <HAL_ADC_ConvCpltCallback+0x110>
		{
			if((i == 0) && (value[k] < (linear_in_table[i+1])-15))
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d11f      	bne.n	800250e <HAL_ADC_ConvCpltCallback+0x66>
 80024ce:	4a88      	ldr	r2, [pc, #544]	; (80026f0 <HAL_ADC_ConvCpltCallback+0x248>)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	3201      	adds	r2, #1
 80024da:	4986      	ldr	r1, [pc, #536]	; (80026f4 <HAL_ADC_ConvCpltCallback+0x24c>)
 80024dc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80024e0:	3a0f      	subs	r2, #15
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d213      	bcs.n	800250e <HAL_ADC_ConvCpltCallback+0x66>
			{
				if(pote[k] != i)
 80024e6:	4a84      	ldr	r2, [pc, #528]	; (80026f8 <HAL_ADC_ConvCpltCallback+0x250>)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ee:	461a      	mov	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d05d      	beq.n	80025b2 <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	b299      	uxth	r1, r3
 80024fa:	4a7f      	ldr	r2, [pc, #508]	; (80026f8 <HAL_ADC_ConvCpltCallback+0x250>)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 8002502:	4a7e      	ldr	r2, [pc, #504]	; (80026fc <HAL_ADC_ConvCpltCallback+0x254>)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2101      	movs	r1, #1
 8002508:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[k] != i)
 800250c:	e051      	b.n	80025b2 <HAL_ADC_ConvCpltCallback+0x10a>
				}
			}
			else if((i > 0) && (i < 29 ) && (value[k] > (linear_in_table[i]+15)) && (value[k] < (linear_in_table[i+1])-15))
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d02d      	beq.n	8002570 <HAL_ADC_ConvCpltCallback+0xc8>
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b1c      	cmp	r3, #28
 8002518:	d82a      	bhi.n	8002570 <HAL_ADC_ConvCpltCallback+0xc8>
 800251a:	4a75      	ldr	r2, [pc, #468]	; (80026f0 <HAL_ADC_ConvCpltCallback+0x248>)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002522:	4974      	ldr	r1, [pc, #464]	; (80026f4 <HAL_ADC_ConvCpltCallback+0x24c>)
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800252a:	320f      	adds	r2, #15
 800252c:	4293      	cmp	r3, r2
 800252e:	d91f      	bls.n	8002570 <HAL_ADC_ConvCpltCallback+0xc8>
 8002530:	4a6f      	ldr	r2, [pc, #444]	; (80026f0 <HAL_ADC_ConvCpltCallback+0x248>)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	3201      	adds	r2, #1
 800253c:	496d      	ldr	r1, [pc, #436]	; (80026f4 <HAL_ADC_ConvCpltCallback+0x24c>)
 800253e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002542:	3a0f      	subs	r2, #15
 8002544:	4293      	cmp	r3, r2
 8002546:	d213      	bcs.n	8002570 <HAL_ADC_ConvCpltCallback+0xc8>
			{
				if(pote[k] != i)
 8002548:	4a6b      	ldr	r2, [pc, #428]	; (80026f8 <HAL_ADC_ConvCpltCallback+0x250>)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002550:	461a      	mov	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	4293      	cmp	r3, r2
 8002556:	d02c      	beq.n	80025b2 <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	b299      	uxth	r1, r3
 800255c:	4a66      	ldr	r2, [pc, #408]	; (80026f8 <HAL_ADC_ConvCpltCallback+0x250>)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 8002564:	4a65      	ldr	r2, [pc, #404]	; (80026fc <HAL_ADC_ConvCpltCallback+0x254>)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2101      	movs	r1, #1
 800256a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[k] != i)
 800256e:	e020      	b.n	80025b2 <HAL_ADC_ConvCpltCallback+0x10a>
				}
			}
			else if((i == 29) && (value[k] > (linear_in_table[i]+15)))
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b1d      	cmp	r3, #29
 8002574:	d11d      	bne.n	80025b2 <HAL_ADC_ConvCpltCallback+0x10a>
 8002576:	4a5e      	ldr	r2, [pc, #376]	; (80026f0 <HAL_ADC_ConvCpltCallback+0x248>)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257e:	495d      	ldr	r1, [pc, #372]	; (80026f4 <HAL_ADC_ConvCpltCallback+0x24c>)
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002586:	320f      	adds	r2, #15
 8002588:	4293      	cmp	r3, r2
 800258a:	d912      	bls.n	80025b2 <HAL_ADC_ConvCpltCallback+0x10a>
			{
				if(pote[k] != i)
 800258c:	4a5a      	ldr	r2, [pc, #360]	; (80026f8 <HAL_ADC_ConvCpltCallback+0x250>)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002594:	461a      	mov	r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	4293      	cmp	r3, r2
 800259a:	d00a      	beq.n	80025b2 <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	b299      	uxth	r1, r3
 80025a0:	4a55      	ldr	r2, [pc, #340]	; (80026f8 <HAL_ADC_ConvCpltCallback+0x250>)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 80025a8:	4a54      	ldr	r2, [pc, #336]	; (80026fc <HAL_ADC_ConvCpltCallback+0x254>)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2101      	movs	r1, #1
 80025ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<30; i++)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2b1d      	cmp	r3, #29
 80025bc:	d984      	bls.n	80024c8 <HAL_ADC_ConvCpltCallback+0x20>
	for(k=VOL_ARRAY; k<ADC_POT; k++) // For volume, loud low, loud high, loud general
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3301      	adds	r3, #1
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b0e      	cmp	r3, #14
 80025c8:	f67f af7b 	bls.w	80024c2 <HAL_ADC_ConvCpltCallback+0x1a>
			}
		}
	}


	for(j=0; j<(VOL_ARRAY); j++) // For filter 32Hz - 16KHz + Subwoofer
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	e080      	b.n	80026d4 <HAL_ADC_ConvCpltCallback+0x22c>
	{
		for(i=0; i<30; i++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e077      	b.n	80026c8 <HAL_ADC_ConvCpltCallback+0x220>
		{
			if((i == 0) && (value[j] < (log_in_table[i+1])-15))
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d11f      	bne.n	800261e <HAL_ADC_ConvCpltCallback+0x176>
 80025de:	4a44      	ldr	r2, [pc, #272]	; (80026f0 <HAL_ADC_ConvCpltCallback+0x248>)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	3201      	adds	r2, #1
 80025ea:	4945      	ldr	r1, [pc, #276]	; (8002700 <HAL_ADC_ConvCpltCallback+0x258>)
 80025ec:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80025f0:	3a0f      	subs	r2, #15
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d213      	bcs.n	800261e <HAL_ADC_ConvCpltCallback+0x176>
			{
				if(pote[j] != i)
 80025f6:	4a40      	ldr	r2, [pc, #256]	; (80026f8 <HAL_ADC_ConvCpltCallback+0x250>)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025fe:	461a      	mov	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	4293      	cmp	r3, r2
 8002604:	d05d      	beq.n	80026c2 <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	b299      	uxth	r1, r3
 800260a:	4a3b      	ldr	r2, [pc, #236]	; (80026f8 <HAL_ADC_ConvCpltCallback+0x250>)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 8002612:	4a3a      	ldr	r2, [pc, #232]	; (80026fc <HAL_ADC_ConvCpltCallback+0x254>)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2101      	movs	r1, #1
 8002618:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[j] != i)
 800261c:	e051      	b.n	80026c2 <HAL_ADC_ConvCpltCallback+0x21a>
				}
			}
			else if((i > 0) && (i < 29 ) && (value[j] > (log_in_table[i]+15)) && (value[j] < (log_in_table[i+1])-15))
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d02d      	beq.n	8002680 <HAL_ADC_ConvCpltCallback+0x1d8>
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b1c      	cmp	r3, #28
 8002628:	d82a      	bhi.n	8002680 <HAL_ADC_ConvCpltCallback+0x1d8>
 800262a:	4a31      	ldr	r2, [pc, #196]	; (80026f0 <HAL_ADC_ConvCpltCallback+0x248>)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002632:	4933      	ldr	r1, [pc, #204]	; (8002700 <HAL_ADC_ConvCpltCallback+0x258>)
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800263a:	320f      	adds	r2, #15
 800263c:	4293      	cmp	r3, r2
 800263e:	d91f      	bls.n	8002680 <HAL_ADC_ConvCpltCallback+0x1d8>
 8002640:	4a2b      	ldr	r2, [pc, #172]	; (80026f0 <HAL_ADC_ConvCpltCallback+0x248>)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	3201      	adds	r2, #1
 800264c:	492c      	ldr	r1, [pc, #176]	; (8002700 <HAL_ADC_ConvCpltCallback+0x258>)
 800264e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002652:	3a0f      	subs	r2, #15
 8002654:	4293      	cmp	r3, r2
 8002656:	d213      	bcs.n	8002680 <HAL_ADC_ConvCpltCallback+0x1d8>
			{
				if(pote[j] != i)
 8002658:	4a27      	ldr	r2, [pc, #156]	; (80026f8 <HAL_ADC_ConvCpltCallback+0x250>)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002660:	461a      	mov	r2, r3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	4293      	cmp	r3, r2
 8002666:	d02c      	beq.n	80026c2 <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	b299      	uxth	r1, r3
 800266c:	4a22      	ldr	r2, [pc, #136]	; (80026f8 <HAL_ADC_ConvCpltCallback+0x250>)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 8002674:	4a21      	ldr	r2, [pc, #132]	; (80026fc <HAL_ADC_ConvCpltCallback+0x254>)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2101      	movs	r1, #1
 800267a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[j] != i)
 800267e:	e020      	b.n	80026c2 <HAL_ADC_ConvCpltCallback+0x21a>
				}
			}
			else if((i == 29) && (value[j] > (log_in_table[i]+15)))
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b1d      	cmp	r3, #29
 8002684:	d11d      	bne.n	80026c2 <HAL_ADC_ConvCpltCallback+0x21a>
 8002686:	4a1a      	ldr	r2, [pc, #104]	; (80026f0 <HAL_ADC_ConvCpltCallback+0x248>)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268e:	491c      	ldr	r1, [pc, #112]	; (8002700 <HAL_ADC_ConvCpltCallback+0x258>)
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002696:	320f      	adds	r2, #15
 8002698:	4293      	cmp	r3, r2
 800269a:	d912      	bls.n	80026c2 <HAL_ADC_ConvCpltCallback+0x21a>
			{
				if(pote[j] != i)
 800269c:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <HAL_ADC_ConvCpltCallback+0x250>)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026a4:	461a      	mov	r2, r3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00a      	beq.n	80026c2 <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	b299      	uxth	r1, r3
 80026b0:	4a11      	ldr	r2, [pc, #68]	; (80026f8 <HAL_ADC_ConvCpltCallback+0x250>)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 80026b8:	4a10      	ldr	r2, [pc, #64]	; (80026fc <HAL_ADC_ConvCpltCallback+0x254>)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2101      	movs	r1, #1
 80026be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<30; i++)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3301      	adds	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b1d      	cmp	r3, #29
 80026cc:	d984      	bls.n	80025d8 <HAL_ADC_ConvCpltCallback+0x130>
	for(j=0; j<(VOL_ARRAY); j++) // For filter 32Hz - 16KHz + Subwoofer
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	3301      	adds	r3, #1
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	2b0a      	cmp	r3, #10
 80026d8:	f67f af7b 	bls.w	80025d2 <HAL_ADC_ConvCpltCallback+0x12a>
				}
			}
		}

	}
	HAL_ADC_Start_DMA(&hadc1, value, ADC_POT);
 80026dc:	220f      	movs	r2, #15
 80026de:	4904      	ldr	r1, [pc, #16]	; (80026f0 <HAL_ADC_ConvCpltCallback+0x248>)
 80026e0:	4808      	ldr	r0, [pc, #32]	; (8002704 <HAL_ADC_ConvCpltCallback+0x25c>)
 80026e2:	f000 fb3d 	bl	8002d60 <HAL_ADC_Start_DMA>
}
 80026e6:	bf00      	nop
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2000421c 	.word	0x2000421c
 80026f4:	200042b4 	.word	0x200042b4
 80026f8:	20004258 	.word	0x20004258
 80026fc:	200042f0 	.word	0x200042f0
 8002700:	20004278 	.word	0x20004278
 8002704:	20004028 	.word	0x20004028

08002708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800270c:	b672      	cpsid	i
}
 800270e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002710:	e7fe      	b.n	8002710 <Error_Handler+0x8>
	...

08002714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <HAL_MspInit+0x4c>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	4a0f      	ldr	r2, [pc, #60]	; (8002760 <HAL_MspInit+0x4c>)
 8002724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002728:	6453      	str	r3, [r2, #68]	; 0x44
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <HAL_MspInit+0x4c>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_MspInit+0x4c>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a08      	ldr	r2, [pc, #32]	; (8002760 <HAL_MspInit+0x4c>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_MspInit+0x4c>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800

08002764 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08c      	sub	sp, #48	; 0x30
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 031c 	add.w	r3, r7, #28
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a49      	ldr	r2, [pc, #292]	; (80028a8 <HAL_ADC_MspInit+0x144>)
 8002782:	4293      	cmp	r3, r2
 8002784:	f040 808c 	bne.w	80028a0 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002788:	2300      	movs	r3, #0
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	4b47      	ldr	r3, [pc, #284]	; (80028ac <HAL_ADC_MspInit+0x148>)
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	4a46      	ldr	r2, [pc, #280]	; (80028ac <HAL_ADC_MspInit+0x148>)
 8002792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002796:	6453      	str	r3, [r2, #68]	; 0x44
 8002798:	4b44      	ldr	r3, [pc, #272]	; (80028ac <HAL_ADC_MspInit+0x148>)
 800279a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	4b40      	ldr	r3, [pc, #256]	; (80028ac <HAL_ADC_MspInit+0x148>)
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	4a3f      	ldr	r2, [pc, #252]	; (80028ac <HAL_ADC_MspInit+0x148>)
 80027ae:	f043 0304 	orr.w	r3, r3, #4
 80027b2:	6313      	str	r3, [r2, #48]	; 0x30
 80027b4:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <HAL_ADC_MspInit+0x148>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	4b39      	ldr	r3, [pc, #228]	; (80028ac <HAL_ADC_MspInit+0x148>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	4a38      	ldr	r2, [pc, #224]	; (80028ac <HAL_ADC_MspInit+0x148>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6313      	str	r3, [r2, #48]	; 0x30
 80027d0:	4b36      	ldr	r3, [pc, #216]	; (80028ac <HAL_ADC_MspInit+0x148>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	4b32      	ldr	r3, [pc, #200]	; (80028ac <HAL_ADC_MspInit+0x148>)
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	4a31      	ldr	r2, [pc, #196]	; (80028ac <HAL_ADC_MspInit+0x148>)
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	6313      	str	r3, [r2, #48]	; 0x30
 80027ec:	4b2f      	ldr	r3, [pc, #188]	; (80028ac <HAL_ADC_MspInit+0x148>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80027f8:	231f      	movs	r3, #31
 80027fa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027fc:	2303      	movs	r3, #3
 80027fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	4619      	mov	r1, r3
 800280a:	4829      	ldr	r0, [pc, #164]	; (80028b0 <HAL_ADC_MspInit+0x14c>)
 800280c:	f001 face 	bl	8003dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002810:	23ff      	movs	r3, #255	; 0xff
 8002812:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002814:	2303      	movs	r3, #3
 8002816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281c:	f107 031c 	add.w	r3, r7, #28
 8002820:	4619      	mov	r1, r3
 8002822:	4824      	ldr	r0, [pc, #144]	; (80028b4 <HAL_ADC_MspInit+0x150>)
 8002824:	f001 fac2 	bl	8003dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002828:	2303      	movs	r3, #3
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800282c:	2303      	movs	r3, #3
 800282e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	f107 031c 	add.w	r3, r7, #28
 8002838:	4619      	mov	r1, r3
 800283a:	481f      	ldr	r0, [pc, #124]	; (80028b8 <HAL_ADC_MspInit+0x154>)
 800283c:	f001 fab6 	bl	8003dac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002840:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <HAL_ADC_MspInit+0x158>)
 8002842:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <HAL_ADC_MspInit+0x15c>)
 8002844:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002846:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <HAL_ADC_MspInit+0x158>)
 8002848:	2200      	movs	r2, #0
 800284a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_ADC_MspInit+0x158>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002852:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <HAL_ADC_MspInit+0x158>)
 8002854:	2200      	movs	r2, #0
 8002856:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002858:	4b18      	ldr	r3, [pc, #96]	; (80028bc <HAL_ADC_MspInit+0x158>)
 800285a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800285e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002860:	4b16      	ldr	r3, [pc, #88]	; (80028bc <HAL_ADC_MspInit+0x158>)
 8002862:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002866:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002868:	4b14      	ldr	r3, [pc, #80]	; (80028bc <HAL_ADC_MspInit+0x158>)
 800286a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800286e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_ADC_MspInit+0x158>)
 8002872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002876:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002878:	4b10      	ldr	r3, [pc, #64]	; (80028bc <HAL_ADC_MspInit+0x158>)
 800287a:	2200      	movs	r2, #0
 800287c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800287e:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <HAL_ADC_MspInit+0x158>)
 8002880:	2200      	movs	r2, #0
 8002882:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002884:	480d      	ldr	r0, [pc, #52]	; (80028bc <HAL_ADC_MspInit+0x158>)
 8002886:	f000 ff21 	bl	80036cc <HAL_DMA_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002890:	f7ff ff3a 	bl	8002708 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <HAL_ADC_MspInit+0x158>)
 8002898:	639a      	str	r2, [r3, #56]	; 0x38
 800289a:	4a08      	ldr	r2, [pc, #32]	; (80028bc <HAL_ADC_MspInit+0x158>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028a0:	bf00      	nop
 80028a2:	3730      	adds	r7, #48	; 0x30
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40012000 	.word	0x40012000
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40020800 	.word	0x40020800
 80028b4:	40020000 	.word	0x40020000
 80028b8:	40020400 	.word	0x40020400
 80028bc:	20004070 	.word	0x20004070
 80028c0:	40026410 	.word	0x40026410

080028c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08e      	sub	sp, #56	; 0x38
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a63      	ldr	r2, [pc, #396]	; (8002a70 <HAL_I2C_MspInit+0x1ac>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d12c      	bne.n	8002940 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
 80028ea:	4b62      	ldr	r3, [pc, #392]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	4a61      	ldr	r2, [pc, #388]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 80028f0:	f043 0302 	orr.w	r3, r3, #2
 80028f4:	6313      	str	r3, [r2, #48]	; 0x30
 80028f6:	4b5f      	ldr	r3, [pc, #380]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	623b      	str	r3, [r7, #32]
 8002900:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002902:	23c0      	movs	r3, #192	; 0xc0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002906:	2312      	movs	r3, #18
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290e:	2303      	movs	r3, #3
 8002910:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002912:	2304      	movs	r3, #4
 8002914:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800291a:	4619      	mov	r1, r3
 800291c:	4856      	ldr	r0, [pc, #344]	; (8002a78 <HAL_I2C_MspInit+0x1b4>)
 800291e:	f001 fa45 	bl	8003dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a52      	ldr	r2, [pc, #328]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 800292c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b50      	ldr	r3, [pc, #320]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800293a:	61fb      	str	r3, [r7, #28]
 800293c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800293e:	e093      	b.n	8002a68 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a4d      	ldr	r2, [pc, #308]	; (8002a7c <HAL_I2C_MspInit+0x1b8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d13d      	bne.n	80029c6 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	4b49      	ldr	r3, [pc, #292]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a48      	ldr	r2, [pc, #288]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b46      	ldr	r3, [pc, #280]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800296c:	2312      	movs	r3, #18
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002974:	2303      	movs	r3, #3
 8002976:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002978:	2304      	movs	r3, #4
 800297a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002980:	4619      	mov	r1, r3
 8002982:	483d      	ldr	r0, [pc, #244]	; (8002a78 <HAL_I2C_MspInit+0x1b4>)
 8002984:	f001 fa12 	bl	8003dac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002988:	2308      	movs	r3, #8
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298c:	2312      	movs	r3, #18
 800298e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002994:	2303      	movs	r3, #3
 8002996:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002998:	2309      	movs	r3, #9
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a0:	4619      	mov	r1, r3
 80029a2:	4835      	ldr	r0, [pc, #212]	; (8002a78 <HAL_I2C_MspInit+0x1b4>)
 80029a4:	f001 fa02 	bl	8003dac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	4b31      	ldr	r3, [pc, #196]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	4a30      	ldr	r2, [pc, #192]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 80029b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029b6:	6413      	str	r3, [r2, #64]	; 0x40
 80029b8:	4b2e      	ldr	r3, [pc, #184]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	697b      	ldr	r3, [r7, #20]
}
 80029c4:	e050      	b.n	8002a68 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a2d      	ldr	r2, [pc, #180]	; (8002a80 <HAL_I2C_MspInit+0x1bc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d14b      	bne.n	8002a68 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	4a26      	ldr	r2, [pc, #152]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	6313      	str	r3, [r2, #48]	; 0x30
 80029e0:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	4a1f      	ldr	r2, [pc, #124]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6313      	str	r3, [r2, #48]	; 0x30
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a0e:	2312      	movs	r3, #18
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a22:	4619      	mov	r1, r3
 8002a24:	4817      	ldr	r0, [pc, #92]	; (8002a84 <HAL_I2C_MspInit+0x1c0>)
 8002a26:	f001 f9c1 	bl	8003dac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a30:	2312      	movs	r3, #18
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a44:	4619      	mov	r1, r3
 8002a46:	4810      	ldr	r0, [pc, #64]	; (8002a88 <HAL_I2C_MspInit+0x1c4>)
 8002a48:	f001 f9b0 	bl	8003dac <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 8002a56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_I2C_MspInit+0x1b0>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
}
 8002a68:	bf00      	nop
 8002a6a:	3738      	adds	r7, #56	; 0x38
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40005400 	.word	0x40005400
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	40005800 	.word	0x40005800
 8002a80:	40005c00 	.word	0x40005c00
 8002a84:	40020800 	.word	0x40020800
 8002a88:	40020000 	.word	0x40020000

08002a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9c:	d10d      	bne.n	8002aba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <HAL_TIM_Base_MspInit+0x3c>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	4a08      	ldr	r2, [pc, #32]	; (8002ac8 <HAL_TIM_Base_MspInit+0x3c>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6413      	str	r3, [r2, #64]	; 0x40
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_TIM_Base_MspInit+0x3c>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800

08002acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ad0:	e7fe      	b.n	8002ad0 <NMI_Handler+0x4>

08002ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ad6:	e7fe      	b.n	8002ad6 <HardFault_Handler+0x4>

08002ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002adc:	e7fe      	b.n	8002adc <MemManage_Handler+0x4>

08002ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae2:	e7fe      	b.n	8002ae2 <BusFault_Handler+0x4>

08002ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae8:	e7fe      	b.n	8002ae8 <UsageFault_Handler+0x4>

08002aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b18:	f000 f89a 	bl	8002c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <DMA2_Stream0_IRQHandler+0x10>)
 8002b26:	f000 fed7 	bl	80038d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20004070 	.word	0x20004070

08002b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <SystemInit+0x20>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <SystemInit+0x20>)
 8002b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b5c:	480d      	ldr	r0, [pc, #52]	; (8002b94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b5e:	490e      	ldr	r1, [pc, #56]	; (8002b98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b60:	4a0e      	ldr	r2, [pc, #56]	; (8002b9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b64:	e002      	b.n	8002b6c <LoopCopyDataInit>

08002b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b6a:	3304      	adds	r3, #4

08002b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b70:	d3f9      	bcc.n	8002b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b72:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b74:	4c0b      	ldr	r4, [pc, #44]	; (8002ba4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b78:	e001      	b.n	8002b7e <LoopFillZerobss>

08002b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b7c:	3204      	adds	r2, #4

08002b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b80:	d3fb      	bcc.n	8002b7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b82:	f7ff ffd7 	bl	8002b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b86:	f002 fe57 	bl	8005838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b8a:	f7fe fb79 	bl	8001280 <main>
  bx  lr    
 8002b8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b98:	20003fe8 	.word	0x20003fe8
  ldr r2, =_sidata
 8002b9c:	08005de8 	.word	0x08005de8
  ldr r2, =_sbss
 8002ba0:	20003fe8 	.word	0x20003fe8
  ldr r4, =_ebss
 8002ba4:	20004450 	.word	0x20004450

08002ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ba8:	e7fe      	b.n	8002ba8 <ADC_IRQHandler>
	...

08002bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bb0:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <HAL_Init+0x40>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <HAL_Init+0x40>)
 8002bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_Init+0x40>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <HAL_Init+0x40>)
 8002bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bc8:	4b08      	ldr	r3, [pc, #32]	; (8002bec <HAL_Init+0x40>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a07      	ldr	r2, [pc, #28]	; (8002bec <HAL_Init+0x40>)
 8002bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd4:	2003      	movs	r0, #3
 8002bd6:	f000 fd37 	bl	8003648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bda:	200f      	movs	r0, #15
 8002bdc:	f000 f808 	bl	8002bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002be0:	f7ff fd98 	bl	8002714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40023c00 	.word	0x40023c00

08002bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <HAL_InitTick+0x54>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_InitTick+0x58>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	4619      	mov	r1, r3
 8002c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fd4f 	bl	80036b2 <HAL_SYSTICK_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00e      	b.n	8002c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b0f      	cmp	r3, #15
 8002c22:	d80a      	bhi.n	8002c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c24:	2200      	movs	r2, #0
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2c:	f000 fd17 	bl	800365e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c30:	4a06      	ldr	r2, [pc, #24]	; (8002c4c <HAL_InitTick+0x5c>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e000      	b.n	8002c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20003f8c 	.word	0x20003f8c
 8002c48:	20003f94 	.word	0x20003f94
 8002c4c:	20003f90 	.word	0x20003f90

08002c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_IncTick+0x20>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_IncTick+0x24>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4413      	add	r3, r2
 8002c60:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <HAL_IncTick+0x24>)
 8002c62:	6013      	str	r3, [r2, #0]
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20003f94 	.word	0x20003f94
 8002c74:	20004314 	.word	0x20004314

08002c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <HAL_GetTick+0x14>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20004314 	.word	0x20004314

08002c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c98:	f7ff ffee 	bl	8002c78 <HAL_GetTick>
 8002c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca8:	d005      	beq.n	8002cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_Delay+0x44>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cb6:	bf00      	nop
 8002cb8:	f7ff ffde 	bl	8002c78 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d8f7      	bhi.n	8002cb8 <HAL_Delay+0x28>
  {
  }
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20003f94 	.word	0x20003f94

08002cd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e033      	b.n	8002d56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff fd34 	bl	8002764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d118      	bne.n	8002d48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d1e:	f023 0302 	bic.w	r3, r3, #2
 8002d22:	f043 0202 	orr.w	r2, r3, #2
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fa3e 	bl	80031ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f023 0303 	bic.w	r3, r3, #3
 8002d3e:	f043 0201 	orr.w	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40
 8002d46:	e001      	b.n	8002d4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_Start_DMA+0x1e>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e0ce      	b.n	8002f1c <HAL_ADC_Start_DMA+0x1bc>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d018      	beq.n	8002dc6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002da4:	4b5f      	ldr	r3, [pc, #380]	; (8002f24 <HAL_ADC_Start_DMA+0x1c4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a5f      	ldr	r2, [pc, #380]	; (8002f28 <HAL_ADC_Start_DMA+0x1c8>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	0c9a      	lsrs	r2, r3, #18
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002db8:	e002      	b.n	8002dc0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f9      	bne.n	8002dba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd4:	d107      	bne.n	8002de6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002de4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	f040 8086 	bne.w	8002f02 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d007      	beq.n	8002e28 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e34:	d106      	bne.n	8002e44 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	f023 0206 	bic.w	r2, r3, #6
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
 8002e42:	e002      	b.n	8002e4a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e52:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <HAL_ADC_Start_DMA+0x1cc>)
 8002e54:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	4a35      	ldr	r2, [pc, #212]	; (8002f30 <HAL_ADC_Start_DMA+0x1d0>)
 8002e5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	4a34      	ldr	r2, [pc, #208]	; (8002f34 <HAL_ADC_Start_DMA+0x1d4>)
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6a:	4a33      	ldr	r2, [pc, #204]	; (8002f38 <HAL_ADC_Start_DMA+0x1d8>)
 8002e6c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e76:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002e86:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e96:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	334c      	adds	r3, #76	; 0x4c
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f000 fcbe 	bl	8003828 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10f      	bne.n	8002ed8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d129      	bne.n	8002f1a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	e020      	b.n	8002f1a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <HAL_ADC_Start_DMA+0x1dc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d11b      	bne.n	8002f1a <HAL_ADC_Start_DMA+0x1ba>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d114      	bne.n	8002f1a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	e00b      	b.n	8002f1a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f043 0210 	orr.w	r2, r3, #16
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f043 0201 	orr.w	r2, r3, #1
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20003f8c 	.word	0x20003f8c
 8002f28:	431bde83 	.word	0x431bde83
 8002f2c:	40012300 	.word	0x40012300
 8002f30:	080033a5 	.word	0x080033a5
 8002f34:	0800345f 	.word	0x0800345f
 8002f38:	0800347b 	.word	0x0800347b
 8002f3c:	40012000 	.word	0x40012000

08002f40 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1c>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e105      	b.n	8003190 <HAL_ADC_ConfigChannel+0x228>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b09      	cmp	r3, #9
 8002f92:	d925      	bls.n	8002fe0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68d9      	ldr	r1, [r3, #12]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3b1e      	subs	r3, #30
 8002faa:	2207      	movs	r2, #7
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43da      	mvns	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68d9      	ldr	r1, [r3, #12]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	4618      	mov	r0, r3
 8002fcc:	4603      	mov	r3, r0
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4403      	add	r3, r0
 8002fd2:	3b1e      	subs	r3, #30
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	e022      	b.n	8003026 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6919      	ldr	r1, [r3, #16]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	2207      	movs	r2, #7
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	400a      	ands	r2, r1
 8003002:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6919      	ldr	r1, [r3, #16]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	b29b      	uxth	r3, r3
 8003014:	4618      	mov	r0, r3
 8003016:	4603      	mov	r3, r0
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4403      	add	r3, r0
 800301c:	409a      	lsls	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b06      	cmp	r3, #6
 800302c:	d824      	bhi.n	8003078 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	3b05      	subs	r3, #5
 8003040:	221f      	movs	r2, #31
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43da      	mvns	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	400a      	ands	r2, r1
 800304e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	b29b      	uxth	r3, r3
 800305c:	4618      	mov	r0, r3
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	3b05      	subs	r3, #5
 800306a:	fa00 f203 	lsl.w	r2, r0, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	635a      	str	r2, [r3, #52]	; 0x34
 8003076:	e04c      	b.n	8003112 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b0c      	cmp	r3, #12
 800307e:	d824      	bhi.n	80030ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	3b23      	subs	r3, #35	; 0x23
 8003092:	221f      	movs	r2, #31
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43da      	mvns	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	400a      	ands	r2, r1
 80030a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	4618      	mov	r0, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	3b23      	subs	r3, #35	; 0x23
 80030bc:	fa00 f203 	lsl.w	r2, r0, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
 80030c8:	e023      	b.n	8003112 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	3b41      	subs	r3, #65	; 0x41
 80030dc:	221f      	movs	r2, #31
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43da      	mvns	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	400a      	ands	r2, r1
 80030ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	4618      	mov	r0, r3
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	3b41      	subs	r3, #65	; 0x41
 8003106:	fa00 f203 	lsl.w	r2, r0, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003112:	4b22      	ldr	r3, [pc, #136]	; (800319c <HAL_ADC_ConfigChannel+0x234>)
 8003114:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a21      	ldr	r2, [pc, #132]	; (80031a0 <HAL_ADC_ConfigChannel+0x238>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d109      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x1cc>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b12      	cmp	r3, #18
 8003126:	d105      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a19      	ldr	r2, [pc, #100]	; (80031a0 <HAL_ADC_ConfigChannel+0x238>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d123      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x21e>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b10      	cmp	r3, #16
 8003144:	d003      	beq.n	800314e <HAL_ADC_ConfigChannel+0x1e6>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b11      	cmp	r3, #17
 800314c:	d11b      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b10      	cmp	r3, #16
 8003160:	d111      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_ADC_ConfigChannel+0x23c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a10      	ldr	r2, [pc, #64]	; (80031a8 <HAL_ADC_ConfigChannel+0x240>)
 8003168:	fba2 2303 	umull	r2, r3, r2, r3
 800316c:	0c9a      	lsrs	r2, r3, #18
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003178:	e002      	b.n	8003180 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	3b01      	subs	r3, #1
 800317e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f9      	bne.n	800317a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	40012300 	.word	0x40012300
 80031a0:	40012000 	.word	0x40012000
 80031a4:	20003f8c 	.word	0x20003f8c
 80031a8:	431bde83 	.word	0x431bde83

080031ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031b4:	4b79      	ldr	r3, [pc, #484]	; (800339c <ADC_Init+0x1f0>)
 80031b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	021a      	lsls	r2, r3, #8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003204:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003226:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6899      	ldr	r1, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	4a58      	ldr	r2, [pc, #352]	; (80033a0 <ADC_Init+0x1f4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d022      	beq.n	800328a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003252:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6899      	ldr	r1, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003274:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6899      	ldr	r1, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	e00f      	b.n	80032aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003298:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0202 	bic.w	r2, r2, #2
 80032b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6899      	ldr	r1, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	7e1b      	ldrb	r3, [r3, #24]
 80032c4:	005a      	lsls	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01b      	beq.n	8003310 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	3b01      	subs	r3, #1
 8003304:	035a      	lsls	r2, r3, #13
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	e007      	b.n	8003320 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800331e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	3b01      	subs	r3, #1
 800333c:	051a      	lsls	r2, r3, #20
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003354:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6899      	ldr	r1, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003362:	025a      	lsls	r2, r3, #9
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6899      	ldr	r1, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	029a      	lsls	r2, r3, #10
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	609a      	str	r2, [r3, #8]
}
 8003390:	bf00      	nop
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	40012300 	.word	0x40012300
 80033a0:	0f000001 	.word	0x0f000001

080033a4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d13c      	bne.n	8003438 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d12b      	bne.n	8003430 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d127      	bne.n	8003430 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d006      	beq.n	80033fc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d119      	bne.n	8003430 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0220 	bic.w	r2, r2, #32
 800340a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d105      	bne.n	8003430 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	f043 0201 	orr.w	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff f839 	bl	80024a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003436:	e00e      	b.n	8003456 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7ff fd85 	bl	8002f54 <HAL_ADC_ErrorCallback>
}
 800344a:	e004      	b.n	8003456 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
}
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f7ff fd67 	bl	8002f40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2240      	movs	r2, #64	; 0x40
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f043 0204 	orr.w	r2, r3, #4
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f7ff fd5a 	bl	8002f54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034a0:	bf00      	nop
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <__NVIC_SetPriorityGrouping+0x44>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034c4:	4013      	ands	r3, r2
 80034c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034da:	4a04      	ldr	r2, [pc, #16]	; (80034ec <__NVIC_SetPriorityGrouping+0x44>)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	60d3      	str	r3, [r2, #12]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <__NVIC_GetPriorityGrouping+0x18>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	f003 0307 	and.w	r3, r3, #7
}
 80034fe:	4618      	mov	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	2b00      	cmp	r3, #0
 800351c:	db0b      	blt.n	8003536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	4907      	ldr	r1, [pc, #28]	; (8003544 <__NVIC_EnableIRQ+0x38>)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	2001      	movs	r0, #1
 800352e:	fa00 f202 	lsl.w	r2, r0, r2
 8003532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000e100 	.word	0xe000e100

08003548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	6039      	str	r1, [r7, #0]
 8003552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003558:	2b00      	cmp	r3, #0
 800355a:	db0a      	blt.n	8003572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	b2da      	uxtb	r2, r3
 8003560:	490c      	ldr	r1, [pc, #48]	; (8003594 <__NVIC_SetPriority+0x4c>)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	0112      	lsls	r2, r2, #4
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	440b      	add	r3, r1
 800356c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003570:	e00a      	b.n	8003588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	4908      	ldr	r1, [pc, #32]	; (8003598 <__NVIC_SetPriority+0x50>)
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	3b04      	subs	r3, #4
 8003580:	0112      	lsls	r2, r2, #4
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	440b      	add	r3, r1
 8003586:	761a      	strb	r2, [r3, #24]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000e100 	.word	0xe000e100
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	; 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f1c3 0307 	rsb	r3, r3, #7
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	bf28      	it	cs
 80035ba:	2304      	movcs	r3, #4
 80035bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3304      	adds	r3, #4
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d902      	bls.n	80035cc <NVIC_EncodePriority+0x30>
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3b03      	subs	r3, #3
 80035ca:	e000      	b.n	80035ce <NVIC_EncodePriority+0x32>
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43da      	mvns	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	401a      	ands	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e4:	f04f 31ff 	mov.w	r1, #4294967295
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	43d9      	mvns	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f4:	4313      	orrs	r3, r2
         );
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3724      	adds	r7, #36	; 0x24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
	...

08003604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003614:	d301      	bcc.n	800361a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003616:	2301      	movs	r3, #1
 8003618:	e00f      	b.n	800363a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800361a:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <SysTick_Config+0x40>)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003622:	210f      	movs	r1, #15
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	f7ff ff8e 	bl	8003548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <SysTick_Config+0x40>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003632:	4b04      	ldr	r3, [pc, #16]	; (8003644 <SysTick_Config+0x40>)
 8003634:	2207      	movs	r2, #7
 8003636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	e000e010 	.word	0xe000e010

08003648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ff29 	bl	80034a8 <__NVIC_SetPriorityGrouping>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
 800366a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003670:	f7ff ff3e 	bl	80034f0 <__NVIC_GetPriorityGrouping>
 8003674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	6978      	ldr	r0, [r7, #20]
 800367c:	f7ff ff8e 	bl	800359c <NVIC_EncodePriority>
 8003680:	4602      	mov	r2, r0
 8003682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff ff5d 	bl	8003548 <__NVIC_SetPriority>
}
 800368e:	bf00      	nop
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	4603      	mov	r3, r0
 800369e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff ff31 	bl	800350c <__NVIC_EnableIRQ>
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff ffa2 	bl	8003604 <SysTick_Config>
 80036c0:	4603      	mov	r3, r0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036d8:	f7ff face 	bl	8002c78 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e099      	b.n	800381c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0201 	bic.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003708:	e00f      	b.n	800372a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800370a:	f7ff fab5 	bl	8002c78 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b05      	cmp	r3, #5
 8003716:	d908      	bls.n	800372a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2203      	movs	r2, #3
 8003722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e078      	b.n	800381c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e8      	bne.n	800370a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4b38      	ldr	r3, [pc, #224]	; (8003824 <HAL_DMA_Init+0x158>)
 8003744:	4013      	ands	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003756:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	2b04      	cmp	r3, #4
 8003782:	d107      	bne.n	8003794 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	4313      	orrs	r3, r2
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f023 0307 	bic.w	r3, r3, #7
 80037aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d117      	bne.n	80037ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00e      	beq.n	80037ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fa6f 	bl	8003cb4 <DMA_CheckFifoParam>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2240      	movs	r2, #64	; 0x40
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037ea:	2301      	movs	r3, #1
 80037ec:	e016      	b.n	800381c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fa26 	bl	8003c48 <DMA_CalcBaseAndBitshift>
 80037fc:	4603      	mov	r3, r0
 80037fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003804:	223f      	movs	r2, #63	; 0x3f
 8003806:	409a      	lsls	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	f010803f 	.word	0xf010803f

08003828 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_DMA_Start_IT+0x26>
 800384a:	2302      	movs	r3, #2
 800384c:	e040      	b.n	80038d0 <HAL_DMA_Start_IT+0xa8>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b01      	cmp	r3, #1
 8003860:	d12f      	bne.n	80038c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2202      	movs	r2, #2
 8003866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68b9      	ldr	r1, [r7, #8]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f9b8 	bl	8003bec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	223f      	movs	r2, #63	; 0x3f
 8003882:	409a      	lsls	r2, r3
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0216 	orr.w	r2, r2, #22
 8003896:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	2b00      	cmp	r3, #0
 800389e:	d007      	beq.n	80038b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0208 	orr.w	r2, r2, #8
 80038ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	e005      	b.n	80038ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
 80038cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038e4:	4b8e      	ldr	r3, [pc, #568]	; (8003b20 <HAL_DMA_IRQHandler+0x248>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a8e      	ldr	r2, [pc, #568]	; (8003b24 <HAL_DMA_IRQHandler+0x24c>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	0a9b      	lsrs	r3, r3, #10
 80038f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003902:	2208      	movs	r2, #8
 8003904:	409a      	lsls	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01a      	beq.n	8003944 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d013      	beq.n	8003944 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0204 	bic.w	r2, r2, #4
 800392a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	2208      	movs	r2, #8
 8003932:	409a      	lsls	r2, r3
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f043 0201 	orr.w	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	2201      	movs	r2, #1
 800394a:	409a      	lsls	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d012      	beq.n	800397a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003966:	2201      	movs	r2, #1
 8003968:	409a      	lsls	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003972:	f043 0202 	orr.w	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397e:	2204      	movs	r2, #4
 8003980:	409a      	lsls	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d012      	beq.n	80039b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00b      	beq.n	80039b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	2204      	movs	r2, #4
 800399e:	409a      	lsls	r2, r3
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	f043 0204 	orr.w	r2, r3, #4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	2210      	movs	r2, #16
 80039b6:	409a      	lsls	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d043      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d03c      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	2210      	movs	r2, #16
 80039d4:	409a      	lsls	r2, r3
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d018      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d108      	bne.n	8003a08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d024      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	4798      	blx	r3
 8003a06:	e01f      	b.n	8003a48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01b      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4798      	blx	r3
 8003a18:	e016      	b.n	8003a48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d107      	bne.n	8003a38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0208 	bic.w	r2, r2, #8
 8003a36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 808f 	beq.w	8003b78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8087 	beq.w	8003b78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	2220      	movs	r2, #32
 8003a70:	409a      	lsls	r2, r3
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d136      	bne.n	8003af0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0216 	bic.w	r2, r2, #22
 8003a90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695a      	ldr	r2, [r3, #20]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aa0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d103      	bne.n	8003ab2 <HAL_DMA_IRQHandler+0x1da>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0208 	bic.w	r2, r2, #8
 8003ac0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac6:	223f      	movs	r2, #63	; 0x3f
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d07e      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
        }
        return;
 8003aee:	e079      	b.n	8003be4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01d      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10d      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d031      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
 8003b1c:	e02c      	b.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
 8003b1e:	bf00      	nop
 8003b20:	20003f8c 	.word	0x20003f8c
 8003b24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d023      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
 8003b38:	e01e      	b.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10f      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0210 	bic.w	r2, r2, #16
 8003b56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d032      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d022      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2205      	movs	r2, #5
 8003b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d307      	bcc.n	8003bc0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f2      	bne.n	8003ba4 <HAL_DMA_IRQHandler+0x2cc>
 8003bbe:	e000      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003bc0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
 8003be2:	e000      	b.n	8003be6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003be4:	bf00      	nop
    }
  }
}
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b40      	cmp	r3, #64	; 0x40
 8003c18:	d108      	bne.n	8003c2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c2a:	e007      	b.n	8003c3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	60da      	str	r2, [r3, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	3b10      	subs	r3, #16
 8003c58:	4a14      	ldr	r2, [pc, #80]	; (8003cac <DMA_CalcBaseAndBitshift+0x64>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c62:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <DMA_CalcBaseAndBitshift+0x68>)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d909      	bls.n	8003c8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	1d1a      	adds	r2, r3, #4
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	659a      	str	r2, [r3, #88]	; 0x58
 8003c88:	e007      	b.n	8003c9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	aaaaaaab 	.word	0xaaaaaaab
 8003cb0:	08005dcc 	.word	0x08005dcc

08003cb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d11f      	bne.n	8003d0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d856      	bhi.n	8003d82 <DMA_CheckFifoParam+0xce>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <DMA_CheckFifoParam+0x28>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003cff 	.word	0x08003cff
 8003ce4:	08003ced 	.word	0x08003ced
 8003ce8:	08003d83 	.word	0x08003d83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d046      	beq.n	8003d86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cfc:	e043      	b.n	8003d86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d06:	d140      	bne.n	8003d8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d0c:	e03d      	b.n	8003d8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d16:	d121      	bne.n	8003d5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d837      	bhi.n	8003d8e <DMA_CheckFifoParam+0xda>
 8003d1e:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <DMA_CheckFifoParam+0x70>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d35 	.word	0x08003d35
 8003d28:	08003d3b 	.word	0x08003d3b
 8003d2c:	08003d35 	.word	0x08003d35
 8003d30:	08003d4d 	.word	0x08003d4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
      break;
 8003d38:	e030      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d025      	beq.n	8003d92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d4a:	e022      	b.n	8003d92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d54:	d11f      	bne.n	8003d96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d5a:	e01c      	b.n	8003d96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d903      	bls.n	8003d6a <DMA_CheckFifoParam+0xb6>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d003      	beq.n	8003d70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d68:	e018      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d6e:	e015      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00e      	beq.n	8003d9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d80:	e00b      	b.n	8003d9a <DMA_CheckFifoParam+0xe6>
      break;
 8003d82:	bf00      	nop
 8003d84:	e00a      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;
 8003d86:	bf00      	nop
 8003d88:	e008      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e006      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e004      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;
 8003d92:	bf00      	nop
 8003d94:	e002      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;   
 8003d96:	bf00      	nop
 8003d98:	e000      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;
 8003d9a:	bf00      	nop
    }
  } 
  
  return status; 
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop

08003dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	; 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	e159      	b.n	800407c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dc8:	2201      	movs	r2, #1
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	f040 8148 	bne.w	8004076 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d005      	beq.n	8003dfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d130      	bne.n	8003e60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	2203      	movs	r2, #3
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e34:	2201      	movs	r2, #1
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 0201 	and.w	r2, r3, #1
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d017      	beq.n	8003e9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	2203      	movs	r2, #3
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d123      	bne.n	8003ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	08da      	lsrs	r2, r3, #3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3208      	adds	r2, #8
 8003eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	220f      	movs	r2, #15
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	08da      	lsrs	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3208      	adds	r2, #8
 8003eea:	69b9      	ldr	r1, [r7, #24]
 8003eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	2203      	movs	r2, #3
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 0203 	and.w	r2, r3, #3
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80a2 	beq.w	8004076 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	4b57      	ldr	r3, [pc, #348]	; (8004094 <HAL_GPIO_Init+0x2e8>)
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	4a56      	ldr	r2, [pc, #344]	; (8004094 <HAL_GPIO_Init+0x2e8>)
 8003f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f40:	6453      	str	r3, [r2, #68]	; 0x44
 8003f42:	4b54      	ldr	r3, [pc, #336]	; (8004094 <HAL_GPIO_Init+0x2e8>)
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f4e:	4a52      	ldr	r2, [pc, #328]	; (8004098 <HAL_GPIO_Init+0x2ec>)
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	3302      	adds	r3, #2
 8003f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	220f      	movs	r2, #15
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a49      	ldr	r2, [pc, #292]	; (800409c <HAL_GPIO_Init+0x2f0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d019      	beq.n	8003fae <HAL_GPIO_Init+0x202>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a48      	ldr	r2, [pc, #288]	; (80040a0 <HAL_GPIO_Init+0x2f4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_GPIO_Init+0x1fe>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a47      	ldr	r2, [pc, #284]	; (80040a4 <HAL_GPIO_Init+0x2f8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00d      	beq.n	8003fa6 <HAL_GPIO_Init+0x1fa>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a46      	ldr	r2, [pc, #280]	; (80040a8 <HAL_GPIO_Init+0x2fc>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <HAL_GPIO_Init+0x1f6>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a45      	ldr	r2, [pc, #276]	; (80040ac <HAL_GPIO_Init+0x300>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d101      	bne.n	8003f9e <HAL_GPIO_Init+0x1f2>
 8003f9a:	2304      	movs	r3, #4
 8003f9c:	e008      	b.n	8003fb0 <HAL_GPIO_Init+0x204>
 8003f9e:	2307      	movs	r3, #7
 8003fa0:	e006      	b.n	8003fb0 <HAL_GPIO_Init+0x204>
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e004      	b.n	8003fb0 <HAL_GPIO_Init+0x204>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e002      	b.n	8003fb0 <HAL_GPIO_Init+0x204>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_GPIO_Init+0x204>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	f002 0203 	and.w	r2, r2, #3
 8003fb6:	0092      	lsls	r2, r2, #2
 8003fb8:	4093      	lsls	r3, r2
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fc0:	4935      	ldr	r1, [pc, #212]	; (8004098 <HAL_GPIO_Init+0x2ec>)
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	089b      	lsrs	r3, r3, #2
 8003fc6:	3302      	adds	r3, #2
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fce:	4b38      	ldr	r3, [pc, #224]	; (80040b0 <HAL_GPIO_Init+0x304>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ff2:	4a2f      	ldr	r2, [pc, #188]	; (80040b0 <HAL_GPIO_Init+0x304>)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ff8:	4b2d      	ldr	r3, [pc, #180]	; (80040b0 <HAL_GPIO_Init+0x304>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	43db      	mvns	r3, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800401c:	4a24      	ldr	r2, [pc, #144]	; (80040b0 <HAL_GPIO_Init+0x304>)
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004022:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <HAL_GPIO_Init+0x304>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004046:	4a1a      	ldr	r2, [pc, #104]	; (80040b0 <HAL_GPIO_Init+0x304>)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800404c:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <HAL_GPIO_Init+0x304>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004070:	4a0f      	ldr	r2, [pc, #60]	; (80040b0 <HAL_GPIO_Init+0x304>)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	3301      	adds	r3, #1
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2b0f      	cmp	r3, #15
 8004080:	f67f aea2 	bls.w	8003dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop
 8004088:	3724      	adds	r7, #36	; 0x24
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40023800 	.word	0x40023800
 8004098:	40013800 	.word	0x40013800
 800409c:	40020000 	.word	0x40020000
 80040a0:	40020400 	.word	0x40020400
 80040a4:	40020800 	.word	0x40020800
 80040a8:	40020c00 	.word	0x40020c00
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40013c00 	.word	0x40013c00

080040b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	807b      	strh	r3, [r7, #2]
 80040c0:	4613      	mov	r3, r2
 80040c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040c4:	787b      	ldrb	r3, [r7, #1]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040ca:	887a      	ldrh	r2, [r7, #2]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040d0:	e003      	b.n	80040da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040d2:	887b      	ldrh	r3, [r7, #2]
 80040d4:	041a      	lsls	r2, r3, #16
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	619a      	str	r2, [r3, #24]
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e12b      	b.n	8004352 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fe fbd8 	bl	80028c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2224      	movs	r2, #36	; 0x24
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800413a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800414a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800414c:	f001 f858 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 8004150:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4a81      	ldr	r2, [pc, #516]	; (800435c <HAL_I2C_Init+0x274>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d807      	bhi.n	800416c <HAL_I2C_Init+0x84>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4a80      	ldr	r2, [pc, #512]	; (8004360 <HAL_I2C_Init+0x278>)
 8004160:	4293      	cmp	r3, r2
 8004162:	bf94      	ite	ls
 8004164:	2301      	movls	r3, #1
 8004166:	2300      	movhi	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e006      	b.n	800417a <HAL_I2C_Init+0x92>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4a7d      	ldr	r2, [pc, #500]	; (8004364 <HAL_I2C_Init+0x27c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	bf94      	ite	ls
 8004174:	2301      	movls	r3, #1
 8004176:	2300      	movhi	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e0e7      	b.n	8004352 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4a78      	ldr	r2, [pc, #480]	; (8004368 <HAL_I2C_Init+0x280>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0c9b      	lsrs	r3, r3, #18
 800418c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4a6a      	ldr	r2, [pc, #424]	; (800435c <HAL_I2C_Init+0x274>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d802      	bhi.n	80041bc <HAL_I2C_Init+0xd4>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	3301      	adds	r3, #1
 80041ba:	e009      	b.n	80041d0 <HAL_I2C_Init+0xe8>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	4a69      	ldr	r2, [pc, #420]	; (800436c <HAL_I2C_Init+0x284>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	099b      	lsrs	r3, r3, #6
 80041ce:	3301      	adds	r3, #1
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	495c      	ldr	r1, [pc, #368]	; (800435c <HAL_I2C_Init+0x274>)
 80041ec:	428b      	cmp	r3, r1
 80041ee:	d819      	bhi.n	8004224 <HAL_I2C_Init+0x13c>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1e59      	subs	r1, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80041fe:	1c59      	adds	r1, r3, #1
 8004200:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004204:	400b      	ands	r3, r1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_I2C_Init+0x138>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1e59      	subs	r1, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	fbb1 f3f3 	udiv	r3, r1, r3
 8004218:	3301      	adds	r3, #1
 800421a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421e:	e051      	b.n	80042c4 <HAL_I2C_Init+0x1dc>
 8004220:	2304      	movs	r3, #4
 8004222:	e04f      	b.n	80042c4 <HAL_I2C_Init+0x1dc>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d111      	bne.n	8004250 <HAL_I2C_Init+0x168>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1e58      	subs	r0, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	440b      	add	r3, r1
 800423a:	fbb0 f3f3 	udiv	r3, r0, r3
 800423e:	3301      	adds	r3, #1
 8004240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004244:	2b00      	cmp	r3, #0
 8004246:	bf0c      	ite	eq
 8004248:	2301      	moveq	r3, #1
 800424a:	2300      	movne	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e012      	b.n	8004276 <HAL_I2C_Init+0x18e>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1e58      	subs	r0, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	0099      	lsls	r1, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	fbb0 f3f3 	udiv	r3, r0, r3
 8004266:	3301      	adds	r3, #1
 8004268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Init+0x196>
 800427a:	2301      	movs	r3, #1
 800427c:	e022      	b.n	80042c4 <HAL_I2C_Init+0x1dc>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10e      	bne.n	80042a4 <HAL_I2C_Init+0x1bc>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1e58      	subs	r0, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6859      	ldr	r1, [r3, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	440b      	add	r3, r1
 8004294:	fbb0 f3f3 	udiv	r3, r0, r3
 8004298:	3301      	adds	r3, #1
 800429a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800429e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a2:	e00f      	b.n	80042c4 <HAL_I2C_Init+0x1dc>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	1e58      	subs	r0, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	0099      	lsls	r1, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ba:	3301      	adds	r3, #1
 80042bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	6809      	ldr	r1, [r1, #0]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6911      	ldr	r1, [r2, #16]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68d2      	ldr	r2, [r2, #12]
 80042fe:	4311      	orrs	r1, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	430b      	orrs	r3, r1
 8004306:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	000186a0 	.word	0x000186a0
 8004360:	001e847f 	.word	0x001e847f
 8004364:	003d08ff 	.word	0x003d08ff
 8004368:	431bde83 	.word	0x431bde83
 800436c:	10624dd3 	.word	0x10624dd3

08004370 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	4608      	mov	r0, r1
 800437a:	4611      	mov	r1, r2
 800437c:	461a      	mov	r2, r3
 800437e:	4603      	mov	r3, r0
 8004380:	817b      	strh	r3, [r7, #10]
 8004382:	460b      	mov	r3, r1
 8004384:	813b      	strh	r3, [r7, #8]
 8004386:	4613      	mov	r3, r2
 8004388:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800438a:	f7fe fc75 	bl	8002c78 <HAL_GetTick>
 800438e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b20      	cmp	r3, #32
 800439a:	f040 80d9 	bne.w	8004550 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	2319      	movs	r3, #25
 80043a4:	2201      	movs	r2, #1
 80043a6:	496d      	ldr	r1, [pc, #436]	; (800455c <HAL_I2C_Mem_Write+0x1ec>)
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f971 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80043b4:	2302      	movs	r3, #2
 80043b6:	e0cc      	b.n	8004552 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_I2C_Mem_Write+0x56>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e0c5      	b.n	8004552 <HAL_I2C_Mem_Write+0x1e2>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d007      	beq.n	80043ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2221      	movs	r2, #33	; 0x21
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2240      	movs	r2, #64	; 0x40
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a3a      	ldr	r2, [r7, #32]
 8004416:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800441c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4a4d      	ldr	r2, [pc, #308]	; (8004560 <HAL_I2C_Mem_Write+0x1f0>)
 800442c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800442e:	88f8      	ldrh	r0, [r7, #6]
 8004430:	893a      	ldrh	r2, [r7, #8]
 8004432:	8979      	ldrh	r1, [r7, #10]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	4603      	mov	r3, r0
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 f890 	bl	8004564 <I2C_RequestMemoryWrite>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d052      	beq.n	80044f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e081      	b.n	8004552 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f9f2 	bl	800483c <I2C_WaitOnTXEFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00d      	beq.n	800447a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	2b04      	cmp	r3, #4
 8004464:	d107      	bne.n	8004476 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004474:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e06b      	b.n	8004552 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	781a      	ldrb	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d11b      	bne.n	80044f0 <HAL_I2C_Mem_Write+0x180>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d017      	beq.n	80044f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	781a      	ldrb	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1aa      	bne.n	800444e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f9de 	bl	80048be <I2C_WaitOnBTFFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00d      	beq.n	8004524 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	2b04      	cmp	r3, #4
 800450e:	d107      	bne.n	8004520 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800451e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e016      	b.n	8004552 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	e000      	b.n	8004552 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004550:	2302      	movs	r3, #2
  }
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	00100002 	.word	0x00100002
 8004560:	ffff0000 	.word	0xffff0000

08004564 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af02      	add	r7, sp, #8
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	4608      	mov	r0, r1
 800456e:	4611      	mov	r1, r2
 8004570:	461a      	mov	r2, r3
 8004572:	4603      	mov	r3, r0
 8004574:	817b      	strh	r3, [r7, #10]
 8004576:	460b      	mov	r3, r1
 8004578:	813b      	strh	r3, [r7, #8]
 800457a:	4613      	mov	r3, r2
 800457c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800458c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	2200      	movs	r2, #0
 8004596:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f878 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00d      	beq.n	80045c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b4:	d103      	bne.n	80045be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e05f      	b.n	8004682 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045c2:	897b      	ldrh	r3, [r7, #10]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	6a3a      	ldr	r2, [r7, #32]
 80045d6:	492d      	ldr	r1, [pc, #180]	; (800468c <I2C_RequestMemoryWrite+0x128>)
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f8b0 	bl	800473e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e04c      	b.n	8004682 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004600:	6a39      	ldr	r1, [r7, #32]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f91a 	bl	800483c <I2C_WaitOnTXEFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00d      	beq.n	800462a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	2b04      	cmp	r3, #4
 8004614:	d107      	bne.n	8004626 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004624:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e02b      	b.n	8004682 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800462a:	88fb      	ldrh	r3, [r7, #6]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d105      	bne.n	800463c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004630:	893b      	ldrh	r3, [r7, #8]
 8004632:	b2da      	uxtb	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	611a      	str	r2, [r3, #16]
 800463a:	e021      	b.n	8004680 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800463c:	893b      	ldrh	r3, [r7, #8]
 800463e:	0a1b      	lsrs	r3, r3, #8
 8004640:	b29b      	uxth	r3, r3
 8004642:	b2da      	uxtb	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800464a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464c:	6a39      	ldr	r1, [r7, #32]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f8f4 	bl	800483c <I2C_WaitOnTXEFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00d      	beq.n	8004676 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	2b04      	cmp	r3, #4
 8004660:	d107      	bne.n	8004672 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004670:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e005      	b.n	8004682 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004676:	893b      	ldrh	r3, [r7, #8]
 8004678:	b2da      	uxtb	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	00010002 	.word	0x00010002

08004690 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046a0:	e025      	b.n	80046ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d021      	beq.n	80046ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046aa:	f7fe fae5 	bl	8002c78 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d302      	bcc.n	80046c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d116      	bne.n	80046ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f043 0220 	orr.w	r2, r3, #32
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e023      	b.n	8004736 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d10d      	bne.n	8004714 <I2C_WaitOnFlagUntilTimeout+0x84>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	43da      	mvns	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4013      	ands	r3, r2
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	bf0c      	ite	eq
 800470a:	2301      	moveq	r3, #1
 800470c:	2300      	movne	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	e00c      	b.n	800472e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	43da      	mvns	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4013      	ands	r3, r2
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	bf0c      	ite	eq
 8004726:	2301      	moveq	r3, #1
 8004728:	2300      	movne	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	429a      	cmp	r2, r3
 8004732:	d0b6      	beq.n	80046a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
 800474a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800474c:	e051      	b.n	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475c:	d123      	bne.n	80047a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004776:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f043 0204 	orr.w	r2, r3, #4
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e046      	b.n	8004834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d021      	beq.n	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ae:	f7fe fa63 	bl	8002c78 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d302      	bcc.n	80047c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d116      	bne.n	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f043 0220 	orr.w	r2, r3, #32
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e020      	b.n	8004834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d10c      	bne.n	8004816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	43da      	mvns	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4013      	ands	r3, r2
 8004808:	b29b      	uxth	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	bf14      	ite	ne
 800480e:	2301      	movne	r3, #1
 8004810:	2300      	moveq	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	e00b      	b.n	800482e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	43da      	mvns	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	4013      	ands	r3, r2
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf14      	ite	ne
 8004828:	2301      	movne	r3, #1
 800482a:	2300      	moveq	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d18d      	bne.n	800474e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004848:	e02d      	b.n	80048a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f878 	bl	8004940 <I2C_IsAcknowledgeFailed>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e02d      	b.n	80048b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004860:	d021      	beq.n	80048a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004862:	f7fe fa09 	bl	8002c78 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	429a      	cmp	r2, r3
 8004870:	d302      	bcc.n	8004878 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d116      	bne.n	80048a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f043 0220 	orr.w	r2, r3, #32
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e007      	b.n	80048b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b0:	2b80      	cmp	r3, #128	; 0x80
 80048b2:	d1ca      	bne.n	800484a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048ca:	e02d      	b.n	8004928 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 f837 	bl	8004940 <I2C_IsAcknowledgeFailed>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e02d      	b.n	8004938 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d021      	beq.n	8004928 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e4:	f7fe f9c8 	bl	8002c78 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d302      	bcc.n	80048fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d116      	bne.n	8004928 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	f043 0220 	orr.w	r2, r3, #32
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e007      	b.n	8004938 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b04      	cmp	r3, #4
 8004934:	d1ca      	bne.n	80048cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004956:	d11b      	bne.n	8004990 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004960:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	f043 0204 	orr.w	r2, r3, #4
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e267      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d075      	beq.n	8004aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049be:	4b88      	ldr	r3, [pc, #544]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d00c      	beq.n	80049e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ca:	4b85      	ldr	r3, [pc, #532]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d112      	bne.n	80049fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049d6:	4b82      	ldr	r3, [pc, #520]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049e2:	d10b      	bne.n	80049fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e4:	4b7e      	ldr	r3, [pc, #504]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d05b      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x108>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d157      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e242      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a04:	d106      	bne.n	8004a14 <HAL_RCC_OscConfig+0x74>
 8004a06:	4b76      	ldr	r3, [pc, #472]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a75      	ldr	r2, [pc, #468]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	e01d      	b.n	8004a50 <HAL_RCC_OscConfig+0xb0>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x98>
 8004a1e:	4b70      	ldr	r3, [pc, #448]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a6f      	ldr	r2, [pc, #444]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	4b6d      	ldr	r3, [pc, #436]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a6c      	ldr	r2, [pc, #432]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e00b      	b.n	8004a50 <HAL_RCC_OscConfig+0xb0>
 8004a38:	4b69      	ldr	r3, [pc, #420]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a68      	ldr	r2, [pc, #416]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	4b66      	ldr	r3, [pc, #408]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a65      	ldr	r2, [pc, #404]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d013      	beq.n	8004a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a58:	f7fe f90e 	bl	8002c78 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a60:	f7fe f90a 	bl	8002c78 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b64      	cmp	r3, #100	; 0x64
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e207      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a72:	4b5b      	ldr	r3, [pc, #364]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0xc0>
 8004a7e:	e014      	b.n	8004aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fe f8fa 	bl	8002c78 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a88:	f7fe f8f6 	bl	8002c78 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b64      	cmp	r3, #100	; 0x64
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e1f3      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a9a:	4b51      	ldr	r3, [pc, #324]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0xe8>
 8004aa6:	e000      	b.n	8004aaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d063      	beq.n	8004b7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ab6:	4b4a      	ldr	r3, [pc, #296]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 030c 	and.w	r3, r3, #12
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00b      	beq.n	8004ada <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ac2:	4b47      	ldr	r3, [pc, #284]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d11c      	bne.n	8004b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ace:	4b44      	ldr	r3, [pc, #272]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d116      	bne.n	8004b08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ada:	4b41      	ldr	r3, [pc, #260]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_RCC_OscConfig+0x152>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d001      	beq.n	8004af2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e1c7      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af2:	4b3b      	ldr	r3, [pc, #236]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4937      	ldr	r1, [pc, #220]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b06:	e03a      	b.n	8004b7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d020      	beq.n	8004b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b10:	4b34      	ldr	r3, [pc, #208]	; (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7fe f8af 	bl	8002c78 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b1e:	f7fe f8ab 	bl	8002c78 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e1a8      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b30:	4b2b      	ldr	r3, [pc, #172]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f0      	beq.n	8004b1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3c:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	4925      	ldr	r1, [pc, #148]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	600b      	str	r3, [r1, #0]
 8004b50:	e015      	b.n	8004b7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b52:	4b24      	ldr	r3, [pc, #144]	; (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fe f88e 	bl	8002c78 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b60:	f7fe f88a 	bl	8002c78 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e187      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b72:	4b1b      	ldr	r3, [pc, #108]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d036      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d016      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b92:	4b15      	ldr	r3, [pc, #84]	; (8004be8 <HAL_RCC_OscConfig+0x248>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b98:	f7fe f86e 	bl	8002c78 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ba0:	f7fe f86a 	bl	8002c78 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e167      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x200>
 8004bbe:	e01b      	b.n	8004bf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bc0:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <HAL_RCC_OscConfig+0x248>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc6:	f7fe f857 	bl	8002c78 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bcc:	e00e      	b.n	8004bec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bce:	f7fe f853 	bl	8002c78 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d907      	bls.n	8004bec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e150      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
 8004be0:	40023800 	.word	0x40023800
 8004be4:	42470000 	.word	0x42470000
 8004be8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bec:	4b88      	ldr	r3, [pc, #544]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1ea      	bne.n	8004bce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8097 	beq.w	8004d34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c06:	2300      	movs	r3, #0
 8004c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c0a:	4b81      	ldr	r3, [pc, #516]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10f      	bne.n	8004c36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c16:	2300      	movs	r3, #0
 8004c18:	60bb      	str	r3, [r7, #8]
 8004c1a:	4b7d      	ldr	r3, [pc, #500]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	4a7c      	ldr	r2, [pc, #496]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c24:	6413      	str	r3, [r2, #64]	; 0x40
 8004c26:	4b7a      	ldr	r3, [pc, #488]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2e:	60bb      	str	r3, [r7, #8]
 8004c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c32:	2301      	movs	r3, #1
 8004c34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c36:	4b77      	ldr	r3, [pc, #476]	; (8004e14 <HAL_RCC_OscConfig+0x474>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d118      	bne.n	8004c74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c42:	4b74      	ldr	r3, [pc, #464]	; (8004e14 <HAL_RCC_OscConfig+0x474>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a73      	ldr	r2, [pc, #460]	; (8004e14 <HAL_RCC_OscConfig+0x474>)
 8004c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c4e:	f7fe f813 	bl	8002c78 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c56:	f7fe f80f 	bl	8002c78 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e10c      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c68:	4b6a      	ldr	r3, [pc, #424]	; (8004e14 <HAL_RCC_OscConfig+0x474>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d106      	bne.n	8004c8a <HAL_RCC_OscConfig+0x2ea>
 8004c7c:	4b64      	ldr	r3, [pc, #400]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c80:	4a63      	ldr	r2, [pc, #396]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004c82:	f043 0301 	orr.w	r3, r3, #1
 8004c86:	6713      	str	r3, [r2, #112]	; 0x70
 8004c88:	e01c      	b.n	8004cc4 <HAL_RCC_OscConfig+0x324>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b05      	cmp	r3, #5
 8004c90:	d10c      	bne.n	8004cac <HAL_RCC_OscConfig+0x30c>
 8004c92:	4b5f      	ldr	r3, [pc, #380]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	4a5e      	ldr	r2, [pc, #376]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004c98:	f043 0304 	orr.w	r3, r3, #4
 8004c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c9e:	4b5c      	ldr	r3, [pc, #368]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca2:	4a5b      	ldr	r2, [pc, #364]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004ca4:	f043 0301 	orr.w	r3, r3, #1
 8004ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8004caa:	e00b      	b.n	8004cc4 <HAL_RCC_OscConfig+0x324>
 8004cac:	4b58      	ldr	r3, [pc, #352]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	4a57      	ldr	r2, [pc, #348]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004cb2:	f023 0301 	bic.w	r3, r3, #1
 8004cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb8:	4b55      	ldr	r3, [pc, #340]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	4a54      	ldr	r2, [pc, #336]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004cbe:	f023 0304 	bic.w	r3, r3, #4
 8004cc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d015      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ccc:	f7fd ffd4 	bl	8002c78 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd2:	e00a      	b.n	8004cea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cd4:	f7fd ffd0 	bl	8002c78 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e0cb      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cea:	4b49      	ldr	r3, [pc, #292]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0ee      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x334>
 8004cf6:	e014      	b.n	8004d22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf8:	f7fd ffbe 	bl	8002c78 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cfe:	e00a      	b.n	8004d16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d00:	f7fd ffba 	bl	8002c78 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e0b5      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d16:	4b3e      	ldr	r3, [pc, #248]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1ee      	bne.n	8004d00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d105      	bne.n	8004d34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d28:	4b39      	ldr	r3, [pc, #228]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	4a38      	ldr	r2, [pc, #224]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 80a1 	beq.w	8004e80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d3e:	4b34      	ldr	r3, [pc, #208]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 030c 	and.w	r3, r3, #12
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d05c      	beq.n	8004e04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d141      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d52:	4b31      	ldr	r3, [pc, #196]	; (8004e18 <HAL_RCC_OscConfig+0x478>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d58:	f7fd ff8e 	bl	8002c78 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d60:	f7fd ff8a 	bl	8002c78 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e087      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d72:	4b27      	ldr	r3, [pc, #156]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69da      	ldr	r2, [r3, #28]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	019b      	lsls	r3, r3, #6
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d94:	085b      	lsrs	r3, r3, #1
 8004d96:	3b01      	subs	r3, #1
 8004d98:	041b      	lsls	r3, r3, #16
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	061b      	lsls	r3, r3, #24
 8004da2:	491b      	ldr	r1, [pc, #108]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004da8:	4b1b      	ldr	r3, [pc, #108]	; (8004e18 <HAL_RCC_OscConfig+0x478>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dae:	f7fd ff63 	bl	8002c78 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004db6:	f7fd ff5f 	bl	8002c78 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e05c      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dc8:	4b11      	ldr	r3, [pc, #68]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x416>
 8004dd4:	e054      	b.n	8004e80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <HAL_RCC_OscConfig+0x478>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ddc:	f7fd ff4c 	bl	8002c78 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de4:	f7fd ff48 	bl	8002c78 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e045      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df6:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <HAL_RCC_OscConfig+0x470>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f0      	bne.n	8004de4 <HAL_RCC_OscConfig+0x444>
 8004e02:	e03d      	b.n	8004e80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d107      	bne.n	8004e1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e038      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40007000 	.word	0x40007000
 8004e18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <HAL_RCC_OscConfig+0x4ec>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d028      	beq.n	8004e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d121      	bne.n	8004e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d11a      	bne.n	8004e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d111      	bne.n	8004e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	3b01      	subs	r3, #1
 8004e66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d107      	bne.n	8004e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d001      	beq.n	8004e80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40023800 	.word	0x40023800

08004e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0cc      	b.n	800503e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea4:	4b68      	ldr	r3, [pc, #416]	; (8005048 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d90c      	bls.n	8004ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb2:	4b65      	ldr	r3, [pc, #404]	; (8005048 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eba:	4b63      	ldr	r3, [pc, #396]	; (8005048 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d001      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0b8      	b.n	800503e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d020      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ee4:	4b59      	ldr	r3, [pc, #356]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	4a58      	ldr	r2, [pc, #352]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004efc:	4b53      	ldr	r3, [pc, #332]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4a52      	ldr	r2, [pc, #328]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f08:	4b50      	ldr	r3, [pc, #320]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	494d      	ldr	r1, [pc, #308]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d044      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d107      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2e:	4b47      	ldr	r3, [pc, #284]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d119      	bne.n	8004f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e07f      	b.n	800503e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d003      	beq.n	8004f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d107      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f4e:	4b3f      	ldr	r3, [pc, #252]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e06f      	b.n	800503e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5e:	4b3b      	ldr	r3, [pc, #236]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e067      	b.n	800503e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f6e:	4b37      	ldr	r3, [pc, #220]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f023 0203 	bic.w	r2, r3, #3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	4934      	ldr	r1, [pc, #208]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f80:	f7fd fe7a 	bl	8002c78 <HAL_GetTick>
 8004f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f86:	e00a      	b.n	8004f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f88:	f7fd fe76 	bl	8002c78 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e04f      	b.n	800503e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9e:	4b2b      	ldr	r3, [pc, #172]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 020c 	and.w	r2, r3, #12
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d1eb      	bne.n	8004f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fb0:	4b25      	ldr	r3, [pc, #148]	; (8005048 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d20c      	bcs.n	8004fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fbe:	4b22      	ldr	r3, [pc, #136]	; (8005048 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc6:	4b20      	ldr	r3, [pc, #128]	; (8005048 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e032      	b.n	800503e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fe4:	4b19      	ldr	r3, [pc, #100]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4916      	ldr	r1, [pc, #88]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005002:	4b12      	ldr	r3, [pc, #72]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	490e      	ldr	r1, [pc, #56]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005016:	f000 f821 	bl	800505c <HAL_RCC_GetSysClockFreq>
 800501a:	4602      	mov	r2, r0
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	490a      	ldr	r1, [pc, #40]	; (8005050 <HAL_RCC_ClockConfig+0x1c0>)
 8005028:	5ccb      	ldrb	r3, [r1, r3]
 800502a:	fa22 f303 	lsr.w	r3, r2, r3
 800502e:	4a09      	ldr	r2, [pc, #36]	; (8005054 <HAL_RCC_ClockConfig+0x1c4>)
 8005030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005032:	4b09      	ldr	r3, [pc, #36]	; (8005058 <HAL_RCC_ClockConfig+0x1c8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f7fd fdda 	bl	8002bf0 <HAL_InitTick>

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40023c00 	.word	0x40023c00
 800504c:	40023800 	.word	0x40023800
 8005050:	08005db4 	.word	0x08005db4
 8005054:	20003f8c 	.word	0x20003f8c
 8005058:	20003f90 	.word	0x20003f90

0800505c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800505c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005060:	b090      	sub	sp, #64	; 0x40
 8005062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	637b      	str	r3, [r7, #52]	; 0x34
 8005068:	2300      	movs	r3, #0
 800506a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800506c:	2300      	movs	r3, #0
 800506e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005074:	4b59      	ldr	r3, [pc, #356]	; (80051dc <HAL_RCC_GetSysClockFreq+0x180>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 030c 	and.w	r3, r3, #12
 800507c:	2b08      	cmp	r3, #8
 800507e:	d00d      	beq.n	800509c <HAL_RCC_GetSysClockFreq+0x40>
 8005080:	2b08      	cmp	r3, #8
 8005082:	f200 80a1 	bhi.w	80051c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <HAL_RCC_GetSysClockFreq+0x34>
 800508a:	2b04      	cmp	r3, #4
 800508c:	d003      	beq.n	8005096 <HAL_RCC_GetSysClockFreq+0x3a>
 800508e:	e09b      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005090:	4b53      	ldr	r3, [pc, #332]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005092:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005094:	e09b      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005096:	4b53      	ldr	r3, [pc, #332]	; (80051e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005098:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800509a:	e098      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800509c:	4b4f      	ldr	r3, [pc, #316]	; (80051dc <HAL_RCC_GetSysClockFreq+0x180>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050a6:	4b4d      	ldr	r3, [pc, #308]	; (80051dc <HAL_RCC_GetSysClockFreq+0x180>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d028      	beq.n	8005104 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050b2:	4b4a      	ldr	r3, [pc, #296]	; (80051dc <HAL_RCC_GetSysClockFreq+0x180>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	099b      	lsrs	r3, r3, #6
 80050b8:	2200      	movs	r2, #0
 80050ba:	623b      	str	r3, [r7, #32]
 80050bc:	627a      	str	r2, [r7, #36]	; 0x24
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80050c4:	2100      	movs	r1, #0
 80050c6:	4b47      	ldr	r3, [pc, #284]	; (80051e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80050c8:	fb03 f201 	mul.w	r2, r3, r1
 80050cc:	2300      	movs	r3, #0
 80050ce:	fb00 f303 	mul.w	r3, r0, r3
 80050d2:	4413      	add	r3, r2
 80050d4:	4a43      	ldr	r2, [pc, #268]	; (80051e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80050d6:	fba0 1202 	umull	r1, r2, r0, r2
 80050da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050dc:	460a      	mov	r2, r1
 80050de:	62ba      	str	r2, [r7, #40]	; 0x28
 80050e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e2:	4413      	add	r3, r2
 80050e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e8:	2200      	movs	r2, #0
 80050ea:	61bb      	str	r3, [r7, #24]
 80050ec:	61fa      	str	r2, [r7, #28]
 80050ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80050f6:	f7fb fcfb 	bl	8000af0 <__aeabi_uldivmod>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4613      	mov	r3, r2
 8005100:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005102:	e053      	b.n	80051ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005104:	4b35      	ldr	r3, [pc, #212]	; (80051dc <HAL_RCC_GetSysClockFreq+0x180>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	099b      	lsrs	r3, r3, #6
 800510a:	2200      	movs	r2, #0
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	617a      	str	r2, [r7, #20]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005116:	f04f 0b00 	mov.w	fp, #0
 800511a:	4652      	mov	r2, sl
 800511c:	465b      	mov	r3, fp
 800511e:	f04f 0000 	mov.w	r0, #0
 8005122:	f04f 0100 	mov.w	r1, #0
 8005126:	0159      	lsls	r1, r3, #5
 8005128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800512c:	0150      	lsls	r0, r2, #5
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	ebb2 080a 	subs.w	r8, r2, sl
 8005136:	eb63 090b 	sbc.w	r9, r3, fp
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005146:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800514a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800514e:	ebb2 0408 	subs.w	r4, r2, r8
 8005152:	eb63 0509 	sbc.w	r5, r3, r9
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	00eb      	lsls	r3, r5, #3
 8005160:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005164:	00e2      	lsls	r2, r4, #3
 8005166:	4614      	mov	r4, r2
 8005168:	461d      	mov	r5, r3
 800516a:	eb14 030a 	adds.w	r3, r4, sl
 800516e:	603b      	str	r3, [r7, #0]
 8005170:	eb45 030b 	adc.w	r3, r5, fp
 8005174:	607b      	str	r3, [r7, #4]
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005182:	4629      	mov	r1, r5
 8005184:	028b      	lsls	r3, r1, #10
 8005186:	4621      	mov	r1, r4
 8005188:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800518c:	4621      	mov	r1, r4
 800518e:	028a      	lsls	r2, r1, #10
 8005190:	4610      	mov	r0, r2
 8005192:	4619      	mov	r1, r3
 8005194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005196:	2200      	movs	r2, #0
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	60fa      	str	r2, [r7, #12]
 800519c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051a0:	f7fb fca6 	bl	8000af0 <__aeabi_uldivmod>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4613      	mov	r3, r2
 80051aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <HAL_RCC_GetSysClockFreq+0x180>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	0c1b      	lsrs	r3, r3, #16
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	3301      	adds	r3, #1
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80051bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051c6:	e002      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80051ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3740      	adds	r7, #64	; 0x40
 80051d4:	46bd      	mov	sp, r7
 80051d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051da:	bf00      	nop
 80051dc:	40023800 	.word	0x40023800
 80051e0:	00f42400 	.word	0x00f42400
 80051e4:	019bfcc0 	.word	0x019bfcc0

080051e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051ec:	4b03      	ldr	r3, [pc, #12]	; (80051fc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ee:	681b      	ldr	r3, [r3, #0]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20003f8c 	.word	0x20003f8c

08005200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005204:	f7ff fff0 	bl	80051e8 <HAL_RCC_GetHCLKFreq>
 8005208:	4602      	mov	r2, r0
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	0a9b      	lsrs	r3, r3, #10
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	4903      	ldr	r1, [pc, #12]	; (8005224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005216:	5ccb      	ldrb	r3, [r1, r3]
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40023800 	.word	0x40023800
 8005224:	08005dc4 	.word	0x08005dc4

08005228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e041      	b.n	80052be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d106      	bne.n	8005254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fd fc1c 	bl	8002a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3304      	adds	r3, #4
 8005264:	4619      	mov	r1, r3
 8005266:	4610      	mov	r0, r2
 8005268:	f000 f950 	bl	800550c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d001      	beq.n	80052e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e03c      	b.n	800535a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a1e      	ldr	r2, [pc, #120]	; (8005368 <HAL_TIM_Base_Start+0xa0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d018      	beq.n	8005324 <HAL_TIM_Base_Start+0x5c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fa:	d013      	beq.n	8005324 <HAL_TIM_Base_Start+0x5c>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a1a      	ldr	r2, [pc, #104]	; (800536c <HAL_TIM_Base_Start+0xa4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00e      	beq.n	8005324 <HAL_TIM_Base_Start+0x5c>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a19      	ldr	r2, [pc, #100]	; (8005370 <HAL_TIM_Base_Start+0xa8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d009      	beq.n	8005324 <HAL_TIM_Base_Start+0x5c>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a17      	ldr	r2, [pc, #92]	; (8005374 <HAL_TIM_Base_Start+0xac>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_TIM_Base_Start+0x5c>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a16      	ldr	r2, [pc, #88]	; (8005378 <HAL_TIM_Base_Start+0xb0>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d111      	bne.n	8005348 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b06      	cmp	r3, #6
 8005334:	d010      	beq.n	8005358 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0201 	orr.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005346:	e007      	b.n	8005358 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40010000 	.word	0x40010000
 800536c:	40000400 	.word	0x40000400
 8005370:	40000800 	.word	0x40000800
 8005374:	40000c00 	.word	0x40000c00
 8005378:	40014000 	.word	0x40014000

0800537c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_TIM_ConfigClockSource+0x1c>
 8005394:	2302      	movs	r3, #2
 8005396:	e0b4      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x186>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d0:	d03e      	beq.n	8005450 <HAL_TIM_ConfigClockSource+0xd4>
 80053d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d6:	f200 8087 	bhi.w	80054e8 <HAL_TIM_ConfigClockSource+0x16c>
 80053da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053de:	f000 8086 	beq.w	80054ee <HAL_TIM_ConfigClockSource+0x172>
 80053e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e6:	d87f      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x16c>
 80053e8:	2b70      	cmp	r3, #112	; 0x70
 80053ea:	d01a      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0xa6>
 80053ec:	2b70      	cmp	r3, #112	; 0x70
 80053ee:	d87b      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x16c>
 80053f0:	2b60      	cmp	r3, #96	; 0x60
 80053f2:	d050      	beq.n	8005496 <HAL_TIM_ConfigClockSource+0x11a>
 80053f4:	2b60      	cmp	r3, #96	; 0x60
 80053f6:	d877      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x16c>
 80053f8:	2b50      	cmp	r3, #80	; 0x50
 80053fa:	d03c      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0xfa>
 80053fc:	2b50      	cmp	r3, #80	; 0x50
 80053fe:	d873      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005400:	2b40      	cmp	r3, #64	; 0x40
 8005402:	d058      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0x13a>
 8005404:	2b40      	cmp	r3, #64	; 0x40
 8005406:	d86f      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005408:	2b30      	cmp	r3, #48	; 0x30
 800540a:	d064      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x15a>
 800540c:	2b30      	cmp	r3, #48	; 0x30
 800540e:	d86b      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005410:	2b20      	cmp	r3, #32
 8005412:	d060      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005414:	2b20      	cmp	r3, #32
 8005416:	d867      	bhi.n	80054e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d05c      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x15a>
 800541c:	2b10      	cmp	r3, #16
 800541e:	d05a      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005420:	e062      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6899      	ldr	r1, [r3, #8]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f000 f965 	bl	8005700 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005444:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	609a      	str	r2, [r3, #8]
      break;
 800544e:	e04f      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	6899      	ldr	r1, [r3, #8]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f000 f94e 	bl	8005700 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005472:	609a      	str	r2, [r3, #8]
      break;
 8005474:	e03c      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6859      	ldr	r1, [r3, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	461a      	mov	r2, r3
 8005484:	f000 f8c2 	bl	800560c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2150      	movs	r1, #80	; 0x50
 800548e:	4618      	mov	r0, r3
 8005490:	f000 f91b 	bl	80056ca <TIM_ITRx_SetConfig>
      break;
 8005494:	e02c      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6859      	ldr	r1, [r3, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	461a      	mov	r2, r3
 80054a4:	f000 f8e1 	bl	800566a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2160      	movs	r1, #96	; 0x60
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 f90b 	bl	80056ca <TIM_ITRx_SetConfig>
      break;
 80054b4:	e01c      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6859      	ldr	r1, [r3, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f000 f8a2 	bl	800560c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2140      	movs	r1, #64	; 0x40
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 f8fb 	bl	80056ca <TIM_ITRx_SetConfig>
      break;
 80054d4:	e00c      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4619      	mov	r1, r3
 80054e0:	4610      	mov	r0, r2
 80054e2:	f000 f8f2 	bl	80056ca <TIM_ITRx_SetConfig>
      break;
 80054e6:	e003      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
      break;
 80054ec:	e000      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a34      	ldr	r2, [pc, #208]	; (80055f0 <TIM_Base_SetConfig+0xe4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00f      	beq.n	8005544 <TIM_Base_SetConfig+0x38>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552a:	d00b      	beq.n	8005544 <TIM_Base_SetConfig+0x38>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a31      	ldr	r2, [pc, #196]	; (80055f4 <TIM_Base_SetConfig+0xe8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d007      	beq.n	8005544 <TIM_Base_SetConfig+0x38>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a30      	ldr	r2, [pc, #192]	; (80055f8 <TIM_Base_SetConfig+0xec>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d003      	beq.n	8005544 <TIM_Base_SetConfig+0x38>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a2f      	ldr	r2, [pc, #188]	; (80055fc <TIM_Base_SetConfig+0xf0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d108      	bne.n	8005556 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a25      	ldr	r2, [pc, #148]	; (80055f0 <TIM_Base_SetConfig+0xe4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d01b      	beq.n	8005596 <TIM_Base_SetConfig+0x8a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005564:	d017      	beq.n	8005596 <TIM_Base_SetConfig+0x8a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a22      	ldr	r2, [pc, #136]	; (80055f4 <TIM_Base_SetConfig+0xe8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d013      	beq.n	8005596 <TIM_Base_SetConfig+0x8a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a21      	ldr	r2, [pc, #132]	; (80055f8 <TIM_Base_SetConfig+0xec>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00f      	beq.n	8005596 <TIM_Base_SetConfig+0x8a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a20      	ldr	r2, [pc, #128]	; (80055fc <TIM_Base_SetConfig+0xf0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00b      	beq.n	8005596 <TIM_Base_SetConfig+0x8a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a1f      	ldr	r2, [pc, #124]	; (8005600 <TIM_Base_SetConfig+0xf4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d007      	beq.n	8005596 <TIM_Base_SetConfig+0x8a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a1e      	ldr	r2, [pc, #120]	; (8005604 <TIM_Base_SetConfig+0xf8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_Base_SetConfig+0x8a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a1d      	ldr	r2, [pc, #116]	; (8005608 <TIM_Base_SetConfig+0xfc>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d108      	bne.n	80055a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800559c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a08      	ldr	r2, [pc, #32]	; (80055f0 <TIM_Base_SetConfig+0xe4>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d103      	bne.n	80055dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	615a      	str	r2, [r3, #20]
}
 80055e2:	bf00      	nop
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40010000 	.word	0x40010000
 80055f4:	40000400 	.word	0x40000400
 80055f8:	40000800 	.word	0x40000800
 80055fc:	40000c00 	.word	0x40000c00
 8005600:	40014000 	.word	0x40014000
 8005604:	40014400 	.word	0x40014400
 8005608:	40014800 	.word	0x40014800

0800560c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f023 0201 	bic.w	r2, r3, #1
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f023 030a 	bic.w	r3, r3, #10
 8005648:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800566a:	b480      	push	{r7}
 800566c:	b087      	sub	sp, #28
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f023 0210 	bic.w	r2, r3, #16
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	031b      	lsls	r3, r3, #12
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	621a      	str	r2, [r3, #32]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f043 0307 	orr.w	r3, r3, #7
 80056ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	609a      	str	r2, [r3, #8]
}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800571a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	021a      	lsls	r2, r3, #8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	431a      	orrs	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4313      	orrs	r3, r2
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	609a      	str	r2, [r3, #8]
}
 8005734:	bf00      	nop
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005750:	2b01      	cmp	r3, #1
 8005752:	d101      	bne.n	8005758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005754:	2302      	movs	r3, #2
 8005756:	e050      	b.n	80057fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d018      	beq.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a4:	d013      	beq.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a18      	ldr	r2, [pc, #96]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00e      	beq.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a16      	ldr	r2, [pc, #88]	; (8005810 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d009      	beq.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a15      	ldr	r2, [pc, #84]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d004      	beq.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a13      	ldr	r2, [pc, #76]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d10c      	bne.n	80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40010000 	.word	0x40010000
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40000c00 	.word	0x40000c00
 8005818:	40014000 	.word	0x40014000

0800581c <memset>:
 800581c:	4402      	add	r2, r0
 800581e:	4603      	mov	r3, r0
 8005820:	4293      	cmp	r3, r2
 8005822:	d100      	bne.n	8005826 <memset+0xa>
 8005824:	4770      	bx	lr
 8005826:	f803 1b01 	strb.w	r1, [r3], #1
 800582a:	e7f9      	b.n	8005820 <memset+0x4>

0800582c <__errno>:
 800582c:	4b01      	ldr	r3, [pc, #4]	; (8005834 <__errno+0x8>)
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20003fe4 	.word	0x20003fe4

08005838 <__libc_init_array>:
 8005838:	b570      	push	{r4, r5, r6, lr}
 800583a:	4d0d      	ldr	r5, [pc, #52]	; (8005870 <__libc_init_array+0x38>)
 800583c:	4c0d      	ldr	r4, [pc, #52]	; (8005874 <__libc_init_array+0x3c>)
 800583e:	1b64      	subs	r4, r4, r5
 8005840:	10a4      	asrs	r4, r4, #2
 8005842:	2600      	movs	r6, #0
 8005844:	42a6      	cmp	r6, r4
 8005846:	d109      	bne.n	800585c <__libc_init_array+0x24>
 8005848:	4d0b      	ldr	r5, [pc, #44]	; (8005878 <__libc_init_array+0x40>)
 800584a:	4c0c      	ldr	r4, [pc, #48]	; (800587c <__libc_init_array+0x44>)
 800584c:	f000 faa6 	bl	8005d9c <_init>
 8005850:	1b64      	subs	r4, r4, r5
 8005852:	10a4      	asrs	r4, r4, #2
 8005854:	2600      	movs	r6, #0
 8005856:	42a6      	cmp	r6, r4
 8005858:	d105      	bne.n	8005866 <__libc_init_array+0x2e>
 800585a:	bd70      	pop	{r4, r5, r6, pc}
 800585c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005860:	4798      	blx	r3
 8005862:	3601      	adds	r6, #1
 8005864:	e7ee      	b.n	8005844 <__libc_init_array+0xc>
 8005866:	f855 3b04 	ldr.w	r3, [r5], #4
 800586a:	4798      	blx	r3
 800586c:	3601      	adds	r6, #1
 800586e:	e7f2      	b.n	8005856 <__libc_init_array+0x1e>
 8005870:	08005de0 	.word	0x08005de0
 8005874:	08005de0 	.word	0x08005de0
 8005878:	08005de0 	.word	0x08005de0
 800587c:	08005de4 	.word	0x08005de4

08005880 <log10>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	ed2d 8b02 	vpush	{d8}
 8005886:	ec55 4b10 	vmov	r4, r5, d0
 800588a:	f000 f841 	bl	8005910 <__ieee754_log10>
 800588e:	4622      	mov	r2, r4
 8005890:	462b      	mov	r3, r5
 8005892:	4620      	mov	r0, r4
 8005894:	4629      	mov	r1, r5
 8005896:	eeb0 8a40 	vmov.f32	s16, s0
 800589a:	eef0 8a60 	vmov.f32	s17, s1
 800589e:	f7fb f8f1 	bl	8000a84 <__aeabi_dcmpun>
 80058a2:	b998      	cbnz	r0, 80058cc <log10+0x4c>
 80058a4:	2200      	movs	r2, #0
 80058a6:	2300      	movs	r3, #0
 80058a8:	4620      	mov	r0, r4
 80058aa:	4629      	mov	r1, r5
 80058ac:	f7fb f8cc 	bl	8000a48 <__aeabi_dcmple>
 80058b0:	b160      	cbz	r0, 80058cc <log10+0x4c>
 80058b2:	2200      	movs	r2, #0
 80058b4:	2300      	movs	r3, #0
 80058b6:	4620      	mov	r0, r4
 80058b8:	4629      	mov	r1, r5
 80058ba:	f7fb f8b1 	bl	8000a20 <__aeabi_dcmpeq>
 80058be:	b160      	cbz	r0, 80058da <log10+0x5a>
 80058c0:	f7ff ffb4 	bl	800582c <__errno>
 80058c4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80058f0 <log10+0x70>
 80058c8:	2322      	movs	r3, #34	; 0x22
 80058ca:	6003      	str	r3, [r0, #0]
 80058cc:	eeb0 0a48 	vmov.f32	s0, s16
 80058d0:	eef0 0a68 	vmov.f32	s1, s17
 80058d4:	ecbd 8b02 	vpop	{d8}
 80058d8:	bd38      	pop	{r3, r4, r5, pc}
 80058da:	f7ff ffa7 	bl	800582c <__errno>
 80058de:	ecbd 8b02 	vpop	{d8}
 80058e2:	2321      	movs	r3, #33	; 0x21
 80058e4:	6003      	str	r3, [r0, #0]
 80058e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058ea:	4803      	ldr	r0, [pc, #12]	; (80058f8 <log10+0x78>)
 80058ec:	f000 b808 	b.w	8005900 <nan>
 80058f0:	00000000 	.word	0x00000000
 80058f4:	fff00000 	.word	0xfff00000
 80058f8:	08005dd4 	.word	0x08005dd4
 80058fc:	00000000 	.word	0x00000000

08005900 <nan>:
 8005900:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005908 <nan+0x8>
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	00000000 	.word	0x00000000
 800590c:	7ff80000 	.word	0x7ff80000

08005910 <__ieee754_log10>:
 8005910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005914:	ec55 4b10 	vmov	r4, r5, d0
 8005918:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800591c:	462b      	mov	r3, r5
 800591e:	da2f      	bge.n	8005980 <__ieee754_log10+0x70>
 8005920:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8005924:	4322      	orrs	r2, r4
 8005926:	d109      	bne.n	800593c <__ieee754_log10+0x2c>
 8005928:	493b      	ldr	r1, [pc, #236]	; (8005a18 <__ieee754_log10+0x108>)
 800592a:	2200      	movs	r2, #0
 800592c:	2300      	movs	r3, #0
 800592e:	2000      	movs	r0, #0
 8005930:	f7fa ff38 	bl	80007a4 <__aeabi_ddiv>
 8005934:	ec41 0b10 	vmov	d0, r0, r1
 8005938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800593c:	2d00      	cmp	r5, #0
 800593e:	da09      	bge.n	8005954 <__ieee754_log10+0x44>
 8005940:	ee10 2a10 	vmov	r2, s0
 8005944:	ee10 0a10 	vmov	r0, s0
 8005948:	4629      	mov	r1, r5
 800594a:	f7fa fc49 	bl	80001e0 <__aeabi_dsub>
 800594e:	2200      	movs	r2, #0
 8005950:	2300      	movs	r3, #0
 8005952:	e7ed      	b.n	8005930 <__ieee754_log10+0x20>
 8005954:	4b31      	ldr	r3, [pc, #196]	; (8005a1c <__ieee754_log10+0x10c>)
 8005956:	2200      	movs	r2, #0
 8005958:	4629      	mov	r1, r5
 800595a:	ee10 0a10 	vmov	r0, s0
 800595e:	f7fa fdf7 	bl	8000550 <__aeabi_dmul>
 8005962:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8005966:	4604      	mov	r4, r0
 8005968:	460d      	mov	r5, r1
 800596a:	460b      	mov	r3, r1
 800596c:	492c      	ldr	r1, [pc, #176]	; (8005a20 <__ieee754_log10+0x110>)
 800596e:	428b      	cmp	r3, r1
 8005970:	dd08      	ble.n	8005984 <__ieee754_log10+0x74>
 8005972:	4622      	mov	r2, r4
 8005974:	462b      	mov	r3, r5
 8005976:	4620      	mov	r0, r4
 8005978:	4629      	mov	r1, r5
 800597a:	f7fa fc33 	bl	80001e4 <__adddf3>
 800597e:	e7d9      	b.n	8005934 <__ieee754_log10+0x24>
 8005980:	2200      	movs	r2, #0
 8005982:	e7f3      	b.n	800596c <__ieee754_log10+0x5c>
 8005984:	1518      	asrs	r0, r3, #20
 8005986:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800598a:	4410      	add	r0, r2
 800598c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8005990:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005994:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8005998:	f7fa fd70 	bl	800047c <__aeabi_i2d>
 800599c:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80059a0:	3303      	adds	r3, #3
 80059a2:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80059a6:	ec45 4b10 	vmov	d0, r4, r5
 80059aa:	4606      	mov	r6, r0
 80059ac:	460f      	mov	r7, r1
 80059ae:	f000 f83b 	bl	8005a28 <__ieee754_log>
 80059b2:	a313      	add	r3, pc, #76	; (adr r3, 8005a00 <__ieee754_log10+0xf0>)
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	4630      	mov	r0, r6
 80059ba:	4639      	mov	r1, r7
 80059bc:	ec59 8b10 	vmov	r8, r9, d0
 80059c0:	f7fa fdc6 	bl	8000550 <__aeabi_dmul>
 80059c4:	a310      	add	r3, pc, #64	; (adr r3, 8005a08 <__ieee754_log10+0xf8>)
 80059c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ca:	4604      	mov	r4, r0
 80059cc:	460d      	mov	r5, r1
 80059ce:	4640      	mov	r0, r8
 80059d0:	4649      	mov	r1, r9
 80059d2:	f7fa fdbd 	bl	8000550 <__aeabi_dmul>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4620      	mov	r0, r4
 80059dc:	4629      	mov	r1, r5
 80059de:	f7fa fc01 	bl	80001e4 <__adddf3>
 80059e2:	a30b      	add	r3, pc, #44	; (adr r3, 8005a10 <__ieee754_log10+0x100>)
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	4604      	mov	r4, r0
 80059ea:	460d      	mov	r5, r1
 80059ec:	4630      	mov	r0, r6
 80059ee:	4639      	mov	r1, r7
 80059f0:	f7fa fdae 	bl	8000550 <__aeabi_dmul>
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	4620      	mov	r0, r4
 80059fa:	4629      	mov	r1, r5
 80059fc:	e7bd      	b.n	800597a <__ieee754_log10+0x6a>
 80059fe:	bf00      	nop
 8005a00:	11f12b36 	.word	0x11f12b36
 8005a04:	3d59fef3 	.word	0x3d59fef3
 8005a08:	1526e50e 	.word	0x1526e50e
 8005a0c:	3fdbcb7b 	.word	0x3fdbcb7b
 8005a10:	509f6000 	.word	0x509f6000
 8005a14:	3fd34413 	.word	0x3fd34413
 8005a18:	c3500000 	.word	0xc3500000
 8005a1c:	43500000 	.word	0x43500000
 8005a20:	7fefffff 	.word	0x7fefffff
 8005a24:	00000000 	.word	0x00000000

08005a28 <__ieee754_log>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	ec51 0b10 	vmov	r0, r1, d0
 8005a30:	ed2d 8b04 	vpush	{d8-d9}
 8005a34:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005a38:	b083      	sub	sp, #12
 8005a3a:	460d      	mov	r5, r1
 8005a3c:	da29      	bge.n	8005a92 <__ieee754_log+0x6a>
 8005a3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a42:	4303      	orrs	r3, r0
 8005a44:	ee10 2a10 	vmov	r2, s0
 8005a48:	d10c      	bne.n	8005a64 <__ieee754_log+0x3c>
 8005a4a:	49cf      	ldr	r1, [pc, #828]	; (8005d88 <__ieee754_log+0x360>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2300      	movs	r3, #0
 8005a50:	2000      	movs	r0, #0
 8005a52:	f7fa fea7 	bl	80007a4 <__aeabi_ddiv>
 8005a56:	ec41 0b10 	vmov	d0, r0, r1
 8005a5a:	b003      	add	sp, #12
 8005a5c:	ecbd 8b04 	vpop	{d8-d9}
 8005a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a64:	2900      	cmp	r1, #0
 8005a66:	da05      	bge.n	8005a74 <__ieee754_log+0x4c>
 8005a68:	460b      	mov	r3, r1
 8005a6a:	f7fa fbb9 	bl	80001e0 <__aeabi_dsub>
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2300      	movs	r3, #0
 8005a72:	e7ee      	b.n	8005a52 <__ieee754_log+0x2a>
 8005a74:	4bc5      	ldr	r3, [pc, #788]	; (8005d8c <__ieee754_log+0x364>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	f7fa fd6a 	bl	8000550 <__aeabi_dmul>
 8005a7c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005a80:	460d      	mov	r5, r1
 8005a82:	4ac3      	ldr	r2, [pc, #780]	; (8005d90 <__ieee754_log+0x368>)
 8005a84:	4295      	cmp	r5, r2
 8005a86:	dd06      	ble.n	8005a96 <__ieee754_log+0x6e>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	f7fa fbaa 	bl	80001e4 <__adddf3>
 8005a90:	e7e1      	b.n	8005a56 <__ieee754_log+0x2e>
 8005a92:	2300      	movs	r3, #0
 8005a94:	e7f5      	b.n	8005a82 <__ieee754_log+0x5a>
 8005a96:	152c      	asrs	r4, r5, #20
 8005a98:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005a9c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005aa0:	441c      	add	r4, r3
 8005aa2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8005aa6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8005aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aae:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8005ab2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8005ab6:	ea42 0105 	orr.w	r1, r2, r5
 8005aba:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8005abe:	2200      	movs	r2, #0
 8005ac0:	4bb4      	ldr	r3, [pc, #720]	; (8005d94 <__ieee754_log+0x36c>)
 8005ac2:	f7fa fb8d 	bl	80001e0 <__aeabi_dsub>
 8005ac6:	1cab      	adds	r3, r5, #2
 8005ac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	4682      	mov	sl, r0
 8005ad0:	468b      	mov	fp, r1
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	dc53      	bgt.n	8005b80 <__ieee754_log+0x158>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f7fa ffa1 	bl	8000a20 <__aeabi_dcmpeq>
 8005ade:	b1d0      	cbz	r0, 8005b16 <__ieee754_log+0xee>
 8005ae0:	2c00      	cmp	r4, #0
 8005ae2:	f000 8122 	beq.w	8005d2a <__ieee754_log+0x302>
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f7fa fcc8 	bl	800047c <__aeabi_i2d>
 8005aec:	a390      	add	r3, pc, #576	; (adr r3, 8005d30 <__ieee754_log+0x308>)
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	4606      	mov	r6, r0
 8005af4:	460f      	mov	r7, r1
 8005af6:	f7fa fd2b 	bl	8000550 <__aeabi_dmul>
 8005afa:	a38f      	add	r3, pc, #572	; (adr r3, 8005d38 <__ieee754_log+0x310>)
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	4604      	mov	r4, r0
 8005b02:	460d      	mov	r5, r1
 8005b04:	4630      	mov	r0, r6
 8005b06:	4639      	mov	r1, r7
 8005b08:	f7fa fd22 	bl	8000550 <__aeabi_dmul>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4620      	mov	r0, r4
 8005b12:	4629      	mov	r1, r5
 8005b14:	e7ba      	b.n	8005a8c <__ieee754_log+0x64>
 8005b16:	a38a      	add	r3, pc, #552	; (adr r3, 8005d40 <__ieee754_log+0x318>)
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	4650      	mov	r0, sl
 8005b1e:	4659      	mov	r1, fp
 8005b20:	f7fa fd16 	bl	8000550 <__aeabi_dmul>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	2000      	movs	r0, #0
 8005b2a:	499b      	ldr	r1, [pc, #620]	; (8005d98 <__ieee754_log+0x370>)
 8005b2c:	f7fa fb58 	bl	80001e0 <__aeabi_dsub>
 8005b30:	4652      	mov	r2, sl
 8005b32:	4606      	mov	r6, r0
 8005b34:	460f      	mov	r7, r1
 8005b36:	465b      	mov	r3, fp
 8005b38:	4650      	mov	r0, sl
 8005b3a:	4659      	mov	r1, fp
 8005b3c:	f7fa fd08 	bl	8000550 <__aeabi_dmul>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4630      	mov	r0, r6
 8005b46:	4639      	mov	r1, r7
 8005b48:	f7fa fd02 	bl	8000550 <__aeabi_dmul>
 8005b4c:	4606      	mov	r6, r0
 8005b4e:	460f      	mov	r7, r1
 8005b50:	b914      	cbnz	r4, 8005b58 <__ieee754_log+0x130>
 8005b52:	4632      	mov	r2, r6
 8005b54:	463b      	mov	r3, r7
 8005b56:	e0a2      	b.n	8005c9e <__ieee754_log+0x276>
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f7fa fc8f 	bl	800047c <__aeabi_i2d>
 8005b5e:	a374      	add	r3, pc, #464	; (adr r3, 8005d30 <__ieee754_log+0x308>)
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	4680      	mov	r8, r0
 8005b66:	4689      	mov	r9, r1
 8005b68:	f7fa fcf2 	bl	8000550 <__aeabi_dmul>
 8005b6c:	a372      	add	r3, pc, #456	; (adr r3, 8005d38 <__ieee754_log+0x310>)
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	4604      	mov	r4, r0
 8005b74:	460d      	mov	r5, r1
 8005b76:	4640      	mov	r0, r8
 8005b78:	4649      	mov	r1, r9
 8005b7a:	f7fa fce9 	bl	8000550 <__aeabi_dmul>
 8005b7e:	e0a7      	b.n	8005cd0 <__ieee754_log+0x2a8>
 8005b80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b84:	f7fa fb2e 	bl	80001e4 <__adddf3>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4650      	mov	r0, sl
 8005b8e:	4659      	mov	r1, fp
 8005b90:	f7fa fe08 	bl	80007a4 <__aeabi_ddiv>
 8005b94:	ec41 0b18 	vmov	d8, r0, r1
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f7fa fc6f 	bl	800047c <__aeabi_i2d>
 8005b9e:	ec53 2b18 	vmov	r2, r3, d8
 8005ba2:	ec41 0b19 	vmov	d9, r0, r1
 8005ba6:	ec51 0b18 	vmov	r0, r1, d8
 8005baa:	f7fa fcd1 	bl	8000550 <__aeabi_dmul>
 8005bae:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8005bb2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4680      	mov	r8, r0
 8005bbe:	4689      	mov	r9, r1
 8005bc0:	f7fa fcc6 	bl	8000550 <__aeabi_dmul>
 8005bc4:	a360      	add	r3, pc, #384	; (adr r3, 8005d48 <__ieee754_log+0x320>)
 8005bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bca:	4606      	mov	r6, r0
 8005bcc:	460f      	mov	r7, r1
 8005bce:	f7fa fcbf 	bl	8000550 <__aeabi_dmul>
 8005bd2:	a35f      	add	r3, pc, #380	; (adr r3, 8005d50 <__ieee754_log+0x328>)
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f7fa fb04 	bl	80001e4 <__adddf3>
 8005bdc:	4632      	mov	r2, r6
 8005bde:	463b      	mov	r3, r7
 8005be0:	f7fa fcb6 	bl	8000550 <__aeabi_dmul>
 8005be4:	a35c      	add	r3, pc, #368	; (adr r3, 8005d58 <__ieee754_log+0x330>)
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f7fa fafb 	bl	80001e4 <__adddf3>
 8005bee:	4632      	mov	r2, r6
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	f7fa fcad 	bl	8000550 <__aeabi_dmul>
 8005bf6:	a35a      	add	r3, pc, #360	; (adr r3, 8005d60 <__ieee754_log+0x338>)
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	f7fa faf2 	bl	80001e4 <__adddf3>
 8005c00:	4642      	mov	r2, r8
 8005c02:	464b      	mov	r3, r9
 8005c04:	f7fa fca4 	bl	8000550 <__aeabi_dmul>
 8005c08:	a357      	add	r3, pc, #348	; (adr r3, 8005d68 <__ieee754_log+0x340>)
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	4680      	mov	r8, r0
 8005c10:	4689      	mov	r9, r1
 8005c12:	4630      	mov	r0, r6
 8005c14:	4639      	mov	r1, r7
 8005c16:	f7fa fc9b 	bl	8000550 <__aeabi_dmul>
 8005c1a:	a355      	add	r3, pc, #340	; (adr r3, 8005d70 <__ieee754_log+0x348>)
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f7fa fae0 	bl	80001e4 <__adddf3>
 8005c24:	4632      	mov	r2, r6
 8005c26:	463b      	mov	r3, r7
 8005c28:	f7fa fc92 	bl	8000550 <__aeabi_dmul>
 8005c2c:	a352      	add	r3, pc, #328	; (adr r3, 8005d78 <__ieee754_log+0x350>)
 8005c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c32:	f7fa fad7 	bl	80001e4 <__adddf3>
 8005c36:	4632      	mov	r2, r6
 8005c38:	463b      	mov	r3, r7
 8005c3a:	f7fa fc89 	bl	8000550 <__aeabi_dmul>
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4602      	mov	r2, r0
 8005c42:	4649      	mov	r1, r9
 8005c44:	4640      	mov	r0, r8
 8005c46:	f7fa facd 	bl	80001e4 <__adddf3>
 8005c4a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8005c4e:	9b01      	ldr	r3, [sp, #4]
 8005c50:	3551      	adds	r5, #81	; 0x51
 8005c52:	431d      	orrs	r5, r3
 8005c54:	2d00      	cmp	r5, #0
 8005c56:	4680      	mov	r8, r0
 8005c58:	4689      	mov	r9, r1
 8005c5a:	dd48      	ble.n	8005cee <__ieee754_log+0x2c6>
 8005c5c:	4b4e      	ldr	r3, [pc, #312]	; (8005d98 <__ieee754_log+0x370>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	4650      	mov	r0, sl
 8005c62:	4659      	mov	r1, fp
 8005c64:	f7fa fc74 	bl	8000550 <__aeabi_dmul>
 8005c68:	4652      	mov	r2, sl
 8005c6a:	465b      	mov	r3, fp
 8005c6c:	f7fa fc70 	bl	8000550 <__aeabi_dmul>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4606      	mov	r6, r0
 8005c76:	460f      	mov	r7, r1
 8005c78:	4640      	mov	r0, r8
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	f7fa fab2 	bl	80001e4 <__adddf3>
 8005c80:	ec53 2b18 	vmov	r2, r3, d8
 8005c84:	f7fa fc64 	bl	8000550 <__aeabi_dmul>
 8005c88:	4680      	mov	r8, r0
 8005c8a:	4689      	mov	r9, r1
 8005c8c:	b964      	cbnz	r4, 8005ca8 <__ieee754_log+0x280>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4630      	mov	r0, r6
 8005c94:	4639      	mov	r1, r7
 8005c96:	f7fa faa3 	bl	80001e0 <__aeabi_dsub>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4650      	mov	r0, sl
 8005ca0:	4659      	mov	r1, fp
 8005ca2:	f7fa fa9d 	bl	80001e0 <__aeabi_dsub>
 8005ca6:	e6d6      	b.n	8005a56 <__ieee754_log+0x2e>
 8005ca8:	a321      	add	r3, pc, #132	; (adr r3, 8005d30 <__ieee754_log+0x308>)
 8005caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cae:	ec51 0b19 	vmov	r0, r1, d9
 8005cb2:	f7fa fc4d 	bl	8000550 <__aeabi_dmul>
 8005cb6:	a320      	add	r3, pc, #128	; (adr r3, 8005d38 <__ieee754_log+0x310>)
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	460d      	mov	r5, r1
 8005cc0:	ec51 0b19 	vmov	r0, r1, d9
 8005cc4:	f7fa fc44 	bl	8000550 <__aeabi_dmul>
 8005cc8:	4642      	mov	r2, r8
 8005cca:	464b      	mov	r3, r9
 8005ccc:	f7fa fa8a 	bl	80001e4 <__adddf3>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	4639      	mov	r1, r7
 8005cd8:	f7fa fa82 	bl	80001e0 <__aeabi_dsub>
 8005cdc:	4652      	mov	r2, sl
 8005cde:	465b      	mov	r3, fp
 8005ce0:	f7fa fa7e 	bl	80001e0 <__aeabi_dsub>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4620      	mov	r0, r4
 8005cea:	4629      	mov	r1, r5
 8005cec:	e7d9      	b.n	8005ca2 <__ieee754_log+0x27a>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4650      	mov	r0, sl
 8005cf4:	4659      	mov	r1, fp
 8005cf6:	f7fa fa73 	bl	80001e0 <__aeabi_dsub>
 8005cfa:	ec53 2b18 	vmov	r2, r3, d8
 8005cfe:	f7fa fc27 	bl	8000550 <__aeabi_dmul>
 8005d02:	4606      	mov	r6, r0
 8005d04:	460f      	mov	r7, r1
 8005d06:	2c00      	cmp	r4, #0
 8005d08:	f43f af23 	beq.w	8005b52 <__ieee754_log+0x12a>
 8005d0c:	a308      	add	r3, pc, #32	; (adr r3, 8005d30 <__ieee754_log+0x308>)
 8005d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d12:	ec51 0b19 	vmov	r0, r1, d9
 8005d16:	f7fa fc1b 	bl	8000550 <__aeabi_dmul>
 8005d1a:	a307      	add	r3, pc, #28	; (adr r3, 8005d38 <__ieee754_log+0x310>)
 8005d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d20:	4604      	mov	r4, r0
 8005d22:	460d      	mov	r5, r1
 8005d24:	ec51 0b19 	vmov	r0, r1, d9
 8005d28:	e727      	b.n	8005b7a <__ieee754_log+0x152>
 8005d2a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8005d80 <__ieee754_log+0x358>
 8005d2e:	e694      	b.n	8005a5a <__ieee754_log+0x32>
 8005d30:	fee00000 	.word	0xfee00000
 8005d34:	3fe62e42 	.word	0x3fe62e42
 8005d38:	35793c76 	.word	0x35793c76
 8005d3c:	3dea39ef 	.word	0x3dea39ef
 8005d40:	55555555 	.word	0x55555555
 8005d44:	3fd55555 	.word	0x3fd55555
 8005d48:	df3e5244 	.word	0xdf3e5244
 8005d4c:	3fc2f112 	.word	0x3fc2f112
 8005d50:	96cb03de 	.word	0x96cb03de
 8005d54:	3fc74664 	.word	0x3fc74664
 8005d58:	94229359 	.word	0x94229359
 8005d5c:	3fd24924 	.word	0x3fd24924
 8005d60:	55555593 	.word	0x55555593
 8005d64:	3fe55555 	.word	0x3fe55555
 8005d68:	d078c69f 	.word	0xd078c69f
 8005d6c:	3fc39a09 	.word	0x3fc39a09
 8005d70:	1d8e78af 	.word	0x1d8e78af
 8005d74:	3fcc71c5 	.word	0x3fcc71c5
 8005d78:	9997fa04 	.word	0x9997fa04
 8005d7c:	3fd99999 	.word	0x3fd99999
	...
 8005d88:	c3500000 	.word	0xc3500000
 8005d8c:	43500000 	.word	0x43500000
 8005d90:	7fefffff 	.word	0x7fefffff
 8005d94:	3ff00000 	.word	0x3ff00000
 8005d98:	3fe00000 	.word	0x3fe00000

08005d9c <_init>:
 8005d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9e:	bf00      	nop
 8005da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da2:	bc08      	pop	{r3}
 8005da4:	469e      	mov	lr, r3
 8005da6:	4770      	bx	lr

08005da8 <_fini>:
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005daa:	bf00      	nop
 8005dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dae:	bc08      	pop	{r3}
 8005db0:	469e      	mov	lr, r3
 8005db2:	4770      	bx	lr
