
AudioDSP-v3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059d4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b90  08005b90  00023f8c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b90  08005b90  00015b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b98  08005b98  00023f8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b98  08005b98  00015b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b9c  08005b9c  00015b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003f8c  20000000  08005ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20003f8c  08009b2c  00023f8c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043f4  08009b2c  000243f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00023f8c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00023fbc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d4da  00000000  00000000  00023fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dce  00000000  00000000  000314d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  000332a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae3  00000000  00000000  00034070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029ccf  00000000  00000000  00034b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108dd  00000000  00000000  0005e822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011e96b  00000000  00000000  0006f0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f60  00000000  00000000  0018da6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001919cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20003f8c 	.word	0x20003f8c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005b54 	.word	0x08005b54

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20003f90 	.word	0x20003f90
 80001d4:	08005b54 	.word	0x08005b54

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b970 	b.w	8000de8 <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9e08      	ldr	r6, [sp, #32]
 8000b26:	460d      	mov	r5, r1
 8000b28:	4604      	mov	r4, r0
 8000b2a:	460f      	mov	r7, r1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d14a      	bne.n	8000bc6 <__udivmoddi4+0xa6>
 8000b30:	428a      	cmp	r2, r1
 8000b32:	4694      	mov	ip, r2
 8000b34:	d965      	bls.n	8000c02 <__udivmoddi4+0xe2>
 8000b36:	fab2 f382 	clz	r3, r2
 8000b3a:	b143      	cbz	r3, 8000b4e <__udivmoddi4+0x2e>
 8000b3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b40:	f1c3 0220 	rsb	r2, r3, #32
 8000b44:	409f      	lsls	r7, r3
 8000b46:	fa20 f202 	lsr.w	r2, r0, r2
 8000b4a:	4317      	orrs	r7, r2
 8000b4c:	409c      	lsls	r4, r3
 8000b4e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b52:	fa1f f58c 	uxth.w	r5, ip
 8000b56:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b5a:	0c22      	lsrs	r2, r4, #16
 8000b5c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b60:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b64:	fb01 f005 	mul.w	r0, r1, r5
 8000b68:	4290      	cmp	r0, r2
 8000b6a:	d90a      	bls.n	8000b82 <__udivmoddi4+0x62>
 8000b6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b70:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b74:	f080 811c 	bcs.w	8000db0 <__udivmoddi4+0x290>
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	f240 8119 	bls.w	8000db0 <__udivmoddi4+0x290>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4462      	add	r2, ip
 8000b82:	1a12      	subs	r2, r2, r0
 8000b84:	b2a4      	uxth	r4, r4
 8000b86:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b8a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b92:	fb00 f505 	mul.w	r5, r0, r5
 8000b96:	42a5      	cmp	r5, r4
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x90>
 8000b9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba2:	f080 8107 	bcs.w	8000db4 <__udivmoddi4+0x294>
 8000ba6:	42a5      	cmp	r5, r4
 8000ba8:	f240 8104 	bls.w	8000db4 <__udivmoddi4+0x294>
 8000bac:	4464      	add	r4, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb4:	1b64      	subs	r4, r4, r5
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11e      	cbz	r6, 8000bc2 <__udivmoddi4+0xa2>
 8000bba:	40dc      	lsrs	r4, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0xbc>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	f000 80ed 	beq.w	8000daa <__udivmoddi4+0x28a>
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bdc:	fab3 f183 	clz	r1, r3
 8000be0:	2900      	cmp	r1, #0
 8000be2:	d149      	bne.n	8000c78 <__udivmoddi4+0x158>
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	d302      	bcc.n	8000bee <__udivmoddi4+0xce>
 8000be8:	4282      	cmp	r2, r0
 8000bea:	f200 80f8 	bhi.w	8000dde <__udivmoddi4+0x2be>
 8000bee:	1a84      	subs	r4, r0, r2
 8000bf0:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	4617      	mov	r7, r2
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d0e2      	beq.n	8000bc2 <__udivmoddi4+0xa2>
 8000bfc:	e9c6 4700 	strd	r4, r7, [r6]
 8000c00:	e7df      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000c02:	b902      	cbnz	r2, 8000c06 <__udivmoddi4+0xe6>
 8000c04:	deff      	udf	#255	; 0xff
 8000c06:	fab2 f382 	clz	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x210>
 8000c10:	1a8a      	subs	r2, r1, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c20:	fb07 2015 	mls	r0, r7, r5, r2
 8000c24:	0c22      	lsrs	r2, r4, #16
 8000c26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c2a:	fb0e f005 	mul.w	r0, lr, r5
 8000c2e:	4290      	cmp	r0, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x124>
 8000c32:	eb1c 0202 	adds.w	r2, ip, r2
 8000c36:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x122>
 8000c3c:	4290      	cmp	r0, r2
 8000c3e:	f200 80cb 	bhi.w	8000dd8 <__udivmoddi4+0x2b8>
 8000c42:	4645      	mov	r5, r8
 8000c44:	1a12      	subs	r2, r2, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c4c:	fb07 2210 	mls	r2, r7, r0, r2
 8000c50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c54:	fb0e fe00 	mul.w	lr, lr, r0
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x14e>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x14c>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	f200 80bb 	bhi.w	8000de2 <__udivmoddi4+0x2c2>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c76:	e79f      	b.n	8000bb8 <__udivmoddi4+0x98>
 8000c78:	f1c1 0720 	rsb	r7, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c86:	fa05 f401 	lsl.w	r4, r5, r1
 8000c8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8e:	40fd      	lsrs	r5, r7
 8000c90:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	fb09 5518 	mls	r5, r9, r8, r5
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cac:	42a5      	cmp	r5, r4
 8000cae:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb2:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb6:	d90b      	bls.n	8000cd0 <__udivmoddi4+0x1b0>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc0:	f080 8088 	bcs.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cc4:	42a5      	cmp	r5, r4
 8000cc6:	f240 8085 	bls.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cca:	f1a8 0802 	sub.w	r8, r8, #2
 8000cce:	4464      	add	r4, ip
 8000cd0:	1b64      	subs	r4, r4, r5
 8000cd2:	b29d      	uxth	r5, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ce0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1da>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cf0:	d26c      	bcs.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	d96a      	bls.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fba3 9502 	umull	r9, r5, r3, r2
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	42ac      	cmp	r4, r5
 8000d08:	46c8      	mov	r8, r9
 8000d0a:	46ae      	mov	lr, r5
 8000d0c:	d356      	bcc.n	8000dbc <__udivmoddi4+0x29c>
 8000d0e:	d053      	beq.n	8000db8 <__udivmoddi4+0x298>
 8000d10:	b156      	cbz	r6, 8000d28 <__udivmoddi4+0x208>
 8000d12:	ebb0 0208 	subs.w	r2, r0, r8
 8000d16:	eb64 040e 	sbc.w	r4, r4, lr
 8000d1a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1e:	40ca      	lsrs	r2, r1
 8000d20:	40cc      	lsrs	r4, r1
 8000d22:	4317      	orrs	r7, r2
 8000d24:	e9c6 7400 	strd	r7, r4, [r6]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d30:	f1c3 0120 	rsb	r1, r3, #32
 8000d34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d38:	fa20 f201 	lsr.w	r2, r0, r1
 8000d3c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d40:	409d      	lsls	r5, r3
 8000d42:	432a      	orrs	r2, r5
 8000d44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d50:	fb07 1510 	mls	r5, r7, r0, r1
 8000d54:	0c11      	lsrs	r1, r2, #16
 8000d56:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d5a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5e:	428d      	cmp	r5, r1
 8000d60:	fa04 f403 	lsl.w	r4, r4, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x258>
 8000d66:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6e:	d22f      	bcs.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d70:	428d      	cmp	r5, r1
 8000d72:	d92d      	bls.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1b49      	subs	r1, r1, r5
 8000d7a:	b292      	uxth	r2, r2
 8000d7c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d80:	fb07 1115 	mls	r1, r7, r5, r1
 8000d84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d88:	fb05 f10e 	mul.w	r1, r5, lr
 8000d8c:	4291      	cmp	r1, r2
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x282>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d98:	d216      	bcs.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9a:	4291      	cmp	r1, r2
 8000d9c:	d914      	bls.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9e:	3d02      	subs	r5, #2
 8000da0:	4462      	add	r2, ip
 8000da2:	1a52      	subs	r2, r2, r1
 8000da4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da8:	e738      	b.n	8000c1c <__udivmoddi4+0xfc>
 8000daa:	4631      	mov	r1, r6
 8000dac:	4630      	mov	r0, r6
 8000dae:	e708      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000db0:	4639      	mov	r1, r7
 8000db2:	e6e6      	b.n	8000b82 <__udivmoddi4+0x62>
 8000db4:	4610      	mov	r0, r2
 8000db6:	e6fb      	b.n	8000bb0 <__udivmoddi4+0x90>
 8000db8:	4548      	cmp	r0, r9
 8000dba:	d2a9      	bcs.n	8000d10 <__udivmoddi4+0x1f0>
 8000dbc:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	e7a3      	b.n	8000d10 <__udivmoddi4+0x1f0>
 8000dc8:	4645      	mov	r5, r8
 8000dca:	e7ea      	b.n	8000da2 <__udivmoddi4+0x282>
 8000dcc:	462b      	mov	r3, r5
 8000dce:	e794      	b.n	8000cfa <__udivmoddi4+0x1da>
 8000dd0:	4640      	mov	r0, r8
 8000dd2:	e7d1      	b.n	8000d78 <__udivmoddi4+0x258>
 8000dd4:	46d0      	mov	r8, sl
 8000dd6:	e77b      	b.n	8000cd0 <__udivmoddi4+0x1b0>
 8000dd8:	3d02      	subs	r5, #2
 8000dda:	4462      	add	r2, ip
 8000ddc:	e732      	b.n	8000c44 <__udivmoddi4+0x124>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e70a      	b.n	8000bf8 <__udivmoddi4+0xd8>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e742      	b.n	8000c6e <__udivmoddi4+0x14e>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <default_download_IC_1>:
/*
 * Default Download
 */
#define DEFAULT_DOWNLOAD_SIZE_IC_1 65

void default_download_IC_1() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R0_SOFT_RESET_IC_1_Default );
 8000df0:	4bdd      	ldr	r3, [pc, #884]	; (8001168 <default_download_IC_1+0x37c>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	f64f 0190 	movw	r1, #63632	; 0xf890
 8000df8:	2070      	movs	r0, #112	; 0x70
 8000dfa:	f001 f9fd 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R1_SOFT_RESET_IC_1_Default );
 8000dfe:	4bdb      	ldr	r3, [pc, #876]	; (800116c <default_download_IC_1+0x380>)
 8000e00:	2202      	movs	r2, #2
 8000e02:	f64f 0190 	movw	r1, #63632	; 0xf890
 8000e06:	2070      	movs	r0, #112	; 0x70
 8000e08:	f001 f9f6 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R2_RESET_DELAY_IC_1_SIZE, R2_RESET_DELAY_IC_1_Default );
 8000e0c:	4ad8      	ldr	r2, [pc, #864]	; (8001170 <default_download_IC_1+0x384>)
 8000e0e:	2102      	movs	r1, #2
 8000e10:	2070      	movs	r0, #112	; 0x70
 8000e12:	f001 fa15 	bl	8002240 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R3_HIBERNATE_IC_1_Default );
 8000e16:	4bd7      	ldr	r3, [pc, #860]	; (8001174 <default_download_IC_1+0x388>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000e1e:	2070      	movs	r0, #112	; 0x70
 8000e20:	f001 f9ea 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R4_HIBERNATE_IC_1_Default );
 8000e24:	4bd4      	ldr	r3, [pc, #848]	; (8001178 <default_download_IC_1+0x38c>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000e2c:	2070      	movs	r0, #112	; 0x70
 8000e2e:	f001 f9e3 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R5_HIBERNATE_DELAY_IC_1_SIZE, R5_HIBERNATE_DELAY_IC_1_Default );
 8000e32:	4ad2      	ldr	r2, [pc, #840]	; (800117c <default_download_IC_1+0x390>)
 8000e34:	2102      	movs	r1, #2
 8000e36:	2070      	movs	r0, #112	; 0x70
 8000e38:	f001 fa02 	bl	8002240 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R6_KILL_CORE_IC_1_Default );
 8000e3c:	4bd0      	ldr	r3, [pc, #832]	; (8001180 <default_download_IC_1+0x394>)
 8000e3e:	2202      	movs	r2, #2
 8000e40:	f24f 4103 	movw	r1, #62467	; 0xf403
 8000e44:	2070      	movs	r0, #112	; 0x70
 8000e46:	f001 f9d7 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R7_KILL_CORE_IC_1_Default );
 8000e4a:	4bce      	ldr	r3, [pc, #824]	; (8001184 <default_download_IC_1+0x398>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	f24f 4103 	movw	r1, #62467	; 0xf403
 8000e52:	2070      	movs	r0, #112	; 0x70
 8000e54:	f001 f9d0 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R8_PLL_ENABLE_IC_1_Default );
 8000e58:	4bcb      	ldr	r3, [pc, #812]	; (8001188 <default_download_IC_1+0x39c>)
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000e60:	2070      	movs	r0, #112	; 0x70
 8000e62:	f001 f9c9 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_CTRL0_IC_1_ADDR, REG_PLL_CTRL0_IC_1_BYTE, R9_PLL_CTRL0_IC_1_Default );
 8000e66:	4bc9      	ldr	r3, [pc, #804]	; (800118c <default_download_IC_1+0x3a0>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000e6e:	2070      	movs	r0, #112	; 0x70
 8000e70:	f001 f9c2 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_CTRL1_IC_1_ADDR, REG_PLL_CTRL1_IC_1_BYTE, R10_PLL_CTRL1_IC_1_Default );
 8000e74:	4bc6      	ldr	r3, [pc, #792]	; (8001190 <default_download_IC_1+0x3a4>)
 8000e76:	2202      	movs	r2, #2
 8000e78:	f24f 0101 	movw	r1, #61441	; 0xf001
 8000e7c:	2070      	movs	r0, #112	; 0x70
 8000e7e:	f001 f9bb 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_CLK_SRC_IC_1_ADDR, REG_PLL_CLK_SRC_IC_1_BYTE, R11_PLL_CLK_SRC_IC_1_Default );
 8000e82:	4bc4      	ldr	r3, [pc, #784]	; (8001194 <default_download_IC_1+0x3a8>)
 8000e84:	2202      	movs	r2, #2
 8000e86:	f24f 0102 	movw	r1, #61442	; 0xf002
 8000e8a:	2070      	movs	r0, #112	; 0x70
 8000e8c:	f001 f9b4 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MCLK_OUT_IC_1_ADDR, REG_MCLK_OUT_IC_1_BYTE, R12_MCLK_OUT_IC_1_Default );
 8000e90:	4bc1      	ldr	r3, [pc, #772]	; (8001198 <default_download_IC_1+0x3ac>)
 8000e92:	2202      	movs	r2, #2
 8000e94:	f24f 0105 	movw	r1, #61445	; 0xf005
 8000e98:	2070      	movs	r0, #112	; 0x70
 8000e9a:	f001 f9ad 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R13_PLL_ENABLE_IC_1_Default );
 8000e9e:	4bbf      	ldr	r3, [pc, #764]	; (800119c <default_download_IC_1+0x3b0>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000ea6:	2070      	movs	r0, #112	; 0x70
 8000ea8:	f001 f9a6 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R14_PLL_LOCK_DELAY_IC_1_SIZE, R14_PLL_LOCK_DELAY_IC_1_Default );
 8000eac:	4abc      	ldr	r2, [pc, #752]	; (80011a0 <default_download_IC_1+0x3b4>)
 8000eae:	2102      	movs	r1, #2
 8000eb0:	2070      	movs	r0, #112	; 0x70
 8000eb2:	f001 f9c5 	bl	8002240 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_POWER_ENABLE0_IC_1_ADDR, REG_POWER_ENABLE0_IC_1_BYTE, R15_POWER_ENABLE0_IC_1_Default );
 8000eb6:	4bbb      	ldr	r3, [pc, #748]	; (80011a4 <default_download_IC_1+0x3b8>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	f24f 0150 	movw	r1, #61520	; 0xf050
 8000ebe:	2070      	movs	r0, #112	; 0x70
 8000ec0:	f001 f99a 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_POWER_ENABLE1_IC_1_ADDR, REG_POWER_ENABLE1_IC_1_BYTE, R16_POWER_ENABLE1_IC_1_Default );
 8000ec4:	4bb8      	ldr	r3, [pc, #736]	; (80011a8 <default_download_IC_1+0x3bc>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f24f 0151 	movw	r1, #61521	; 0xf051
 8000ecc:	2070      	movs	r0, #112	; 0x70
 8000ece:	f001 f993 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLK_GEN1_M_IC_1_ADDR, REG_CLK_GEN1_M_IC_1_BYTE, R17_CLK_GEN1_M_IC_1_Default );
 8000ed2:	4bb6      	ldr	r3, [pc, #728]	; (80011ac <default_download_IC_1+0x3c0>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	f24f 0120 	movw	r1, #61472	; 0xf020
 8000eda:	2070      	movs	r0, #112	; 0x70
 8000edc:	f001 f98c 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLK_GEN1_N_IC_1_ADDR, REG_CLK_GEN1_N_IC_1_BYTE, R18_CLK_GEN1_N_IC_1_Default );
 8000ee0:	4bb3      	ldr	r3, [pc, #716]	; (80011b0 <default_download_IC_1+0x3c4>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	f24f 0121 	movw	r1, #61473	; 0xf021
 8000ee8:	2070      	movs	r0, #112	; 0x70
 8000eea:	f001 f985 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLK_GEN3_M_IC_1_ADDR, REG_CLK_GEN3_M_IC_1_BYTE, R19_CLK_GEN3_M_IC_1_Default );
 8000eee:	4bb1      	ldr	r3, [pc, #708]	; (80011b4 <default_download_IC_1+0x3c8>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	f24f 0124 	movw	r1, #61476	; 0xf024
 8000ef6:	2070      	movs	r0, #112	; 0x70
 8000ef8:	f001 f97e 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLK_GEN3_N_IC_1_ADDR, REG_CLK_GEN3_N_IC_1_BYTE, R20_CLK_GEN3_N_IC_1_Default );
 8000efc:	4bae      	ldr	r3, [pc, #696]	; (80011b8 <default_download_IC_1+0x3cc>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	f24f 0125 	movw	r1, #61477	; 0xf025
 8000f04:	2070      	movs	r0, #112	; 0x70
 8000f06:	f001 f977 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MP4_MODE_IC_1_ADDR, REG_MP4_MODE_IC_1_BYTE, R21_MP4_MODE_IC_1_Default );
 8000f0a:	4bac      	ldr	r3, [pc, #688]	; (80011bc <default_download_IC_1+0x3d0>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	f24f 5114 	movw	r1, #62740	; 0xf514
 8000f12:	2070      	movs	r0, #112	; 0x70
 8000f14:	f001 f970 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MP6_MODE_IC_1_ADDR, REG_MP6_MODE_IC_1_BYTE, R22_MP6_MODE_IC_1_Default );
 8000f18:	4ba9      	ldr	r3, [pc, #676]	; (80011c0 <default_download_IC_1+0x3d4>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f24f 5116 	movw	r1, #62742	; 0xf516
 8000f20:	2070      	movs	r0, #112	; 0x70
 8000f22:	f001 f969 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MP10_MODE_IC_1_ADDR, REG_MP10_MODE_IC_1_BYTE, R23_MP10_MODE_IC_1_Default );
 8000f26:	4ba7      	ldr	r3, [pc, #668]	; (80011c4 <default_download_IC_1+0x3d8>)
 8000f28:	2202      	movs	r2, #2
 8000f2a:	f24f 511a 	movw	r1, #62746	; 0xf51a
 8000f2e:	2070      	movs	r0, #112	; 0x70
 8000f30:	f001 f962 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_BCLK_OUT0_PIN_IC_1_ADDR, REG_BCLK_OUT0_PIN_IC_1_BYTE, R24_BCLK_OUT0_PIN_IC_1_Default );
 8000f34:	4ba4      	ldr	r3, [pc, #656]	; (80011c8 <default_download_IC_1+0x3dc>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	f24f 7184 	movw	r1, #63364	; 0xf784
 8000f3c:	2070      	movs	r0, #112	; 0x70
 8000f3e:	f001 f95b 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_LRCLK_IN2_PIN_IC_1_ADDR, REG_LRCLK_IN2_PIN_IC_1_BYTE, R25_LRCLK_IN2_PIN_IC_1_Default );
 8000f42:	4ba2      	ldr	r3, [pc, #648]	; (80011cc <default_download_IC_1+0x3e0>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	f24f 718a 	movw	r1, #63370	; 0xf78a
 8000f4a:	2070      	movs	r0, #112	; 0x70
 8000f4c:	f001 f954 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_LRCLK_OUT0_PIN_IC_1_ADDR, REG_LRCLK_OUT0_PIN_IC_1_BYTE, R26_LRCLK_OUT0_PIN_IC_1_Default );
 8000f50:	4b9f      	ldr	r3, [pc, #636]	; (80011d0 <default_download_IC_1+0x3e4>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	f24f 718c 	movw	r1, #63372	; 0xf78c
 8000f58:	2070      	movs	r0, #112	; 0x70
 8000f5a:	f001 f94d 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SS_PIN_IC_1_ADDR, REG_SS_PIN_IC_1_BYTE, R27_SS_PIN_IC_1_Default );
 8000f5e:	4b9d      	ldr	r3, [pc, #628]	; (80011d4 <default_download_IC_1+0x3e8>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	f24f 719b 	movw	r1, #63387	; 0xf79b
 8000f66:	2070      	movs	r0, #112	; 0x70
 8000f68:	f001 f946 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MOSI_ADDR1_PIN_IC_1_ADDR, REG_MOSI_ADDR1_PIN_IC_1_BYTE, R28_MOSI_ADDR1_PIN_IC_1_Default );
 8000f6c:	4b9a      	ldr	r3, [pc, #616]	; (80011d8 <default_download_IC_1+0x3ec>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	f24f 719c 	movw	r1, #63388	; 0xf79c
 8000f74:	2070      	movs	r0, #112	; 0x70
 8000f76:	f001 f93f 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE0_IC_1_ADDR, REG_SOUT_SOURCE0_IC_1_BYTE, R29_SOUT_SOURCE0_IC_1_Default );
 8000f7a:	4b98      	ldr	r3, [pc, #608]	; (80011dc <default_download_IC_1+0x3f0>)
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	f24f 1180 	movw	r1, #61824	; 0xf180
 8000f82:	2070      	movs	r0, #112	; 0x70
 8000f84:	f001 f938 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE1_IC_1_ADDR, REG_SOUT_SOURCE1_IC_1_BYTE, R30_SOUT_SOURCE1_IC_1_Default );
 8000f88:	4b95      	ldr	r3, [pc, #596]	; (80011e0 <default_download_IC_1+0x3f4>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f24f 1181 	movw	r1, #61825	; 0xf181
 8000f90:	2070      	movs	r0, #112	; 0x70
 8000f92:	f001 f931 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE2_IC_1_ADDR, REG_SOUT_SOURCE2_IC_1_BYTE, R31_SOUT_SOURCE2_IC_1_Default );
 8000f96:	4b93      	ldr	r3, [pc, #588]	; (80011e4 <default_download_IC_1+0x3f8>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	f24f 1182 	movw	r1, #61826	; 0xf182
 8000f9e:	2070      	movs	r0, #112	; 0x70
 8000fa0:	f001 f92a 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE3_IC_1_ADDR, REG_SOUT_SOURCE3_IC_1_BYTE, R32_SOUT_SOURCE3_IC_1_Default );
 8000fa4:	4b90      	ldr	r3, [pc, #576]	; (80011e8 <default_download_IC_1+0x3fc>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	f24f 1183 	movw	r1, #61827	; 0xf183
 8000fac:	2070      	movs	r0, #112	; 0x70
 8000fae:	f001 f923 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE4_IC_1_ADDR, REG_SOUT_SOURCE4_IC_1_BYTE, R33_SOUT_SOURCE4_IC_1_Default );
 8000fb2:	4b8e      	ldr	r3, [pc, #568]	; (80011ec <default_download_IC_1+0x400>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f24f 1184 	movw	r1, #61828	; 0xf184
 8000fba:	2070      	movs	r0, #112	; 0x70
 8000fbc:	f001 f91c 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE5_IC_1_ADDR, REG_SOUT_SOURCE5_IC_1_BYTE, R34_SOUT_SOURCE5_IC_1_Default );
 8000fc0:	4b8b      	ldr	r3, [pc, #556]	; (80011f0 <default_download_IC_1+0x404>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	f24f 1185 	movw	r1, #61829	; 0xf185
 8000fc8:	2070      	movs	r0, #112	; 0x70
 8000fca:	f001 f915 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE6_IC_1_ADDR, REG_SOUT_SOURCE6_IC_1_BYTE, R35_SOUT_SOURCE6_IC_1_Default );
 8000fce:	4b89      	ldr	r3, [pc, #548]	; (80011f4 <default_download_IC_1+0x408>)
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	f24f 1186 	movw	r1, #61830	; 0xf186
 8000fd6:	2070      	movs	r0, #112	; 0x70
 8000fd8:	f001 f90e 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE7_IC_1_ADDR, REG_SOUT_SOURCE7_IC_1_BYTE, R36_SOUT_SOURCE7_IC_1_Default );
 8000fdc:	4b86      	ldr	r3, [pc, #536]	; (80011f8 <default_download_IC_1+0x40c>)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	f24f 1187 	movw	r1, #61831	; 0xf187
 8000fe4:	2070      	movs	r0, #112	; 0x70
 8000fe6:	f001 f907 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE8_IC_1_ADDR, REG_SOUT_SOURCE8_IC_1_BYTE, R37_SOUT_SOURCE8_IC_1_Default );
 8000fea:	4b84      	ldr	r3, [pc, #528]	; (80011fc <default_download_IC_1+0x410>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	f24f 1188 	movw	r1, #61832	; 0xf188
 8000ff2:	2070      	movs	r0, #112	; 0x70
 8000ff4:	f001 f900 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE9_IC_1_ADDR, REG_SOUT_SOURCE9_IC_1_BYTE, R38_SOUT_SOURCE9_IC_1_Default );
 8000ff8:	4b81      	ldr	r3, [pc, #516]	; (8001200 <default_download_IC_1+0x414>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	f24f 1189 	movw	r1, #61833	; 0xf189
 8001000:	2070      	movs	r0, #112	; 0x70
 8001002:	f001 f8f9 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE10_IC_1_ADDR, REG_SOUT_SOURCE10_IC_1_BYTE, R39_SOUT_SOURCE10_IC_1_Default );
 8001006:	4b7f      	ldr	r3, [pc, #508]	; (8001204 <default_download_IC_1+0x418>)
 8001008:	2202      	movs	r2, #2
 800100a:	f24f 118a 	movw	r1, #61834	; 0xf18a
 800100e:	2070      	movs	r0, #112	; 0x70
 8001010:	f001 f8f2 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE11_IC_1_ADDR, REG_SOUT_SOURCE11_IC_1_BYTE, R40_SOUT_SOURCE11_IC_1_Default );
 8001014:	4b7c      	ldr	r3, [pc, #496]	; (8001208 <default_download_IC_1+0x41c>)
 8001016:	2202      	movs	r2, #2
 8001018:	f24f 118b 	movw	r1, #61835	; 0xf18b
 800101c:	2070      	movs	r0, #112	; 0x70
 800101e:	f001 f8eb 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE12_IC_1_ADDR, REG_SOUT_SOURCE12_IC_1_BYTE, R41_SOUT_SOURCE12_IC_1_Default );
 8001022:	4b7a      	ldr	r3, [pc, #488]	; (800120c <default_download_IC_1+0x420>)
 8001024:	2202      	movs	r2, #2
 8001026:	f24f 118c 	movw	r1, #61836	; 0xf18c
 800102a:	2070      	movs	r0, #112	; 0x70
 800102c:	f001 f8e4 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE13_IC_1_ADDR, REG_SOUT_SOURCE13_IC_1_BYTE, R42_SOUT_SOURCE13_IC_1_Default );
 8001030:	4b77      	ldr	r3, [pc, #476]	; (8001210 <default_download_IC_1+0x424>)
 8001032:	2202      	movs	r2, #2
 8001034:	f24f 118d 	movw	r1, #61837	; 0xf18d
 8001038:	2070      	movs	r0, #112	; 0x70
 800103a:	f001 f8dd 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE14_IC_1_ADDR, REG_SOUT_SOURCE14_IC_1_BYTE, R43_SOUT_SOURCE14_IC_1_Default );
 800103e:	4b75      	ldr	r3, [pc, #468]	; (8001214 <default_download_IC_1+0x428>)
 8001040:	2202      	movs	r2, #2
 8001042:	f24f 118e 	movw	r1, #61838	; 0xf18e
 8001046:	2070      	movs	r0, #112	; 0x70
 8001048:	f001 f8d6 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE15_IC_1_ADDR, REG_SOUT_SOURCE15_IC_1_BYTE, R44_SOUT_SOURCE15_IC_1_Default );
 800104c:	4b72      	ldr	r3, [pc, #456]	; (8001218 <default_download_IC_1+0x42c>)
 800104e:	2202      	movs	r2, #2
 8001050:	f24f 118f 	movw	r1, #61839	; 0xf18f
 8001054:	2070      	movs	r0, #112	; 0x70
 8001056:	f001 f8cf 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE16_IC_1_ADDR, REG_SOUT_SOURCE16_IC_1_BYTE, R45_SOUT_SOURCE16_IC_1_Default );
 800105a:	4b70      	ldr	r3, [pc, #448]	; (800121c <default_download_IC_1+0x430>)
 800105c:	2202      	movs	r2, #2
 800105e:	f24f 1190 	movw	r1, #61840	; 0xf190
 8001062:	2070      	movs	r0, #112	; 0x70
 8001064:	f001 f8c8 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE17_IC_1_ADDR, REG_SOUT_SOURCE17_IC_1_BYTE, R46_SOUT_SOURCE17_IC_1_Default );
 8001068:	4b6d      	ldr	r3, [pc, #436]	; (8001220 <default_download_IC_1+0x434>)
 800106a:	2202      	movs	r2, #2
 800106c:	f24f 1191 	movw	r1, #61841	; 0xf191
 8001070:	2070      	movs	r0, #112	; 0x70
 8001072:	f001 f8c1 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE18_IC_1_ADDR, REG_SOUT_SOURCE18_IC_1_BYTE, R47_SOUT_SOURCE18_IC_1_Default );
 8001076:	4b6b      	ldr	r3, [pc, #428]	; (8001224 <default_download_IC_1+0x438>)
 8001078:	2202      	movs	r2, #2
 800107a:	f24f 1192 	movw	r1, #61842	; 0xf192
 800107e:	2070      	movs	r0, #112	; 0x70
 8001080:	f001 f8ba 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE19_IC_1_ADDR, REG_SOUT_SOURCE19_IC_1_BYTE, R48_SOUT_SOURCE19_IC_1_Default );
 8001084:	4b68      	ldr	r3, [pc, #416]	; (8001228 <default_download_IC_1+0x43c>)
 8001086:	2202      	movs	r2, #2
 8001088:	f24f 1193 	movw	r1, #61843	; 0xf193
 800108c:	2070      	movs	r0, #112	; 0x70
 800108e:	f001 f8b3 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE20_IC_1_ADDR, REG_SOUT_SOURCE20_IC_1_BYTE, R49_SOUT_SOURCE20_IC_1_Default );
 8001092:	4b66      	ldr	r3, [pc, #408]	; (800122c <default_download_IC_1+0x440>)
 8001094:	2202      	movs	r2, #2
 8001096:	f24f 1194 	movw	r1, #61844	; 0xf194
 800109a:	2070      	movs	r0, #112	; 0x70
 800109c:	f001 f8ac 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE21_IC_1_ADDR, REG_SOUT_SOURCE21_IC_1_BYTE, R50_SOUT_SOURCE21_IC_1_Default );
 80010a0:	4b63      	ldr	r3, [pc, #396]	; (8001230 <default_download_IC_1+0x444>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	f24f 1195 	movw	r1, #61845	; 0xf195
 80010a8:	2070      	movs	r0, #112	; 0x70
 80010aa:	f001 f8a5 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE22_IC_1_ADDR, REG_SOUT_SOURCE22_IC_1_BYTE, R51_SOUT_SOURCE22_IC_1_Default );
 80010ae:	4b61      	ldr	r3, [pc, #388]	; (8001234 <default_download_IC_1+0x448>)
 80010b0:	2202      	movs	r2, #2
 80010b2:	f24f 1196 	movw	r1, #61846	; 0xf196
 80010b6:	2070      	movs	r0, #112	; 0x70
 80010b8:	f001 f89e 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE23_IC_1_ADDR, REG_SOUT_SOURCE23_IC_1_BYTE, R52_SOUT_SOURCE23_IC_1_Default );
 80010bc:	4b5e      	ldr	r3, [pc, #376]	; (8001238 <default_download_IC_1+0x44c>)
 80010be:	2202      	movs	r2, #2
 80010c0:	f24f 1197 	movw	r1, #61847	; 0xf197
 80010c4:	2070      	movs	r0, #112	; 0x70
 80010c6:	f001 f897 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_0_0_IC_1_ADDR, REG_SERIAL_BYTE_0_0_IC_1_BYTE, R53_SERIAL_BYTE_0_0_IC_1_Default );
 80010ca:	4b5c      	ldr	r3, [pc, #368]	; (800123c <default_download_IC_1+0x450>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	f44f 4172 	mov.w	r1, #61952	; 0xf200
 80010d2:	2070      	movs	r0, #112	; 0x70
 80010d4:	f001 f890 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_4_0_IC_1_ADDR, REG_SERIAL_BYTE_4_0_IC_1_BYTE, R54_SERIAL_BYTE_4_0_IC_1_Default );
 80010d8:	4b59      	ldr	r3, [pc, #356]	; (8001240 <default_download_IC_1+0x454>)
 80010da:	2202      	movs	r2, #2
 80010dc:	f24f 2110 	movw	r1, #61968	; 0xf210
 80010e0:	2070      	movs	r0, #112	; 0x70
 80010e2:	f001 f889 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
 80010e6:	4b57      	ldr	r3, [pc, #348]	; (8001244 <default_download_IC_1+0x458>)
 80010e8:	f641 12f4 	movw	r2, #6644	; 0x19f4
 80010ec:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80010f0:	2070      	movs	r0, #112	; 0x70
 80010f2:	f001 f881 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, Param_Data_IC_1 );
 80010f6:	4b54      	ldr	r3, [pc, #336]	; (8001248 <default_download_IC_1+0x45c>)
 80010f8:	f641 32e8 	movw	r2, #7144	; 0x1be8
 80010fc:	2100      	movs	r1, #0
 80010fe:	2070      	movs	r0, #112	; 0x70
 8001100:	f001 f87a 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, DM1_DATA_ADDR_IC_1, DM1_DATA_SIZE_IC_1, DM1_DATA_Data_IC_1 );
 8001104:	4b51      	ldr	r3, [pc, #324]	; (800124c <default_download_IC_1+0x460>)
 8001106:	f44f 6208 	mov.w	r2, #2176	; 0x880
 800110a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800110e:	2070      	movs	r0, #112	; 0x70
 8001110:	f001 f872 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R58_KILL_CORE_IC_1_Default );
 8001114:	4b4e      	ldr	r3, [pc, #312]	; (8001250 <default_download_IC_1+0x464>)
 8001116:	2202      	movs	r2, #2
 8001118:	f24f 4103 	movw	r1, #62467	; 0xf403
 800111c:	2070      	movs	r0, #112	; 0x70
 800111e:	f001 f86b 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_ADDRESS_IC_1_ADDR, REG_START_ADDRESS_IC_1_BYTE, R59_START_ADDRESS_IC_1_Default );
 8001122:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <default_download_IC_1+0x468>)
 8001124:	2202      	movs	r2, #2
 8001126:	f24f 4104 	movw	r1, #62468	; 0xf404
 800112a:	2070      	movs	r0, #112	; 0x70
 800112c:	f001 f864 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_PULSE_IC_1_ADDR, REG_START_PULSE_IC_1_BYTE, R60_START_PULSE_IC_1_Default );
 8001130:	4b49      	ldr	r3, [pc, #292]	; (8001258 <default_download_IC_1+0x46c>)
 8001132:	2202      	movs	r2, #2
 8001134:	f24f 4101 	movw	r1, #62465	; 0xf401
 8001138:	2070      	movs	r0, #112	; 0x70
 800113a:	f001 f85d 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R61_START_CORE_IC_1_Default );
 800113e:	4b47      	ldr	r3, [pc, #284]	; (800125c <default_download_IC_1+0x470>)
 8001140:	2202      	movs	r2, #2
 8001142:	f24f 4102 	movw	r1, #62466	; 0xf402
 8001146:	2070      	movs	r0, #112	; 0x70
 8001148:	f001 f856 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R62_START_CORE_IC_1_Default );
 800114c:	4b44      	ldr	r3, [pc, #272]	; (8001260 <default_download_IC_1+0x474>)
 800114e:	2202      	movs	r2, #2
 8001150:	f24f 4102 	movw	r1, #62466	; 0xf402
 8001154:	2070      	movs	r0, #112	; 0x70
 8001156:	f001 f84f 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R63_START_DELAY_IC_1_SIZE, R63_START_DELAY_IC_1_Default );
 800115a:	4a42      	ldr	r2, [pc, #264]	; (8001264 <default_download_IC_1+0x478>)
 800115c:	2102      	movs	r1, #2
 800115e:	2070      	movs	r0, #112	; 0x70
 8001160:	f001 f86e 	bl	8002240 <SIGMA_WRITE_DELAY>
 8001164:	e080      	b.n	8001268 <default_download_IC_1+0x47c>
 8001166:	bf00      	nop
 8001168:	20003fa8 	.word	0x20003fa8
 800116c:	20003e5c 	.word	0x20003e5c
 8001170:	20003e60 	.word	0x20003e60
 8001174:	20003fac 	.word	0x20003fac
 8001178:	20003e64 	.word	0x20003e64
 800117c:	20003e68 	.word	0x20003e68
 8001180:	20003fb0 	.word	0x20003fb0
 8001184:	20003e6c 	.word	0x20003e6c
 8001188:	20003fb4 	.word	0x20003fb4
 800118c:	20003e70 	.word	0x20003e70
 8001190:	20003e74 	.word	0x20003e74
 8001194:	20003e78 	.word	0x20003e78
 8001198:	20003e7c 	.word	0x20003e7c
 800119c:	20003e80 	.word	0x20003e80
 80011a0:	20003e84 	.word	0x20003e84
 80011a4:	20003e88 	.word	0x20003e88
 80011a8:	20003fb8 	.word	0x20003fb8
 80011ac:	20003e8c 	.word	0x20003e8c
 80011b0:	20003e90 	.word	0x20003e90
 80011b4:	20003e94 	.word	0x20003e94
 80011b8:	20003e98 	.word	0x20003e98
 80011bc:	20003e9c 	.word	0x20003e9c
 80011c0:	20003ea0 	.word	0x20003ea0
 80011c4:	20003ea4 	.word	0x20003ea4
 80011c8:	20003ea8 	.word	0x20003ea8
 80011cc:	20003eac 	.word	0x20003eac
 80011d0:	20003eb0 	.word	0x20003eb0
 80011d4:	20003eb4 	.word	0x20003eb4
 80011d8:	20003eb8 	.word	0x20003eb8
 80011dc:	20003ebc 	.word	0x20003ebc
 80011e0:	20003ec0 	.word	0x20003ec0
 80011e4:	20003ec4 	.word	0x20003ec4
 80011e8:	20003ec8 	.word	0x20003ec8
 80011ec:	20003ecc 	.word	0x20003ecc
 80011f0:	20003ed0 	.word	0x20003ed0
 80011f4:	20003ed4 	.word	0x20003ed4
 80011f8:	20003ed8 	.word	0x20003ed8
 80011fc:	20003edc 	.word	0x20003edc
 8001200:	20003ee0 	.word	0x20003ee0
 8001204:	20003ee4 	.word	0x20003ee4
 8001208:	20003ee8 	.word	0x20003ee8
 800120c:	20003eec 	.word	0x20003eec
 8001210:	20003ef0 	.word	0x20003ef0
 8001214:	20003ef4 	.word	0x20003ef4
 8001218:	20003ef8 	.word	0x20003ef8
 800121c:	20003efc 	.word	0x20003efc
 8001220:	20003f00 	.word	0x20003f00
 8001224:	20003f04 	.word	0x20003f04
 8001228:	20003f08 	.word	0x20003f08
 800122c:	20003f0c 	.word	0x20003f0c
 8001230:	20003f10 	.word	0x20003f10
 8001234:	20003f14 	.word	0x20003f14
 8001238:	20003f18 	.word	0x20003f18
 800123c:	20003f1c 	.word	0x20003f1c
 8001240:	20003f20 	.word	0x20003f20
 8001244:	20000880 	.word	0x20000880
 8001248:	20002274 	.word	0x20002274
 800124c:	20000000 	.word	0x20000000
 8001250:	20003fbc 	.word	0x20003fbc
 8001254:	20003fc0 	.word	0x20003fc0
 8001258:	20003f24 	.word	0x20003f24
 800125c:	20003fc4 	.word	0x20003fc4
 8001260:	20003f28 	.word	0x20003f28
 8001264:	20003f2c 	.word	0x20003f2c
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R64_HIBERNATE_IC_1_Default );
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <default_download_IC_1+0x490>)
 800126a:	2202      	movs	r2, #2
 800126c:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8001270:	2070      	movs	r0, #112	; 0x70
 8001272:	f000 ffc1 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20003fc8 	.word	0x20003fc8

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b0cb      	sub	sp, #300	; 0x12c
 8001284:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	  uint16_t k = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
	  uint16_t pote_aux = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
	  uint16_t BandAddress[ADC_POT]; // Addresses of filters
	  uint32_t vol_data[30]; // Fixed volume values
	  uint32_t boost_data[30]; // Fixed boost loudness values

	  BandAddress[0] = MOD_BAND32_SEL_DCINPALG145X1VALUE_ADDR;
 8001292:	f44f 63d9 	mov.w	r3, #1736	; 0x6c8
 8001296:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
	  BandAddress[1] = MOD_BAND64_SEL_DCINPALG145X2VALUE_ADDR;
 800129a:	f240 63c9 	movw	r3, #1737	; 0x6c9
 800129e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	  BandAddress[2] = MOD_BAND128_SEL_DCINPALG145X3VALUE_ADDR;
 80012a2:	f240 63ca 	movw	r3, #1738	; 0x6ca
 80012a6:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
	  BandAddress[3] = MOD_BAND256_SEL_DCINPALG145X4VALUE_ADDR;
 80012aa:	f240 63cb 	movw	r3, #1739	; 0x6cb
 80012ae:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	  BandAddress[4] = MOD_BAND512_SEL_DCINPALG145X5VALUE_ADDR;
 80012b2:	f240 63cc 	movw	r3, #1740	; 0x6cc
 80012b6:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	  BandAddress[5] = MOD_BAND1K_SEL_DCINPALG145X6VALUE_ADDR;
 80012ba:	f240 63cd 	movw	r3, #1741	; 0x6cd
 80012be:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	  BandAddress[6] = MOD_BAND2K_SEL_DCINPALG145X7VALUE_ADDR;
 80012c2:	f240 63ce 	movw	r3, #1742	; 0x6ce
 80012c6:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
	  BandAddress[7] = MOD_BAND4K_SEL_DCINPALG145X8VALUE_ADDR;
 80012ca:	f240 63cf 	movw	r3, #1743	; 0x6cf
 80012ce:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
	  BandAddress[8] = MOD_BAND8K_SEL_DCINPALG145X9VALUE_ADDR;
 80012d2:	f44f 63da 	mov.w	r3, #1744	; 0x6d0
 80012d6:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
	  BandAddress[9] = MOD_BAND16K_SEL_DCINPALG145X10VALUE_ADDR;
 80012da:	f240 63d1 	movw	r3, #1745	; 0x6d1
 80012de:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
	  BandAddress[10] = MOD_BANDSUB_SEL_DCINPALG145X11VALUE_ADDR;
 80012e2:	f240 63d2 	movw	r3, #1746	; 0x6d2
 80012e6:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	  BandAddress[VOL_ARRAY] = MOD_VOL_GAINALGNS145X1GAIN_ADDR;
 80012ea:	f240 63d7 	movw	r3, #1751	; 0x6d7
 80012ee:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	  BandAddress[LOUD_LOW_ARRAY] = MOD_LOUD_ALG0_LEVEL0_ADDR;
 80012f2:	23b5      	movs	r3, #181	; 0xb5
 80012f4:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
	  BandAddress[LOUD_HIGH_ARRAY] = MOD_LOUD_ALG0_LEVEL1_ADDR;
 80012f8:	23b6      	movs	r3, #182	; 0xb6
 80012fa:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	  BandAddress[LOUD_GRL_ARRAY] = MOD_LOUD_SEL_DCINPALG145X12VALUE_ADDR;
 80012fe:	f240 63d3 	movw	r3, #1747	; 0x6d3
 8001302:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110

	  // 8.24 FixPoint
	  vol_data[29] = 0x01000000; // 0dB
 8001306:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800130a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  vol_data[28] = 0x00e42904; // -1dB
 800130e:	4b89      	ldr	r3, [pc, #548]	; (8001534 <main+0x2b4>)
 8001310:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  vol_data[27] = 0x00cb5918; // -2dB
 8001314:	4b88      	ldr	r3, [pc, #544]	; (8001538 <main+0x2b8>)
 8001316:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	  vol_data[26] = 0x00b53bee; // -3dB
 800131a:	4b88      	ldr	r3, [pc, #544]	; (800153c <main+0x2bc>)
 800131c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	  vol_data[25] = 0x00a1866a; // -4dB
 8001320:	4b87      	ldr	r3, [pc, #540]	; (8001540 <main+0x2c0>)
 8001322:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	  vol_data[24] = 0x008ff598; // -5dB
 8001326:	4b87      	ldr	r3, [pc, #540]	; (8001544 <main+0x2c4>)
 8001328:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	  vol_data[23] = 0x00804dce; // -6dB
 800132c:	4b86      	ldr	r3, [pc, #536]	; (8001548 <main+0x2c8>)
 800132e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  vol_data[22] = 0x006fbf80; // -7dB (-7.2dB)
 8001332:	4b86      	ldr	r3, [pc, #536]	; (800154c <main+0x2cc>)
 8001334:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  vol_data[21] = 0x0065ea58; // -8dB
 8001338:	4b85      	ldr	r3, [pc, #532]	; (8001550 <main+0x2d0>)
 800133a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	  vol_data[20] = 0x005ad50c; // -9dB
 800133e:	4b85      	ldr	r3, [pc, #532]	; (8001554 <main+0x2d4>)
 8001340:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  vol_data[19] = 0x0050f44c; // -10dB
 8001344:	4b84      	ldr	r3, [pc, #528]	; (8001558 <main+0x2d8>)
 8001346:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  vol_data[18] = 0x0048268c; // -11dB
 800134a:	4b84      	ldr	r3, [pc, #528]	; (800155c <main+0x2dc>)
 800134c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	  vol_data[17] = 0x00404de6; // -12dB
 8001350:	4b83      	ldr	r3, [pc, #524]	; (8001560 <main+0x2e0>)
 8001352:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	  vol_data[16] = 0x00394fae; // -13dB
 8001356:	4b83      	ldr	r3, [pc, #524]	; (8001564 <main+0x2e4>)
 8001358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	  vol_data[15] = 0x00331426; // -14dB
 800135c:	4b82      	ldr	r3, [pc, #520]	; (8001568 <main+0x2e8>)
 800135e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	  vol_data[14] = 0x002d8620; // -15dB
 8001362:	4b82      	ldr	r3, [pc, #520]	; (800156c <main+0x2ec>)
 8001364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	  vol_data[13] = 0x002892c0; // -16dB
 8001368:	4b81      	ldr	r3, [pc, #516]	; (8001570 <main+0x2f0>)
 800136a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	  vol_data[12] = 0x00242934; // -17dB
 800136e:	4b81      	ldr	r3, [pc, #516]	; (8001574 <main+0x2f4>)
 8001370:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	  vol_data[11] = 0x00203a7e; // -18dB
 8001374:	4b80      	ldr	r3, [pc, #512]	; (8001578 <main+0x2f8>)
 8001376:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	  vol_data[10] = 0x001cb942; // -19dB
 800137a:	4b80      	ldr	r3, [pc, #512]	; (800157c <main+0x2fc>)
 800137c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  vol_data[9] = 0x00199998; // -20dB
 8001380:	4b7f      	ldr	r3, [pc, #508]	; (8001580 <main+0x300>)
 8001382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  vol_data[8] = 0x0016d0e6; // -21dB
 8001386:	4b7f      	ldr	r3, [pc, #508]	; (8001584 <main+0x304>)
 8001388:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  vol_data[7] = 0x001455b4; // -22dB
 800138c:	4b7e      	ldr	r3, [pc, #504]	; (8001588 <main+0x308>)
 800138e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  vol_data[6] = 0x00121f96; // -23dB
 8001392:	4b7e      	ldr	r3, [pc, #504]	; (800158c <main+0x30c>)
 8001394:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  vol_data[5] = 0x0010270a; // -24dB
 8001398:	4b7d      	ldr	r3, [pc, #500]	; (8001590 <main+0x310>)
 800139a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  vol_data[4] = 0x000e655c; // -25dB
 800139e:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <main+0x314>)
 80013a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  vol_data[3] = 0x000cd494; // -26dB
 80013a4:	4b7c      	ldr	r3, [pc, #496]	; (8001598 <main+0x318>)
 80013a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  vol_data[2] = 0x000b6f62; // -27dB
 80013aa:	4b7c      	ldr	r3, [pc, #496]	; (800159c <main+0x31c>)
 80013ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  vol_data[1] = 0x000a3108; // -28dB
 80013b0:	4b7b      	ldr	r3, [pc, #492]	; (80015a0 <main+0x320>)
 80013b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  vol_data[0] = 0x0009154e; // -29dB
 80013b6:	4b7b      	ldr	r3, [pc, #492]	; (80015a4 <main+0x324>)
 80013b8:	67fb      	str	r3, [r7, #124]	; 0x7c

	  // 8.24 FixPoint
	  boost_data[29] = 0x02800000; // 2.50
 80013ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013c2:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
 80013c6:	675a      	str	r2, [r3, #116]	; 0x74
	  boost_data[28] = 0x02666666; // 2.40
 80013c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013d0:	4a75      	ldr	r2, [pc, #468]	; (80015a8 <main+0x328>)
 80013d2:	671a      	str	r2, [r3, #112]	; 0x70
	  boost_data[27] = 0x02570a3c; // 2.34
 80013d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013dc:	4a73      	ldr	r2, [pc, #460]	; (80015ac <main+0x32c>)
 80013de:	66da      	str	r2, [r3, #108]	; 0x6c
	  boost_data[26] = 0x02451eb8; // 2.27
 80013e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013e8:	4a71      	ldr	r2, [pc, #452]	; (80015b0 <main+0x330>)
 80013ea:	669a      	str	r2, [r3, #104]	; 0x68
	  boost_data[25] = 0x02333332; // 2.20
 80013ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013f4:	4a6f      	ldr	r2, [pc, #444]	; (80015b4 <main+0x334>)
 80013f6:	665a      	str	r2, [r3, #100]	; 0x64
	  boost_data[24] = 0x022147ae; // 2.13
 80013f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001400:	4a6d      	ldr	r2, [pc, #436]	; (80015b8 <main+0x338>)
 8001402:	661a      	str	r2, [r3, #96]	; 0x60
	  boost_data[23] = 0x020f5c28; // 2.06
 8001404:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001408:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800140c:	4a6b      	ldr	r2, [pc, #428]	; (80015bc <main+0x33c>)
 800140e:	65da      	str	r2, [r3, #92]	; 0x5c
	  boost_data[22] = 0x02000000; // 2.00
 8001410:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001414:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001418:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800141c:	659a      	str	r2, [r3, #88]	; 0x58
	  boost_data[21] = 0x01ee147a; // 1.93
 800141e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001422:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001426:	4a66      	ldr	r2, [pc, #408]	; (80015c0 <main+0x340>)
 8001428:	655a      	str	r2, [r3, #84]	; 0x54
	  boost_data[20] = 0x01dc28f4; // 1.86
 800142a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800142e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001432:	4a64      	ldr	r2, [pc, #400]	; (80015c4 <main+0x344>)
 8001434:	651a      	str	r2, [r3, #80]	; 0x50
	  boost_data[19] = 0x01ca3d70; // 1.79
 8001436:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800143a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800143e:	4a62      	ldr	r2, [pc, #392]	; (80015c8 <main+0x348>)
 8001440:	64da      	str	r2, [r3, #76]	; 0x4c
	  boost_data[18] = 0x01b851ea; // 1.72
 8001442:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001446:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800144a:	4a60      	ldr	r2, [pc, #384]	; (80015cc <main+0x34c>)
 800144c:	649a      	str	r2, [r3, #72]	; 0x48
	  boost_data[17] = 0x01a8f5c2; // 1.66
 800144e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001452:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001456:	4a5e      	ldr	r2, [pc, #376]	; (80015d0 <main+0x350>)
 8001458:	645a      	str	r2, [r3, #68]	; 0x44
	  boost_data[16] = 0x01970a3c; // 1.59
 800145a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800145e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001462:	4a5c      	ldr	r2, [pc, #368]	; (80015d4 <main+0x354>)
 8001464:	641a      	str	r2, [r3, #64]	; 0x40
	  boost_data[15] = 0x01851eb8; // 1.52
 8001466:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800146a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800146e:	4a5a      	ldr	r2, [pc, #360]	; (80015d8 <main+0x358>)
 8001470:	63da      	str	r2, [r3, #60]	; 0x3c
	  boost_data[14] = 0x01733332; // 1.45
 8001472:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001476:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800147a:	4a58      	ldr	r2, [pc, #352]	; (80015dc <main+0x35c>)
 800147c:	639a      	str	r2, [r3, #56]	; 0x38
	  boost_data[13] = 0x016147ae; // 1.38
 800147e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001482:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001486:	4a56      	ldr	r2, [pc, #344]	; (80015e0 <main+0x360>)
 8001488:	635a      	str	r2, [r3, #52]	; 0x34
	  boost_data[12] = 0x0151eb84; // 1.32
 800148a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800148e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001492:	4a54      	ldr	r2, [pc, #336]	; (80015e4 <main+0x364>)
 8001494:	631a      	str	r2, [r3, #48]	; 0x30
	  boost_data[11] = 0x01400000; // 1.25
 8001496:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800149a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800149e:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
	  boost_data[10] = 0x012e147a; // 1.18
 80014a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014ac:	4a4e      	ldr	r2, [pc, #312]	; (80015e8 <main+0x368>)
 80014ae:	629a      	str	r2, [r3, #40]	; 0x28
	  boost_data[9] =  0x011c28f4; // 1.11
 80014b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014b8:	4a4c      	ldr	r2, [pc, #304]	; (80015ec <main+0x36c>)
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24
	  boost_data[8] =  0x010a3d70; // 1.04
 80014bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014c4:	4a4a      	ldr	r2, [pc, #296]	; (80015f0 <main+0x370>)
 80014c6:	621a      	str	r2, [r3, #32]
	  boost_data[7] =  0x00fae146; // 0.98
 80014c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014d0:	4a48      	ldr	r2, [pc, #288]	; (80015f4 <main+0x374>)
 80014d2:	61da      	str	r2, [r3, #28]
	  boost_data[6] =  0x00e8f5c2; // 0.91
 80014d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014dc:	4a46      	ldr	r2, [pc, #280]	; (80015f8 <main+0x378>)
 80014de:	619a      	str	r2, [r3, #24]
	  boost_data[5] =  0x00d70a3c; // 0.84
 80014e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014e8:	4a44      	ldr	r2, [pc, #272]	; (80015fc <main+0x37c>)
 80014ea:	615a      	str	r2, [r3, #20]
	  boost_data[4] =  0x00c51eb8; // 0.77
 80014ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014f4:	4a42      	ldr	r2, [pc, #264]	; (8001600 <main+0x380>)
 80014f6:	611a      	str	r2, [r3, #16]
	  boost_data[3] =  0x00b33332; // 0.70
 80014f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001500:	4a40      	ldr	r2, [pc, #256]	; (8001604 <main+0x384>)
 8001502:	60da      	str	r2, [r3, #12]
	  boost_data[2] =  0x00a3d70a; // 0.64
 8001504:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001508:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800150c:	4a3e      	ldr	r2, [pc, #248]	; (8001608 <main+0x388>)
 800150e:	609a      	str	r2, [r3, #8]
	  boost_data[1] =  0x0091eb84; // 0.57
 8001510:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001514:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001518:	4a3c      	ldr	r2, [pc, #240]	; (800160c <main+0x38c>)
 800151a:	605a      	str	r2, [r3, #4]
	  boost_data[0] =  0x00800000; // 0.50
 800151c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001520:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001524:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001528:	601a      	str	r2, [r3, #0]

	  for(k=0; k<30; k++)
 800152a:	2300      	movs	r3, #0
 800152c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001530:	e0bd      	b.n	80016ae <main+0x42e>
 8001532:	bf00      	nop
 8001534:	00e42904 	.word	0x00e42904
 8001538:	00cb5918 	.word	0x00cb5918
 800153c:	00b53bee 	.word	0x00b53bee
 8001540:	00a1866a 	.word	0x00a1866a
 8001544:	008ff598 	.word	0x008ff598
 8001548:	00804dce 	.word	0x00804dce
 800154c:	006fbf80 	.word	0x006fbf80
 8001550:	0065ea58 	.word	0x0065ea58
 8001554:	005ad50c 	.word	0x005ad50c
 8001558:	0050f44c 	.word	0x0050f44c
 800155c:	0048268c 	.word	0x0048268c
 8001560:	00404de6 	.word	0x00404de6
 8001564:	00394fae 	.word	0x00394fae
 8001568:	00331426 	.word	0x00331426
 800156c:	002d8620 	.word	0x002d8620
 8001570:	002892c0 	.word	0x002892c0
 8001574:	00242934 	.word	0x00242934
 8001578:	00203a7e 	.word	0x00203a7e
 800157c:	001cb942 	.word	0x001cb942
 8001580:	00199998 	.word	0x00199998
 8001584:	0016d0e6 	.word	0x0016d0e6
 8001588:	001455b4 	.word	0x001455b4
 800158c:	00121f96 	.word	0x00121f96
 8001590:	0010270a 	.word	0x0010270a
 8001594:	000e655c 	.word	0x000e655c
 8001598:	000cd494 	.word	0x000cd494
 800159c:	000b6f62 	.word	0x000b6f62
 80015a0:	000a3108 	.word	0x000a3108
 80015a4:	0009154e 	.word	0x0009154e
 80015a8:	02666666 	.word	0x02666666
 80015ac:	02570a3c 	.word	0x02570a3c
 80015b0:	02451eb8 	.word	0x02451eb8
 80015b4:	02333332 	.word	0x02333332
 80015b8:	022147ae 	.word	0x022147ae
 80015bc:	020f5c28 	.word	0x020f5c28
 80015c0:	01ee147a 	.word	0x01ee147a
 80015c4:	01dc28f4 	.word	0x01dc28f4
 80015c8:	01ca3d70 	.word	0x01ca3d70
 80015cc:	01b851ea 	.word	0x01b851ea
 80015d0:	01a8f5c2 	.word	0x01a8f5c2
 80015d4:	01970a3c 	.word	0x01970a3c
 80015d8:	01851eb8 	.word	0x01851eb8
 80015dc:	01733332 	.word	0x01733332
 80015e0:	016147ae 	.word	0x016147ae
 80015e4:	0151eb84 	.word	0x0151eb84
 80015e8:	012e147a 	.word	0x012e147a
 80015ec:	011c28f4 	.word	0x011c28f4
 80015f0:	010a3d70 	.word	0x010a3d70
 80015f4:	00fae146 	.word	0x00fae146
 80015f8:	00e8f5c2 	.word	0x00e8f5c2
 80015fc:	00d70a3c 	.word	0x00d70a3c
 8001600:	00c51eb8 	.word	0x00c51eb8
 8001604:	00b33332 	.word	0x00b33332
 8001608:	00a3d70a 	.word	0x00a3d70a
 800160c:	0091eb84 	.word	0x0091eb84
	  {
		  log_in_table[k] = 4096.0*log10(1.0+(3.0*k/10.0));
 8001610:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff31 	bl	800047c <__aeabi_i2d>
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	4bbb      	ldr	r3, [pc, #748]	; (800190c <main+0x68c>)
 8001620:	f7fe ff96 	bl	8000550 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4bb7      	ldr	r3, [pc, #732]	; (8001910 <main+0x690>)
 8001632:	f7ff f8b7 	bl	80007a4 <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	4bb4      	ldr	r3, [pc, #720]	; (8001914 <main+0x694>)
 8001644:	f7fe fdce 	bl	80001e4 <__adddf3>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	ec43 2b17 	vmov	d7, r2, r3
 8001650:	eeb0 0a47 	vmov.f32	s0, s14
 8001654:	eef0 0a67 	vmov.f32	s1, s15
 8001658:	f003 ffee 	bl	8005638 <log10>
 800165c:	ec51 0b10 	vmov	r0, r1, d0
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	4bac      	ldr	r3, [pc, #688]	; (8001918 <main+0x698>)
 8001666:	f7fe ff73 	bl	8000550 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	f8b7 4116 	ldrh.w	r4, [r7, #278]	; 0x116
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff fa1b 	bl	8000ab0 <__aeabi_d2uiz>
 800167a:	4603      	mov	r3, r0
 800167c:	b29a      	uxth	r2, r3
 800167e:	4ba7      	ldr	r3, [pc, #668]	; (800191c <main+0x69c>)
 8001680:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  linear_in_table[k] = 4096*k/30;
 8001684:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001688:	031b      	lsls	r3, r3, #12
 800168a:	4aa5      	ldr	r2, [pc, #660]	; (8001920 <main+0x6a0>)
 800168c:	fb82 1203 	smull	r1, r2, r2, r3
 8001690:	441a      	add	r2, r3
 8001692:	1112      	asrs	r2, r2, #4
 8001694:	17db      	asrs	r3, r3, #31
 8001696:	1ad2      	subs	r2, r2, r3
 8001698:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800169c:	b291      	uxth	r1, r2
 800169e:	4aa1      	ldr	r2, [pc, #644]	; (8001924 <main+0x6a4>)
 80016a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(k=0; k<30; k++)
 80016a4:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80016a8:	3301      	adds	r3, #1
 80016aa:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 80016ae:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80016b2:	2b1d      	cmp	r3, #29
 80016b4:	d9ac      	bls.n	8001610 <main+0x390>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b6:	f001 f955 	bl	8002964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ba:	f000 fa97 	bl	8001bec <SystemClock_Config>
//  MX_I2C3_Init();
//  MX_TIM2_Init();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016be:	f000 fd0f 	bl	80020e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80016c2:	f000 fced 	bl	80020a0 <MX_DMA_Init>
  MX_I2C2_Init();
 80016c6:	f000 fc41 	bl	8001f4c <MX_I2C2_Init>
  MX_I2C3_Init();
 80016ca:	f000 fc6d 	bl	8001fa8 <MX_I2C3_Init>
  MX_ADC1_Init();
 80016ce:	f000 faf9 	bl	8001cc4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80016d2:	f000 fc0d 	bl	8001ef0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80016d6:	f000 fc95 	bl	8002004 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Disable DSP
  HAL_GPIO_WritePin(nRST_DSP_GPIO_Port, nRST_DSP_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e0:	4891      	ldr	r0, [pc, #580]	; (8001928 <main+0x6a8>)
 80016e2:	f002 fbc3 	bl	8003e6c <HAL_GPIO_WritePin>

  // Disable CLK
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ec:	488e      	ldr	r0, [pc, #568]	; (8001928 <main+0x6a8>)
 80016ee:	f002 fbbd 	bl	8003e6c <HAL_GPIO_WritePin>

  // Configure Sampling Rate SR = Standard => 0
  //							  Double   => 1
  HAL_GPIO_WritePin(SR_GPIO_Port, SR_Pin, GPIO_PIN_SET);
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016f8:	488c      	ldr	r0, [pc, #560]	; (800192c <main+0x6ac>)
 80016fa:	f002 fbb7 	bl	8003e6c <HAL_GPIO_WritePin>
  // Configure System Clock SCKO1 CSEL = 0 (default)
  HAL_GPIO_WritePin(CSEL_GPIO_Port, CSEL_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001704:	4889      	ldr	r0, [pc, #548]	; (800192c <main+0x6ac>)
 8001706:	f002 fbb1 	bl	8003e6c <HAL_GPIO_WritePin>
  // Configure Sampling Frequency Group = 32KHz => 10
  HAL_GPIO_WritePin(FS2_GPIO_Port, FS2_Pin, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001710:	4886      	ldr	r0, [pc, #536]	; (800192c <main+0x6ac>)
 8001712:	f002 fbab 	bl	8003e6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FS1_GPIO_Port, FS1_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171c:	4883      	ldr	r0, [pc, #524]	; (800192c <main+0x6ac>)
 800171e:	f002 fba5 	bl	8003e6c <HAL_GPIO_WritePin>

  // Enable CLK
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_SET);
 8001722:	2201      	movs	r2, #1
 8001724:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001728:	487f      	ldr	r0, [pc, #508]	; (8001928 <main+0x6a8>)
 800172a:	f002 fb9f 	bl	8003e6c <HAL_GPIO_WritePin>

  HAL_Delay(500);
 800172e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001732:	f001 f989 	bl	8002a48 <HAL_Delay>

  // Configure DAC format to I2S 16-24 bit, slow roll-off
  auxData[0] = 0b00101000;
 8001736:	4b7e      	ldr	r3, [pc, #504]	; (8001930 <main+0x6b0>)
 8001738:	2228      	movs	r2, #40	; 0x28
 800173a:	701a      	strb	r2, [r3, #0]
  auxData[1] = 0x00;
 800173c:	4b7c      	ldr	r3, [pc, #496]	; (8001930 <main+0x6b0>)
 800173e:	2200      	movs	r2, #0
 8001740:	705a      	strb	r2, [r3, #1]
  stat = HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, 0x09, 1, auxData, 1, 1000);
 8001742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001746:	9302      	str	r3, [sp, #8]
 8001748:	2301      	movs	r3, #1
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	4b78      	ldr	r3, [pc, #480]	; (8001930 <main+0x6b0>)
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2301      	movs	r3, #1
 8001752:	2209      	movs	r2, #9
 8001754:	2198      	movs	r1, #152	; 0x98
 8001756:	4877      	ldr	r0, [pc, #476]	; (8001934 <main+0x6b4>)
 8001758:	f002 fce6 	bl	8004128 <HAL_I2C_Mem_Write>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	4b75      	ldr	r3, [pc, #468]	; (8001938 <main+0x6b8>)
 8001762:	701a      	strb	r2, [r3, #0]

  auxData[0] = 0b00101001;
 8001764:	4b72      	ldr	r3, [pc, #456]	; (8001930 <main+0x6b0>)
 8001766:	2229      	movs	r2, #41	; 0x29
 8001768:	701a      	strb	r2, [r3, #0]
  auxData[1] = 0x00;
 800176a:	4b71      	ldr	r3, [pc, #452]	; (8001930 <main+0x6b0>)
 800176c:	2200      	movs	r2, #0
 800176e:	705a      	strb	r2, [r3, #1]
  stat = HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, 0x0A, 1, auxData, 1, 1000);
 8001770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001774:	9302      	str	r3, [sp, #8]
 8001776:	2301      	movs	r3, #1
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	4b6d      	ldr	r3, [pc, #436]	; (8001930 <main+0x6b0>)
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2301      	movs	r3, #1
 8001780:	220a      	movs	r2, #10
 8001782:	2198      	movs	r1, #152	; 0x98
 8001784:	486b      	ldr	r0, [pc, #428]	; (8001934 <main+0x6b4>)
 8001786:	f002 fccf 	bl	8004128 <HAL_I2C_Mem_Write>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	4b6a      	ldr	r3, [pc, #424]	; (8001938 <main+0x6b8>)
 8001790:	701a      	strb	r2, [r3, #0]

  // Configure DAC over-sampling wide, sharp roll-off
  auxData[0] = 0b10000000;
 8001792:	4b67      	ldr	r3, [pc, #412]	; (8001930 <main+0x6b0>)
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	701a      	strb	r2, [r3, #0]
  auxData[1] = 0x00;
 8001798:	4b65      	ldr	r3, [pc, #404]	; (8001930 <main+0x6b0>)
 800179a:	2200      	movs	r2, #0
 800179c:	705a      	strb	r2, [r3, #1]
  stat = HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, 0x0C, 1, auxData, 1, 1000);
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	2301      	movs	r3, #1
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	4b61      	ldr	r3, [pc, #388]	; (8001930 <main+0x6b0>)
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2301      	movs	r3, #1
 80017ae:	220c      	movs	r2, #12
 80017b0:	2198      	movs	r1, #152	; 0x98
 80017b2:	4860      	ldr	r0, [pc, #384]	; (8001934 <main+0x6b4>)
 80017b4:	f002 fcb8 	bl	8004128 <HAL_I2C_Mem_Write>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b5e      	ldr	r3, [pc, #376]	; (8001938 <main+0x6b8>)
 80017be:	701a      	strb	r2, [r3, #0]

  // Enable DSP
  HAL_GPIO_WritePin(nRST_DSP_GPIO_Port, nRST_DSP_Pin, GPIO_PIN_SET);
 80017c0:	2201      	movs	r2, #1
 80017c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017c6:	4858      	ldr	r0, [pc, #352]	; (8001928 <main+0x6a8>)
 80017c8:	f002 fb50 	bl	8003e6c <HAL_GPIO_WritePin>

  HAL_Delay(500);
 80017cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017d0:	f001 f93a 	bl	8002a48 <HAL_Delay>

  default_download_IC_1();
 80017d4:	f7ff fb0a 	bl	8000dec <default_download_IC_1>
  HAL_Delay(500);
 80017d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017dc:	f001 f934 	bl	8002a48 <HAL_Delay>

  //Configure ADCs clock settings
  auxData[0] = 0b01000000;
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <main+0x6b0>)
 80017e2:	2240      	movs	r2, #64	; 0x40
 80017e4:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c1, ADC_ADDR, 0x20, 1, auxData, 1, 1000);
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ea:	9302      	str	r3, [sp, #8]
 80017ec:	2301      	movs	r3, #1
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <main+0x6b0>)
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2301      	movs	r3, #1
 80017f6:	2220      	movs	r2, #32
 80017f8:	2194      	movs	r1, #148	; 0x94
 80017fa:	4850      	ldr	r0, [pc, #320]	; (800193c <main+0x6bc>)
 80017fc:	f002 fc94 	bl	8004128 <HAL_I2C_Mem_Write>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	4b4c      	ldr	r3, [pc, #304]	; (8001938 <main+0x6b8>)
 8001806:	701a      	strb	r2, [r3, #0]

  auxData[0] = 0b00000001;
 8001808:	4b49      	ldr	r3, [pc, #292]	; (8001930 <main+0x6b0>)
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c1, ADC_ADDR, 0x0D, 1, auxData, 1, 1000);
 800180e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001812:	9302      	str	r3, [sp, #8]
 8001814:	2301      	movs	r3, #1
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	4b45      	ldr	r3, [pc, #276]	; (8001930 <main+0x6b0>)
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2301      	movs	r3, #1
 800181e:	220d      	movs	r2, #13
 8001820:	2194      	movs	r1, #148	; 0x94
 8001822:	4846      	ldr	r0, [pc, #280]	; (800193c <main+0x6bc>)
 8001824:	f002 fc80 	bl	8004128 <HAL_I2C_Mem_Write>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	4b42      	ldr	r3, [pc, #264]	; (8001938 <main+0x6b8>)
 800182e:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c2, ADC_ADDR, 0x0D, 1, auxData, 1, 1000);
 8001830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001834:	9302      	str	r3, [sp, #8]
 8001836:	2301      	movs	r3, #1
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <main+0x6b0>)
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2301      	movs	r3, #1
 8001840:	220d      	movs	r2, #13
 8001842:	2194      	movs	r1, #148	; 0x94
 8001844:	483e      	ldr	r0, [pc, #248]	; (8001940 <main+0x6c0>)
 8001846:	f002 fc6f 	bl	8004128 <HAL_I2C_Mem_Write>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <main+0x6b8>)
 8001850:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c3, ADC_ADDR, 0x0D, 1, auxData, 1, 1000);
 8001852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001856:	9302      	str	r3, [sp, #8]
 8001858:	2301      	movs	r3, #1
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	4b34      	ldr	r3, [pc, #208]	; (8001930 <main+0x6b0>)
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2301      	movs	r3, #1
 8001862:	220d      	movs	r2, #13
 8001864:	2194      	movs	r1, #148	; 0x94
 8001866:	4833      	ldr	r0, [pc, #204]	; (8001934 <main+0x6b4>)
 8001868:	f002 fc5e 	bl	8004128 <HAL_I2C_Mem_Write>
 800186c:	4603      	mov	r3, r0
 800186e:	461a      	mov	r2, r3
 8001870:	4b31      	ldr	r3, [pc, #196]	; (8001938 <main+0x6b8>)
 8001872:	701a      	strb	r2, [r3, #0]

  stat = HAL_I2C_Mem_Write(&hi2c1, ADC_ADDR, 0x0E, 1, auxData, 1, 1000);
 8001874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	2301      	movs	r3, #1
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <main+0x6b0>)
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2301      	movs	r3, #1
 8001884:	220e      	movs	r2, #14
 8001886:	2194      	movs	r1, #148	; 0x94
 8001888:	482c      	ldr	r0, [pc, #176]	; (800193c <main+0x6bc>)
 800188a:	f002 fc4d 	bl	8004128 <HAL_I2C_Mem_Write>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	4b29      	ldr	r3, [pc, #164]	; (8001938 <main+0x6b8>)
 8001894:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c2, ADC_ADDR, 0x0E, 1, auxData, 1, 1000);
 8001896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189a:	9302      	str	r3, [sp, #8]
 800189c:	2301      	movs	r3, #1
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <main+0x6b0>)
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2301      	movs	r3, #1
 80018a6:	220e      	movs	r2, #14
 80018a8:	2194      	movs	r1, #148	; 0x94
 80018aa:	4825      	ldr	r0, [pc, #148]	; (8001940 <main+0x6c0>)
 80018ac:	f002 fc3c 	bl	8004128 <HAL_I2C_Mem_Write>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b20      	ldr	r3, [pc, #128]	; (8001938 <main+0x6b8>)
 80018b6:	701a      	strb	r2, [r3, #0]
  stat = HAL_I2C_Mem_Write(&hi2c3, ADC_ADDR, 0x0E, 1, auxData, 1, 1000);
 80018b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018bc:	9302      	str	r3, [sp, #8]
 80018be:	2301      	movs	r3, #1
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <main+0x6b0>)
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2301      	movs	r3, #1
 80018c8:	220e      	movs	r2, #14
 80018ca:	2194      	movs	r1, #148	; 0x94
 80018cc:	4819      	ldr	r0, [pc, #100]	; (8001934 <main+0x6b4>)
 80018ce:	f002 fc2b 	bl	8004128 <HAL_I2C_Mem_Write>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <main+0x6b8>)
 80018d8:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start(&htim2);
 80018da:	481a      	ldr	r0, [pc, #104]	; (8001944 <main+0x6c4>)
 80018dc:	f003 fbd0 	bl	8005080 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, value, ADC_POT);
 80018e0:	220f      	movs	r2, #15
 80018e2:	4919      	ldr	r1, [pc, #100]	; (8001948 <main+0x6c8>)
 80018e4:	4819      	ldr	r0, [pc, #100]	; (800194c <main+0x6cc>)
 80018e6:	f001 f917 	bl	8002b18 <HAL_ADC_Start_DMA>

  HAL_Delay(250);
 80018ea:	20fa      	movs	r0, #250	; 0xfa
 80018ec:	f001 f8ac 	bl	8002a48 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  aux[0] = 0x00;
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <main+0x6d0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
	  aux[1] = 0x00;
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <main+0x6d0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	705a      	strb	r2, [r3, #1]
	  aux[2] = 0x00;
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <main+0x6d0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	709a      	strb	r2, [r3, #2]

	  for(k=0; k<VOL_ARRAY; k++) // Filters 32Hz - 16KHz + Subwoofer
 8001902:	2300      	movs	r3, #0
 8001904:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001908:	e04e      	b.n	80019a8 <main+0x728>
 800190a:	bf00      	nop
 800190c:	40080000 	.word	0x40080000
 8001910:	40240000 	.word	0x40240000
 8001914:	3ff00000 	.word	0x3ff00000
 8001918:	40b00000 	.word	0x40b00000
 800191c:	2000421c 	.word	0x2000421c
 8001920:	88888889 	.word	0x88888889
 8001924:	20004258 	.word	0x20004258
 8001928:	40020400 	.word	0x40020400
 800192c:	40020000 	.word	0x40020000
 8001930:	200041bc 	.word	0x200041bc
 8001934:	2000411c 	.word	0x2000411c
 8001938:	200041b8 	.word	0x200041b8
 800193c:	20004074 	.word	0x20004074
 8001940:	200040c8 	.word	0x200040c8
 8001944:	20004170 	.word	0x20004170
 8001948:	200041c0 	.word	0x200041c0
 800194c:	20003fcc 	.word	0x20003fcc
 8001950:	200042b4 	.word	0x200042b4
	  {
		  if(flag[k] == 1)
 8001954:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001958:	4aa1      	ldr	r2, [pc, #644]	; (8001be0 <main+0x960>)
 800195a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d11d      	bne.n	800199e <main+0x71e>
		  {
			  flag[k] = 0;
 8001962:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001966:	4a9e      	ldr	r2, [pc, #632]	; (8001be0 <main+0x960>)
 8001968:	2100      	movs	r1, #0
 800196a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  aux[3] = 29 - pote[k];
 800196e:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001972:	4a9c      	ldr	r2, [pc, #624]	; (8001be4 <main+0x964>)
 8001974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f1c3 031d 	rsb	r3, r3, #29
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b99      	ldr	r3, [pc, #612]	; (8001be8 <main+0x968>)
 8001982:	70da      	strb	r2, [r3, #3]
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, BandAddress[k], 4, aux);
 8001984:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800198e:	443b      	add	r3, r7
 8001990:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8001994:	4b94      	ldr	r3, [pc, #592]	; (8001be8 <main+0x968>)
 8001996:	2204      	movs	r2, #4
 8001998:	2070      	movs	r0, #112	; 0x70
 800199a:	f000 fc2d 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	  for(k=0; k<VOL_ARRAY; k++) // Filters 32Hz - 16KHz + Subwoofer
 800199e:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80019a2:	3301      	adds	r3, #1
 80019a4:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 80019a8:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80019ac:	2b0a      	cmp	r3, #10
 80019ae:	d9d1      	bls.n	8001954 <main+0x6d4>
		  }
	  }

	  aux[0] = 0x00;
 80019b0:	4b8d      	ldr	r3, [pc, #564]	; (8001be8 <main+0x968>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
	  aux[1] = 0x00;
 80019b6:	4b8c      	ldr	r3, [pc, #560]	; (8001be8 <main+0x968>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	705a      	strb	r2, [r3, #1]
	  aux[2] = 0x00;
 80019bc:	4b8a      	ldr	r3, [pc, #552]	; (8001be8 <main+0x968>)
 80019be:	2200      	movs	r2, #0
 80019c0:	709a      	strb	r2, [r3, #2]

	  if(flag[VOL_ARRAY] == 1) // Volume
 80019c2:	4b87      	ldr	r3, [pc, #540]	; (8001be0 <main+0x960>)
 80019c4:	8adb      	ldrh	r3, [r3, #22]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d13e      	bne.n	8001a48 <main+0x7c8>
	  {
		  flag[VOL_ARRAY] = 0;
 80019ca:	4b85      	ldr	r3, [pc, #532]	; (8001be0 <main+0x960>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	82da      	strh	r2, [r3, #22]
		  pote_aux = 29 - pote[VOL_ARRAY];
 80019d0:	4b84      	ldr	r3, [pc, #528]	; (8001be4 <main+0x964>)
 80019d2:	8adb      	ldrh	r3, [r3, #22]
 80019d4:	f1c3 031d 	rsb	r3, r3, #29
 80019d8:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
		  aux[3] = 0xFF & (vol_data[pote_aux]);
 80019dc:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80019e6:	443b      	add	r3, r7
 80019e8:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4b7e      	ldr	r3, [pc, #504]	; (8001be8 <main+0x968>)
 80019f0:	70da      	strb	r2, [r3, #3]
		  aux[2] = 0xFF & ((vol_data[pote_aux])>>8);
 80019f2:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80019fc:	443b      	add	r3, r7
 80019fe:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b78      	ldr	r3, [pc, #480]	; (8001be8 <main+0x968>)
 8001a08:	709a      	strb	r2, [r3, #2]
		  aux[1] = 0xFF & ((vol_data[pote_aux])>>16);
 8001a0a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001a14:	443b      	add	r3, r7
 8001a16:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001a1a:	0c1b      	lsrs	r3, r3, #16
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b72      	ldr	r3, [pc, #456]	; (8001be8 <main+0x968>)
 8001a20:	705a      	strb	r2, [r3, #1]
		  aux[0] = 0xFF & ((vol_data[pote_aux])>>24);
 8001a22:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001a2c:	443b      	add	r3, r7
 8001a2e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001a32:	0e1b      	lsrs	r3, r3, #24
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b6c      	ldr	r3, [pc, #432]	; (8001be8 <main+0x968>)
 8001a38:	701a      	strb	r2, [r3, #0]
		  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, BandAddress[VOL_ARRAY], 4, aux);
 8001a3a:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8001a3e:	4b6a      	ldr	r3, [pc, #424]	; (8001be8 <main+0x968>)
 8001a40:	2204      	movs	r2, #4
 8001a42:	2070      	movs	r0, #112	; 0x70
 8001a44:	f000 fbd8 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	  }

	  if(flag[LOUD_LOW_ARRAY] == 1) // Loudness Low Boost
 8001a48:	4b65      	ldr	r3, [pc, #404]	; (8001be0 <main+0x960>)
 8001a4a:	8b1b      	ldrh	r3, [r3, #24]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d13e      	bne.n	8001ace <main+0x84e>
	  {
		  flag[LOUD_LOW_ARRAY] = 0;
 8001a50:	4b63      	ldr	r3, [pc, #396]	; (8001be0 <main+0x960>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	831a      	strh	r2, [r3, #24]
		  pote_aux = 29 - pote[LOUD_LOW_ARRAY];
 8001a56:	4b63      	ldr	r3, [pc, #396]	; (8001be4 <main+0x964>)
 8001a58:	8b1b      	ldrh	r3, [r3, #24]
 8001a5a:	f1c3 031d 	rsb	r3, r3, #29
 8001a5e:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
		  aux[3] = 0xFF & (boost_data[pote_aux]);
 8001a62:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001a66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b5c      	ldr	r3, [pc, #368]	; (8001be8 <main+0x968>)
 8001a76:	70da      	strb	r2, [r3, #3]
		  aux[2] = 0xFF & ((boost_data[pote_aux])>>8);
 8001a78:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001a7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a80:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b56      	ldr	r3, [pc, #344]	; (8001be8 <main+0x968>)
 8001a8e:	709a      	strb	r2, [r3, #2]
		  aux[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8001a90:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001a94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa0:	0c1b      	lsrs	r3, r3, #16
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <main+0x968>)
 8001aa6:	705a      	strb	r2, [r3, #1]
		  aux[0] = 0xFF & ((boost_data[pote_aux])>>24);
 8001aa8:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001aac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ab0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab8:	0e1b      	lsrs	r3, r3, #24
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b4a      	ldr	r3, [pc, #296]	; (8001be8 <main+0x968>)
 8001abe:	701a      	strb	r2, [r3, #0]
		  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, BandAddress[LOUD_LOW_ARRAY], 4, aux);
 8001ac0:	f8b7 110c 	ldrh.w	r1, [r7, #268]	; 0x10c
 8001ac4:	4b48      	ldr	r3, [pc, #288]	; (8001be8 <main+0x968>)
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	2070      	movs	r0, #112	; 0x70
 8001aca:	f000 fb95 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	  }

	  if(flag[LOUD_HIGH_ARRAY] == 1) // Loudness High Boost
 8001ace:	4b44      	ldr	r3, [pc, #272]	; (8001be0 <main+0x960>)
 8001ad0:	8b5b      	ldrh	r3, [r3, #26]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d13e      	bne.n	8001b54 <main+0x8d4>
	  {
		  flag[LOUD_HIGH_ARRAY] = 0;
 8001ad6:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <main+0x960>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	835a      	strh	r2, [r3, #26]
		  pote_aux = 29 - pote[LOUD_HIGH_ARRAY];
 8001adc:	4b41      	ldr	r3, [pc, #260]	; (8001be4 <main+0x964>)
 8001ade:	8b5b      	ldrh	r3, [r3, #26]
 8001ae0:	f1c3 031d 	rsb	r3, r3, #29
 8001ae4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
		  aux[3] = 0xFF & (boost_data[pote_aux]);
 8001ae8:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001aec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001af0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <main+0x968>)
 8001afc:	70da      	strb	r2, [r3, #3]
		  aux[2] = 0xFF & ((boost_data[pote_aux])>>8);
 8001afe:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001b02:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <main+0x968>)
 8001b14:	709a      	strb	r2, [r3, #2]
		  aux[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8001b16:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001b1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b26:	0c1b      	lsrs	r3, r3, #16
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <main+0x968>)
 8001b2c:	705a      	strb	r2, [r3, #1]
		  aux[0] = 0xFF & ((boost_data[pote_aux])>>24);
 8001b2e:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001b32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3e:	0e1b      	lsrs	r3, r3, #24
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <main+0x968>)
 8001b44:	701a      	strb	r2, [r3, #0]
		  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, BandAddress[LOUD_HIGH_ARRAY], 4, aux);
 8001b46:	f8b7 110e 	ldrh.w	r1, [r7, #270]	; 0x10e
 8001b4a:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <main+0x968>)
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	2070      	movs	r0, #112	; 0x70
 8001b50:	f000 fb52 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	  }

	  if(flag[LOUD_GRL_ARRAY] == 1) // Loudness
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <main+0x960>)
 8001b56:	8b9b      	ldrh	r3, [r3, #28]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	f47f aec9 	bne.w	80018f0 <main+0x670>
	  {
		  flag[LOUD_GRL_ARRAY] = 0;
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <main+0x960>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	839a      	strh	r2, [r3, #28]
		  pote_aux = 29 - pote[LOUD_GRL_ARRAY];
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <main+0x964>)
 8001b66:	8b9b      	ldrh	r3, [r3, #28]
 8001b68:	f1c3 031d 	rsb	r3, r3, #29
 8001b6c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
		  aux[3] = 0xFF & (vol_data[pote_aux]);
 8001b70:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001b7a:	443b      	add	r3, r7
 8001b7c:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <main+0x968>)
 8001b84:	70da      	strb	r2, [r3, #3]
		  aux[2] = 0xFF & ((vol_data[pote_aux])>>8);
 8001b86:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001b90:	443b      	add	r3, r7
 8001b92:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <main+0x968>)
 8001b9c:	709a      	strb	r2, [r3, #2]
		  aux[1] = 0xFF & ((vol_data[pote_aux])>>16);
 8001b9e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001ba8:	443b      	add	r3, r7
 8001baa:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001bae:	0c1b      	lsrs	r3, r3, #16
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <main+0x968>)
 8001bb4:	705a      	strb	r2, [r3, #1]
		  aux[0] = 0xFF & ((vol_data[pote_aux])>>24);
 8001bb6:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001bc0:	443b      	add	r3, r7
 8001bc2:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001bc6:	0e1b      	lsrs	r3, r3, #24
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <main+0x968>)
 8001bcc:	701a      	strb	r2, [r3, #0]
		  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, BandAddress[LOUD_GRL_ARRAY], 4, aux);
 8001bce:	f8b7 1110 	ldrh.w	r1, [r7, #272]	; 0x110
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <main+0x968>)
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	2070      	movs	r0, #112	; 0x70
 8001bd8:	f000 fb0e 	bl	80021f8 <SIGMA_WRITE_REGISTER_BLOCK>
	  aux[0] = 0x00;
 8001bdc:	e688      	b.n	80018f0 <main+0x670>
 8001bde:	bf00      	nop
 8001be0:	20004294 	.word	0x20004294
 8001be4:	200041fc 	.word	0x200041fc
 8001be8:	200042b4 	.word	0x200042b4

08001bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b094      	sub	sp, #80	; 0x50
 8001bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf2:	f107 0320 	add.w	r3, r7, #32
 8001bf6:	2230      	movs	r2, #48	; 0x30
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 fcea 	bl	80055d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <SystemClock_Config+0xd0>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	4a28      	ldr	r2, [pc, #160]	; (8001cbc <SystemClock_Config+0xd0>)
 8001c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c20:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <SystemClock_Config+0xd0>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <SystemClock_Config+0xd4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c38:	4a21      	ldr	r2, [pc, #132]	; (8001cc0 <SystemClock_Config+0xd4>)
 8001c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <SystemClock_Config+0xd4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c56:	2302      	movs	r3, #2
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 27;
 8001c60:	231b      	movs	r3, #27
 8001c62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001c64:	23a0      	movs	r3, #160	; 0xa0
 8001c66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c70:	f107 0320 	add.w	r3, r7, #32
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 fd6f 	bl	8004758 <HAL_RCC_OscConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c80:	f000 fc1e 	bl	80024c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c84:	230f      	movs	r3, #15
 8001c86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f002 ffd0 	bl	8004c48 <HAL_RCC_ClockConfig>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001cae:	f000 fc07 	bl	80024c0 <Error_Handler>
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	3750      	adds	r7, #80	; 0x50
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40007000 	.word	0x40007000

08001cc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cca:	463b      	mov	r3, r7
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cd6:	4b84      	ldr	r3, [pc, #528]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001cd8:	4a84      	ldr	r2, [pc, #528]	; (8001eec <MX_ADC1_Init+0x228>)
 8001cda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001cdc:	4b82      	ldr	r3, [pc, #520]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ce2:	4b81      	ldr	r3, [pc, #516]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ce8:	4b7f      	ldr	r3, [pc, #508]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cee:	4b7e      	ldr	r3, [pc, #504]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cf4:	4b7c      	ldr	r3, [pc, #496]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001cfc:	4b7a      	ldr	r3, [pc, #488]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001d04:	4b78      	ldr	r3, [pc, #480]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001d06:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d0c:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 15;
 8001d12:	4b75      	ldr	r3, [pc, #468]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001d14:	220f      	movs	r2, #15
 8001d16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d18:	4b73      	ldr	r3, [pc, #460]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d20:	4b71      	ldr	r3, [pc, #452]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d26:	4870      	ldr	r0, [pc, #448]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001d28:	f000 feb2 	bl	8002a90 <HAL_ADC_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001d32:	f000 fbc5 	bl	80024c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d42:	463b      	mov	r3, r7
 8001d44:	4619      	mov	r1, r3
 8001d46:	4868      	ldr	r0, [pc, #416]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001d48:	f000 ffea 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001d52:	f000 fbb5 	bl	80024c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d56:	2301      	movs	r3, #1
 8001d58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d5e:	463b      	mov	r3, r7
 8001d60:	4619      	mov	r1, r3
 8001d62:	4861      	ldr	r0, [pc, #388]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001d64:	f000 ffdc 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001d6e:	f000 fba7 	bl	80024c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d72:	2302      	movs	r3, #2
 8001d74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001d76:	2303      	movs	r3, #3
 8001d78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	485a      	ldr	r0, [pc, #360]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001d80:	f000 ffce 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001d8a:	f000 fb99 	bl	80024c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001d92:	2304      	movs	r3, #4
 8001d94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d96:	463b      	mov	r3, r7
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4853      	ldr	r0, [pc, #332]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001d9c:	f000 ffc0 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001da6:	f000 fb8b 	bl	80024c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001daa:	2304      	movs	r3, #4
 8001dac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001dae:	2305      	movs	r3, #5
 8001db0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db2:	463b      	mov	r3, r7
 8001db4:	4619      	mov	r1, r3
 8001db6:	484c      	ldr	r0, [pc, #304]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001db8:	f000 ffb2 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8001dc2:	f000 fb7d 	bl	80024c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001dca:	2306      	movs	r3, #6
 8001dcc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dce:	463b      	mov	r3, r7
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4845      	ldr	r0, [pc, #276]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001dd4:	f000 ffa4 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8001dde:	f000 fb6f 	bl	80024c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001de2:	2306      	movs	r3, #6
 8001de4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001de6:	2307      	movs	r3, #7
 8001de8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dea:	463b      	mov	r3, r7
 8001dec:	4619      	mov	r1, r3
 8001dee:	483e      	ldr	r0, [pc, #248]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001df0:	f000 ff96 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8001dfa:	f000 fb61 	bl	80024c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001dfe:	2307      	movs	r3, #7
 8001e00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001e02:	2308      	movs	r3, #8
 8001e04:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e06:	463b      	mov	r3, r7
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4837      	ldr	r0, [pc, #220]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001e0c:	f000 ff88 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8001e16:	f000 fb53 	bl	80024c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001e1e:	2309      	movs	r3, #9
 8001e20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e22:	463b      	mov	r3, r7
 8001e24:	4619      	mov	r1, r3
 8001e26:	4830      	ldr	r0, [pc, #192]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001e28:	f000 ff7a 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8001e32:	f000 fb45 	bl	80024c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001e36:	2309      	movs	r3, #9
 8001e38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001e3a:	230a      	movs	r3, #10
 8001e3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e3e:	463b      	mov	r3, r7
 8001e40:	4619      	mov	r1, r3
 8001e42:	4829      	ldr	r0, [pc, #164]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001e44:	f000 ff6c 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001e4e:	f000 fb37 	bl	80024c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001e52:	230a      	movs	r3, #10
 8001e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001e56:	230b      	movs	r3, #11
 8001e58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4822      	ldr	r0, [pc, #136]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001e60:	f000 ff5e 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 8001e6a:	f000 fb29 	bl	80024c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001e6e:	230b      	movs	r3, #11
 8001e70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001e72:	230c      	movs	r3, #12
 8001e74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e76:	463b      	mov	r3, r7
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481b      	ldr	r0, [pc, #108]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001e7c:	f000 ff50 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 8001e86:	f000 fb1b 	bl	80024c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001e8a:	230c      	movs	r3, #12
 8001e8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001e8e:	230d      	movs	r3, #13
 8001e90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e92:	463b      	mov	r3, r7
 8001e94:	4619      	mov	r1, r3
 8001e96:	4814      	ldr	r0, [pc, #80]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001e98:	f000 ff42 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 8001ea2:	f000 fb0d 	bl	80024c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001ea6:	230d      	movs	r3, #13
 8001ea8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001eaa:	230e      	movs	r3, #14
 8001eac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eae:	463b      	mov	r3, r7
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	480d      	ldr	r0, [pc, #52]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001eb4:	f000 ff34 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_ADC1_Init+0x1fe>
  {
    Error_Handler();
 8001ebe:	f000 faff 	bl	80024c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001ec2:	230e      	movs	r3, #14
 8001ec4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8001ec6:	230f      	movs	r3, #15
 8001ec8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eca:	463b      	mov	r3, r7
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4806      	ldr	r0, [pc, #24]	; (8001ee8 <MX_ADC1_Init+0x224>)
 8001ed0:	f000 ff26 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_ADC1_Init+0x21a>
  {
    Error_Handler();
 8001eda:	f000 faf1 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20003fcc 	.word	0x20003fcc
 8001eec:	40012000 	.word	0x40012000

08001ef0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001ef6:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <MX_I2C1_Init+0x54>)
 8001ef8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001efc:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <MX_I2C1_Init+0x58>)
 8001efe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f2c:	4804      	ldr	r0, [pc, #16]	; (8001f40 <MX_I2C1_Init+0x50>)
 8001f2e:	f001 ffb7 	bl	8003ea0 <HAL_I2C_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f38:	f000 fac2 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20004074 	.word	0x20004074
 8001f44:	40005400 	.word	0x40005400
 8001f48:	00061a80 	.word	0x00061a80

08001f4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f52:	4a13      	ldr	r2, [pc, #76]	; (8001fa0 <MX_I2C2_Init+0x54>)
 8001f54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f58:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <MX_I2C2_Init+0x58>)
 8001f5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f6e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <MX_I2C2_Init+0x50>)
 8001f8a:	f001 ff89 	bl	8003ea0 <HAL_I2C_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f94:	f000 fa94 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200040c8 	.word	0x200040c8
 8001fa0:	40005800 	.word	0x40005800
 8001fa4:	00061a80 	.word	0x00061a80

08001fa8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <MX_I2C3_Init+0x50>)
 8001fae:	4a13      	ldr	r2, [pc, #76]	; (8001ffc <MX_I2C3_Init+0x54>)
 8001fb0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <MX_I2C3_Init+0x50>)
 8001fb4:	4a12      	ldr	r2, [pc, #72]	; (8002000 <MX_I2C3_Init+0x58>)
 8001fb6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <MX_I2C3_Init+0x50>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <MX_I2C3_Init+0x50>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <MX_I2C3_Init+0x50>)
 8001fc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <MX_I2C3_Init+0x50>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <MX_I2C3_Init+0x50>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <MX_I2C3_Init+0x50>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <MX_I2C3_Init+0x50>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001fe4:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <MX_I2C3_Init+0x50>)
 8001fe6:	f001 ff5b 	bl	8003ea0 <HAL_I2C_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ff0:	f000 fa66 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	2000411c 	.word	0x2000411c
 8001ffc:	40005c00 	.word	0x40005c00
 8002000:	000186a0 	.word	0x000186a0

08002004 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800200a:	f107 0308 	add.w	r3, r7, #8
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002018:	463b      	mov	r3, r7
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002020:	4b1e      	ldr	r3, [pc, #120]	; (800209c <MX_TIM2_Init+0x98>)
 8002022:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002026:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8002028:	4b1c      	ldr	r3, [pc, #112]	; (800209c <MX_TIM2_Init+0x98>)
 800202a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800202e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <MX_TIM2_Init+0x98>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <MX_TIM2_Init+0x98>)
 8002038:	f240 32e7 	movw	r2, #999	; 0x3e7
 800203c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203e:	4b17      	ldr	r3, [pc, #92]	; (800209c <MX_TIM2_Init+0x98>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <MX_TIM2_Init+0x98>)
 8002046:	2200      	movs	r2, #0
 8002048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800204a:	4814      	ldr	r0, [pc, #80]	; (800209c <MX_TIM2_Init+0x98>)
 800204c:	f002 ffc8 	bl	8004fe0 <HAL_TIM_Base_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002056:	f000 fa33 	bl	80024c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800205e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002060:	f107 0308 	add.w	r3, r7, #8
 8002064:	4619      	mov	r1, r3
 8002066:	480d      	ldr	r0, [pc, #52]	; (800209c <MX_TIM2_Init+0x98>)
 8002068:	f003 f864 	bl	8005134 <HAL_TIM_ConfigClockSource>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002072:	f000 fa25 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002076:	2320      	movs	r3, #32
 8002078:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800207e:	463b      	mov	r3, r7
 8002080:	4619      	mov	r1, r3
 8002082:	4806      	ldr	r0, [pc, #24]	; (800209c <MX_TIM2_Init+0x98>)
 8002084:	f003 fa38 	bl	80054f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800208e:	f000 fa17 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20004170 	.word	0x20004170

080020a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <MX_DMA_Init+0x3c>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <MX_DMA_Init+0x3c>)
 80020b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <MX_DMA_Init+0x3c>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2038      	movs	r0, #56	; 0x38
 80020c8:	f001 f9a5 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80020cc:	2038      	movs	r0, #56	; 0x38
 80020ce:	f001 f9be 	bl	800344e <HAL_NVIC_EnableIRQ>

}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800

080020e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
 80020f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	4b3b      	ldr	r3, [pc, #236]	; (80021e8 <MX_GPIO_Init+0x108>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a3a      	ldr	r2, [pc, #232]	; (80021e8 <MX_GPIO_Init+0x108>)
 8002100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b38      	ldr	r3, [pc, #224]	; (80021e8 <MX_GPIO_Init+0x108>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <MX_GPIO_Init+0x108>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a33      	ldr	r2, [pc, #204]	; (80021e8 <MX_GPIO_Init+0x108>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <MX_GPIO_Init+0x108>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <MX_GPIO_Init+0x108>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a2c      	ldr	r2, [pc, #176]	; (80021e8 <MX_GPIO_Init+0x108>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <MX_GPIO_Init+0x108>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <MX_GPIO_Init+0x108>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a25      	ldr	r2, [pc, #148]	; (80021e8 <MX_GPIO_Init+0x108>)
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <MX_GPIO_Init+0x108>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRST_DSP_GPIO_Port, nRST_DSP_Pin, GPIO_PIN_SET);
 8002166:	2201      	movs	r2, #1
 8002168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800216c:	481f      	ldr	r0, [pc, #124]	; (80021ec <MX_GPIO_Init+0x10c>)
 800216e:	f001 fe7d 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_RESET);
 8002172:	2200      	movs	r2, #0
 8002174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002178:	481c      	ldr	r0, [pc, #112]	; (80021ec <MX_GPIO_Init+0x10c>)
 800217a:	f001 fe77 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSEL_Pin|SR_Pin|FS2_Pin|FS1_Pin, GPIO_PIN_RESET);
 800217e:	2200      	movs	r2, #0
 8002180:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8002184:	481a      	ldr	r0, [pc, #104]	; (80021f0 <MX_GPIO_Init+0x110>)
 8002186:	f001 fe71 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : nRST_DSP_Pin EN_SCK_Pin */
  GPIO_InitStruct.Pin = nRST_DSP_Pin|EN_SCK_Pin;
 800218a:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800218e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002190:	2311      	movs	r3, #17
 8002192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002194:	2301      	movs	r3, #1
 8002196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002198:	2302      	movs	r3, #2
 800219a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	4619      	mov	r1, r3
 80021a2:	4812      	ldr	r0, [pc, #72]	; (80021ec <MX_GPIO_Init+0x10c>)
 80021a4:	f001 fcde 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSEL_Pin SR_Pin FS2_Pin FS1_Pin */
  GPIO_InitStruct.Pin = CSEL_Pin|SR_Pin|FS2_Pin|FS1_Pin;
 80021a8:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80021ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ae:	2301      	movs	r3, #1
 80021b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b2:	2301      	movs	r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b6:	2302      	movs	r3, #2
 80021b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	480b      	ldr	r0, [pc, #44]	; (80021f0 <MX_GPIO_Init+0x110>)
 80021c2:	f001 fccf 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO0_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO0_Pin|GPIO1_Pin;
 80021c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d0:	2301      	movs	r3, #1
 80021d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	4806      	ldr	r0, [pc, #24]	; (80021f4 <MX_GPIO_Init+0x114>)
 80021dc:	f001 fcc2 	bl	8003b64 <HAL_GPIO_Init>

}
 80021e0:	bf00      	nop
 80021e2:	3728      	adds	r7, #40	; 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40020400 	.word	0x40020400
 80021f0:	40020000 	.word	0x40020000
 80021f4:	40020800 	.word	0x40020800

080021f8 <SIGMA_WRITE_REGISTER_BLOCK>:

/* USER CODE BEGIN 4 */
void SIGMA_WRITE_REGISTER_BLOCK(uint16_t devAddress, uint16_t address, uint16_t length, uint8_t *pData)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af04      	add	r7, sp, #16
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	4603      	mov	r3, r0
 8002202:	81fb      	strh	r3, [r7, #14]
 8002204:	460b      	mov	r3, r1
 8002206:	81bb      	strh	r3, [r7, #12]
 8002208:	4613      	mov	r3, r2
 800220a:	817b      	strh	r3, [r7, #10]
	stat = HAL_I2C_Mem_Write(&hi2c1, devAddress, address, 2, pData, length, 1000);
 800220c:	89ba      	ldrh	r2, [r7, #12]
 800220e:	89f9      	ldrh	r1, [r7, #14]
 8002210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	897b      	ldrh	r3, [r7, #10]
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2302      	movs	r3, #2
 8002220:	4805      	ldr	r0, [pc, #20]	; (8002238 <SIGMA_WRITE_REGISTER_BLOCK+0x40>)
 8002222:	f001 ff81 	bl	8004128 <HAL_I2C_Mem_Write>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <SIGMA_WRITE_REGISTER_BLOCK+0x44>)
 800222c:	701a      	strb	r2, [r3, #0]
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20004074 	.word	0x20004074
 800223c:	200041b8 	.word	0x200041b8

08002240 <SIGMA_WRITE_DELAY>:

void SIGMA_WRITE_DELAY(uint16_t devAddress, uint16_t length, uint8_t *pData)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	603a      	str	r2, [r7, #0]
 800224a:	80fb      	strh	r3, [r7, #6]
 800224c:	460b      	mov	r3, r1
 800224e:	80bb      	strh	r3, [r7, #4]
	HAL_Delay(11);
 8002250:	200b      	movs	r0, #11
 8002252:	f000 fbf9 	bl	8002a48 <HAL_Delay>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
	uint32_t j = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
	uint32_t k = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]


	for(k=VOL_ARRAY; k<ADC_POT; k++) // For volume, loud low, loud high, loud general
 8002274:	230b      	movs	r3, #11
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e080      	b.n	800237c <HAL_ADC_ConvCpltCallback+0x11c>
	{
		for(i=0; i<30; i++)
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e077      	b.n	8002370 <HAL_ADC_ConvCpltCallback+0x110>
		{
			if((i == 0) && (value[k] < (linear_in_table[i+1])-15))
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d11f      	bne.n	80022c6 <HAL_ADC_ConvCpltCallback+0x66>
 8002286:	4a88      	ldr	r2, [pc, #544]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x248>)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	3201      	adds	r2, #1
 8002292:	4986      	ldr	r1, [pc, #536]	; (80024ac <HAL_ADC_ConvCpltCallback+0x24c>)
 8002294:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002298:	3a0f      	subs	r2, #15
 800229a:	4293      	cmp	r3, r2
 800229c:	d213      	bcs.n	80022c6 <HAL_ADC_ConvCpltCallback+0x66>
			{
				if(pote[k] != i)
 800229e:	4a84      	ldr	r2, [pc, #528]	; (80024b0 <HAL_ADC_ConvCpltCallback+0x250>)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022a6:	461a      	mov	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d05d      	beq.n	800236a <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	b299      	uxth	r1, r3
 80022b2:	4a7f      	ldr	r2, [pc, #508]	; (80024b0 <HAL_ADC_ConvCpltCallback+0x250>)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 80022ba:	4a7e      	ldr	r2, [pc, #504]	; (80024b4 <HAL_ADC_ConvCpltCallback+0x254>)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2101      	movs	r1, #1
 80022c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[k] != i)
 80022c4:	e051      	b.n	800236a <HAL_ADC_ConvCpltCallback+0x10a>
				}
			}
			else if((i > 0) && (i < 29 ) && (value[k] > (linear_in_table[i]+15)) && (value[k] < (linear_in_table[i+1])-15))
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d02d      	beq.n	8002328 <HAL_ADC_ConvCpltCallback+0xc8>
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2b1c      	cmp	r3, #28
 80022d0:	d82a      	bhi.n	8002328 <HAL_ADC_ConvCpltCallback+0xc8>
 80022d2:	4a75      	ldr	r2, [pc, #468]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x248>)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022da:	4974      	ldr	r1, [pc, #464]	; (80024ac <HAL_ADC_ConvCpltCallback+0x24c>)
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80022e2:	320f      	adds	r2, #15
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d91f      	bls.n	8002328 <HAL_ADC_ConvCpltCallback+0xc8>
 80022e8:	4a6f      	ldr	r2, [pc, #444]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x248>)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	3201      	adds	r2, #1
 80022f4:	496d      	ldr	r1, [pc, #436]	; (80024ac <HAL_ADC_ConvCpltCallback+0x24c>)
 80022f6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80022fa:	3a0f      	subs	r2, #15
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d213      	bcs.n	8002328 <HAL_ADC_ConvCpltCallback+0xc8>
			{
				if(pote[k] != i)
 8002300:	4a6b      	ldr	r2, [pc, #428]	; (80024b0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002308:	461a      	mov	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	4293      	cmp	r3, r2
 800230e:	d02c      	beq.n	800236a <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	b299      	uxth	r1, r3
 8002314:	4a66      	ldr	r2, [pc, #408]	; (80024b0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 800231c:	4a65      	ldr	r2, [pc, #404]	; (80024b4 <HAL_ADC_ConvCpltCallback+0x254>)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2101      	movs	r1, #1
 8002322:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[k] != i)
 8002326:	e020      	b.n	800236a <HAL_ADC_ConvCpltCallback+0x10a>
				}
			}
			else if((i == 29) && (value[k] > (linear_in_table[i]+15)))
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2b1d      	cmp	r3, #29
 800232c:	d11d      	bne.n	800236a <HAL_ADC_ConvCpltCallback+0x10a>
 800232e:	4a5e      	ldr	r2, [pc, #376]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x248>)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002336:	495d      	ldr	r1, [pc, #372]	; (80024ac <HAL_ADC_ConvCpltCallback+0x24c>)
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800233e:	320f      	adds	r2, #15
 8002340:	4293      	cmp	r3, r2
 8002342:	d912      	bls.n	800236a <HAL_ADC_ConvCpltCallback+0x10a>
			{
				if(pote[k] != i)
 8002344:	4a5a      	ldr	r2, [pc, #360]	; (80024b0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800234c:	461a      	mov	r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	4293      	cmp	r3, r2
 8002352:	d00a      	beq.n	800236a <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	b299      	uxth	r1, r3
 8002358:	4a55      	ldr	r2, [pc, #340]	; (80024b0 <HAL_ADC_ConvCpltCallback+0x250>)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 8002360:	4a54      	ldr	r2, [pc, #336]	; (80024b4 <HAL_ADC_ConvCpltCallback+0x254>)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2101      	movs	r1, #1
 8002366:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<30; i++)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2b1d      	cmp	r3, #29
 8002374:	d984      	bls.n	8002280 <HAL_ADC_ConvCpltCallback+0x20>
	for(k=VOL_ARRAY; k<ADC_POT; k++) // For volume, loud low, loud high, loud general
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3301      	adds	r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b0e      	cmp	r3, #14
 8002380:	f67f af7b 	bls.w	800227a <HAL_ADC_ConvCpltCallback+0x1a>
			}
		}
	}


	for(j=0; j<(VOL_ARRAY); j++) // For filter 32Hz - 16KHz + Subwoofer
 8002384:	2300      	movs	r3, #0
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	e080      	b.n	800248c <HAL_ADC_ConvCpltCallback+0x22c>
	{
		for(i=0; i<30; i++)
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	e077      	b.n	8002480 <HAL_ADC_ConvCpltCallback+0x220>
		{
			if((i == 0) && (value[j] < (log_in_table[i+1])-15))
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d11f      	bne.n	80023d6 <HAL_ADC_ConvCpltCallback+0x176>
 8002396:	4a44      	ldr	r2, [pc, #272]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x248>)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	3201      	adds	r2, #1
 80023a2:	4945      	ldr	r1, [pc, #276]	; (80024b8 <HAL_ADC_ConvCpltCallback+0x258>)
 80023a4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80023a8:	3a0f      	subs	r2, #15
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d213      	bcs.n	80023d6 <HAL_ADC_ConvCpltCallback+0x176>
			{
				if(pote[j] != i)
 80023ae:	4a40      	ldr	r2, [pc, #256]	; (80024b0 <HAL_ADC_ConvCpltCallback+0x250>)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023b6:	461a      	mov	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d05d      	beq.n	800247a <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	b299      	uxth	r1, r3
 80023c2:	4a3b      	ldr	r2, [pc, #236]	; (80024b0 <HAL_ADC_ConvCpltCallback+0x250>)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 80023ca:	4a3a      	ldr	r2, [pc, #232]	; (80024b4 <HAL_ADC_ConvCpltCallback+0x254>)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	2101      	movs	r1, #1
 80023d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[j] != i)
 80023d4:	e051      	b.n	800247a <HAL_ADC_ConvCpltCallback+0x21a>
				}
			}
			else if((i > 0) && (i < 29 ) && (value[j] > (log_in_table[i]+15)) && (value[j] < (log_in_table[i+1])-15))
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d02d      	beq.n	8002438 <HAL_ADC_ConvCpltCallback+0x1d8>
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2b1c      	cmp	r3, #28
 80023e0:	d82a      	bhi.n	8002438 <HAL_ADC_ConvCpltCallback+0x1d8>
 80023e2:	4a31      	ldr	r2, [pc, #196]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x248>)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ea:	4933      	ldr	r1, [pc, #204]	; (80024b8 <HAL_ADC_ConvCpltCallback+0x258>)
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80023f2:	320f      	adds	r2, #15
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d91f      	bls.n	8002438 <HAL_ADC_ConvCpltCallback+0x1d8>
 80023f8:	4a2b      	ldr	r2, [pc, #172]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x248>)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	3201      	adds	r2, #1
 8002404:	492c      	ldr	r1, [pc, #176]	; (80024b8 <HAL_ADC_ConvCpltCallback+0x258>)
 8002406:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800240a:	3a0f      	subs	r2, #15
 800240c:	4293      	cmp	r3, r2
 800240e:	d213      	bcs.n	8002438 <HAL_ADC_ConvCpltCallback+0x1d8>
			{
				if(pote[j] != i)
 8002410:	4a27      	ldr	r2, [pc, #156]	; (80024b0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002418:	461a      	mov	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	4293      	cmp	r3, r2
 800241e:	d02c      	beq.n	800247a <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	b299      	uxth	r1, r3
 8002424:	4a22      	ldr	r2, [pc, #136]	; (80024b0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 800242c:	4a21      	ldr	r2, [pc, #132]	; (80024b4 <HAL_ADC_ConvCpltCallback+0x254>)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2101      	movs	r1, #1
 8002432:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[j] != i)
 8002436:	e020      	b.n	800247a <HAL_ADC_ConvCpltCallback+0x21a>
				}
			}
			else if((i == 29) && (value[j] > (log_in_table[i]+15)))
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2b1d      	cmp	r3, #29
 800243c:	d11d      	bne.n	800247a <HAL_ADC_ConvCpltCallback+0x21a>
 800243e:	4a1a      	ldr	r2, [pc, #104]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x248>)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002446:	491c      	ldr	r1, [pc, #112]	; (80024b8 <HAL_ADC_ConvCpltCallback+0x258>)
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800244e:	320f      	adds	r2, #15
 8002450:	4293      	cmp	r3, r2
 8002452:	d912      	bls.n	800247a <HAL_ADC_ConvCpltCallback+0x21a>
			{
				if(pote[j] != i)
 8002454:	4a16      	ldr	r2, [pc, #88]	; (80024b0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800245c:	461a      	mov	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	4293      	cmp	r3, r2
 8002462:	d00a      	beq.n	800247a <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	b299      	uxth	r1, r3
 8002468:	4a11      	ldr	r2, [pc, #68]	; (80024b0 <HAL_ADC_ConvCpltCallback+0x250>)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 8002470:	4a10      	ldr	r2, [pc, #64]	; (80024b4 <HAL_ADC_ConvCpltCallback+0x254>)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	2101      	movs	r1, #1
 8002476:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<30; i++)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	3301      	adds	r3, #1
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2b1d      	cmp	r3, #29
 8002484:	d984      	bls.n	8002390 <HAL_ADC_ConvCpltCallback+0x130>
	for(j=0; j<(VOL_ARRAY); j++) // For filter 32Hz - 16KHz + Subwoofer
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	3301      	adds	r3, #1
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	2b0a      	cmp	r3, #10
 8002490:	f67f af7b 	bls.w	800238a <HAL_ADC_ConvCpltCallback+0x12a>
				}
			}
		}

	}
	HAL_ADC_Start_DMA(&hadc1, value, ADC_POT);
 8002494:	220f      	movs	r2, #15
 8002496:	4904      	ldr	r1, [pc, #16]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x248>)
 8002498:	4808      	ldr	r0, [pc, #32]	; (80024bc <HAL_ADC_ConvCpltCallback+0x25c>)
 800249a:	f000 fb3d 	bl	8002b18 <HAL_ADC_Start_DMA>
}
 800249e:	bf00      	nop
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200041c0 	.word	0x200041c0
 80024ac:	20004258 	.word	0x20004258
 80024b0:	200041fc 	.word	0x200041fc
 80024b4:	20004294 	.word	0x20004294
 80024b8:	2000421c 	.word	0x2000421c
 80024bc:	20003fcc 	.word	0x20003fcc

080024c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c4:	b672      	cpsid	i
}
 80024c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <Error_Handler+0x8>
	...

080024cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <HAL_MspInit+0x4c>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <HAL_MspInit+0x4c>)
 80024dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e0:	6453      	str	r3, [r2, #68]	; 0x44
 80024e2:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <HAL_MspInit+0x4c>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_MspInit+0x4c>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a08      	ldr	r2, [pc, #32]	; (8002518 <HAL_MspInit+0x4c>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_MspInit+0x4c>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800

0800251c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	; 0x30
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 031c 	add.w	r3, r7, #28
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a49      	ldr	r2, [pc, #292]	; (8002660 <HAL_ADC_MspInit+0x144>)
 800253a:	4293      	cmp	r3, r2
 800253c:	f040 808c 	bne.w	8002658 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002540:	2300      	movs	r3, #0
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	4b47      	ldr	r3, [pc, #284]	; (8002664 <HAL_ADC_MspInit+0x148>)
 8002546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002548:	4a46      	ldr	r2, [pc, #280]	; (8002664 <HAL_ADC_MspInit+0x148>)
 800254a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254e:	6453      	str	r3, [r2, #68]	; 0x44
 8002550:	4b44      	ldr	r3, [pc, #272]	; (8002664 <HAL_ADC_MspInit+0x148>)
 8002552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	4b40      	ldr	r3, [pc, #256]	; (8002664 <HAL_ADC_MspInit+0x148>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	4a3f      	ldr	r2, [pc, #252]	; (8002664 <HAL_ADC_MspInit+0x148>)
 8002566:	f043 0304 	orr.w	r3, r3, #4
 800256a:	6313      	str	r3, [r2, #48]	; 0x30
 800256c:	4b3d      	ldr	r3, [pc, #244]	; (8002664 <HAL_ADC_MspInit+0x148>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	4b39      	ldr	r3, [pc, #228]	; (8002664 <HAL_ADC_MspInit+0x148>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	4a38      	ldr	r2, [pc, #224]	; (8002664 <HAL_ADC_MspInit+0x148>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6313      	str	r3, [r2, #48]	; 0x30
 8002588:	4b36      	ldr	r3, [pc, #216]	; (8002664 <HAL_ADC_MspInit+0x148>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	4b32      	ldr	r3, [pc, #200]	; (8002664 <HAL_ADC_MspInit+0x148>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	4a31      	ldr	r2, [pc, #196]	; (8002664 <HAL_ADC_MspInit+0x148>)
 800259e:	f043 0302 	orr.w	r3, r3, #2
 80025a2:	6313      	str	r3, [r2, #48]	; 0x30
 80025a4:	4b2f      	ldr	r3, [pc, #188]	; (8002664 <HAL_ADC_MspInit+0x148>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80025b0:	231f      	movs	r3, #31
 80025b2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025b4:	2303      	movs	r3, #3
 80025b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	4619      	mov	r1, r3
 80025c2:	4829      	ldr	r0, [pc, #164]	; (8002668 <HAL_ADC_MspInit+0x14c>)
 80025c4:	f001 face 	bl	8003b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80025c8:	23ff      	movs	r3, #255	; 0xff
 80025ca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025cc:	2303      	movs	r3, #3
 80025ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d4:	f107 031c 	add.w	r3, r7, #28
 80025d8:	4619      	mov	r1, r3
 80025da:	4824      	ldr	r0, [pc, #144]	; (800266c <HAL_ADC_MspInit+0x150>)
 80025dc:	f001 fac2 	bl	8003b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025e0:	2303      	movs	r3, #3
 80025e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025e4:	2303      	movs	r3, #3
 80025e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ec:	f107 031c 	add.w	r3, r7, #28
 80025f0:	4619      	mov	r1, r3
 80025f2:	481f      	ldr	r0, [pc, #124]	; (8002670 <HAL_ADC_MspInit+0x154>)
 80025f4:	f001 fab6 	bl	8003b64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80025f8:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <HAL_ADC_MspInit+0x158>)
 80025fa:	4a1f      	ldr	r2, [pc, #124]	; (8002678 <HAL_ADC_MspInit+0x15c>)
 80025fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <HAL_ADC_MspInit+0x158>)
 8002600:	2200      	movs	r2, #0
 8002602:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_ADC_MspInit+0x158>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <HAL_ADC_MspInit+0x158>)
 800260c:	2200      	movs	r2, #0
 800260e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002610:	4b18      	ldr	r3, [pc, #96]	; (8002674 <HAL_ADC_MspInit+0x158>)
 8002612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002616:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002618:	4b16      	ldr	r3, [pc, #88]	; (8002674 <HAL_ADC_MspInit+0x158>)
 800261a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800261e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002620:	4b14      	ldr	r3, [pc, #80]	; (8002674 <HAL_ADC_MspInit+0x158>)
 8002622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002626:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_ADC_MspInit+0x158>)
 800262a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800262e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002630:	4b10      	ldr	r3, [pc, #64]	; (8002674 <HAL_ADC_MspInit+0x158>)
 8002632:	2200      	movs	r2, #0
 8002634:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002636:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <HAL_ADC_MspInit+0x158>)
 8002638:	2200      	movs	r2, #0
 800263a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800263c:	480d      	ldr	r0, [pc, #52]	; (8002674 <HAL_ADC_MspInit+0x158>)
 800263e:	f000 ff21 	bl	8003484 <HAL_DMA_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002648:	f7ff ff3a 	bl	80024c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <HAL_ADC_MspInit+0x158>)
 8002650:	639a      	str	r2, [r3, #56]	; 0x38
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <HAL_ADC_MspInit+0x158>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002658:	bf00      	nop
 800265a:	3730      	adds	r7, #48	; 0x30
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40012000 	.word	0x40012000
 8002664:	40023800 	.word	0x40023800
 8002668:	40020800 	.word	0x40020800
 800266c:	40020000 	.word	0x40020000
 8002670:	40020400 	.word	0x40020400
 8002674:	20004014 	.word	0x20004014
 8002678:	40026410 	.word	0x40026410

0800267c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08e      	sub	sp, #56	; 0x38
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a63      	ldr	r2, [pc, #396]	; (8002828 <HAL_I2C_MspInit+0x1ac>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d12c      	bne.n	80026f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
 80026a2:	4b62      	ldr	r3, [pc, #392]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a61      	ldr	r2, [pc, #388]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b5f      	ldr	r3, [pc, #380]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	623b      	str	r3, [r7, #32]
 80026b8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026ba:	23c0      	movs	r3, #192	; 0xc0
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026be:	2312      	movs	r3, #18
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c6:	2303      	movs	r3, #3
 80026c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026ca:	2304      	movs	r3, #4
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d2:	4619      	mov	r1, r3
 80026d4:	4856      	ldr	r0, [pc, #344]	; (8002830 <HAL_I2C_MspInit+0x1b4>)
 80026d6:	f001 fa45 	bl	8003b64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	4a52      	ldr	r2, [pc, #328]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 80026e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026e8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ea:	4b50      	ldr	r3, [pc, #320]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f2:	61fb      	str	r3, [r7, #28]
 80026f4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80026f6:	e093      	b.n	8002820 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a4d      	ldr	r2, [pc, #308]	; (8002834 <HAL_I2C_MspInit+0x1b8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d13d      	bne.n	800277e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	4b49      	ldr	r3, [pc, #292]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a48      	ldr	r2, [pc, #288]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b46      	ldr	r3, [pc, #280]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800271e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002724:	2312      	movs	r3, #18
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272c:	2303      	movs	r3, #3
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002730:	2304      	movs	r3, #4
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002738:	4619      	mov	r1, r3
 800273a:	483d      	ldr	r0, [pc, #244]	; (8002830 <HAL_I2C_MspInit+0x1b4>)
 800273c:	f001 fa12 	bl	8003b64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002740:	2308      	movs	r3, #8
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002744:	2312      	movs	r3, #18
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274c:	2303      	movs	r3, #3
 800274e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002750:	2309      	movs	r3, #9
 8002752:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002758:	4619      	mov	r1, r3
 800275a:	4835      	ldr	r0, [pc, #212]	; (8002830 <HAL_I2C_MspInit+0x1b4>)
 800275c:	f001 fa02 	bl	8003b64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	4b31      	ldr	r3, [pc, #196]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	4a30      	ldr	r2, [pc, #192]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 800276a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800276e:	6413      	str	r3, [r2, #64]	; 0x40
 8002770:	4b2e      	ldr	r3, [pc, #184]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	697b      	ldr	r3, [r7, #20]
}
 800277c:	e050      	b.n	8002820 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2d      	ldr	r2, [pc, #180]	; (8002838 <HAL_I2C_MspInit+0x1bc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d14b      	bne.n	8002820 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002788:	2300      	movs	r3, #0
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	4b27      	ldr	r3, [pc, #156]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	4a26      	ldr	r2, [pc, #152]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	6313      	str	r3, [r2, #48]	; 0x30
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	4a1f      	ldr	r2, [pc, #124]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6313      	str	r3, [r2, #48]	; 0x30
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027c6:	2312      	movs	r3, #18
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ce:	2303      	movs	r3, #3
 80027d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027d2:	2304      	movs	r3, #4
 80027d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027da:	4619      	mov	r1, r3
 80027dc:	4817      	ldr	r0, [pc, #92]	; (800283c <HAL_I2C_MspInit+0x1c0>)
 80027de:	f001 f9c1 	bl	8003b64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e8:	2312      	movs	r3, #18
 80027ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f0:	2303      	movs	r3, #3
 80027f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027f4:	2304      	movs	r3, #4
 80027f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027fc:	4619      	mov	r1, r3
 80027fe:	4810      	ldr	r0, [pc, #64]	; (8002840 <HAL_I2C_MspInit+0x1c4>)
 8002800:	f001 f9b0 	bl	8003b64 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002804:	2300      	movs	r3, #0
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	4a07      	ldr	r2, [pc, #28]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 800280e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002812:	6413      	str	r3, [r2, #64]	; 0x40
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_I2C_MspInit+0x1b0>)
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]
}
 8002820:	bf00      	nop
 8002822:	3738      	adds	r7, #56	; 0x38
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40005400 	.word	0x40005400
 800282c:	40023800 	.word	0x40023800
 8002830:	40020400 	.word	0x40020400
 8002834:	40005800 	.word	0x40005800
 8002838:	40005c00 	.word	0x40005c00
 800283c:	40020800 	.word	0x40020800
 8002840:	40020000 	.word	0x40020000

08002844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002854:	d10d      	bne.n	8002872 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b09      	ldr	r3, [pc, #36]	; (8002880 <HAL_TIM_Base_MspInit+0x3c>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a08      	ldr	r2, [pc, #32]	; (8002880 <HAL_TIM_Base_MspInit+0x3c>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_TIM_Base_MspInit+0x3c>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800

08002884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002888:	e7fe      	b.n	8002888 <NMI_Handler+0x4>

0800288a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800288e:	e7fe      	b.n	800288e <HardFault_Handler+0x4>

08002890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002894:	e7fe      	b.n	8002894 <MemManage_Handler+0x4>

08002896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800289a:	e7fe      	b.n	800289a <BusFault_Handler+0x4>

0800289c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028a0:	e7fe      	b.n	80028a0 <UsageFault_Handler+0x4>

080028a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028d0:	f000 f89a 	bl	8002a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <DMA2_Stream0_IRQHandler+0x10>)
 80028de:	f000 fed7 	bl	8003690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20004014 	.word	0x20004014

080028ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <SystemInit+0x20>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <SystemInit+0x20>)
 80028f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002948 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002914:	480d      	ldr	r0, [pc, #52]	; (800294c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002916:	490e      	ldr	r1, [pc, #56]	; (8002950 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002918:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800291a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800291c:	e002      	b.n	8002924 <LoopCopyDataInit>

0800291e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800291e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002922:	3304      	adds	r3, #4

08002924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002928:	d3f9      	bcc.n	800291e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292a:	4a0b      	ldr	r2, [pc, #44]	; (8002958 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800292c:	4c0b      	ldr	r4, [pc, #44]	; (800295c <LoopFillZerobss+0x26>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002930:	e001      	b.n	8002936 <LoopFillZerobss>

08002932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002934:	3204      	adds	r2, #4

08002936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002938:	d3fb      	bcc.n	8002932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800293a:	f7ff ffd7 	bl	80028ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800293e:	f002 fe57 	bl	80055f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002942:	f7fe fc9d 	bl	8001280 <main>
  bx  lr    
 8002946:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002948:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800294c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002950:	20003f8c 	.word	0x20003f8c
  ldr r2, =_sidata
 8002954:	08005ba0 	.word	0x08005ba0
  ldr r2, =_sbss
 8002958:	20003f8c 	.word	0x20003f8c
  ldr r4, =_ebss
 800295c:	200043f4 	.word	0x200043f4

08002960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002960:	e7fe      	b.n	8002960 <ADC_IRQHandler>
	...

08002964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <HAL_Init+0x40>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0d      	ldr	r2, [pc, #52]	; (80029a4 <HAL_Init+0x40>)
 800296e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_Init+0x40>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <HAL_Init+0x40>)
 800297a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800297e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <HAL_Init+0x40>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <HAL_Init+0x40>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800298c:	2003      	movs	r0, #3
 800298e:	f000 fd37 	bl	8003400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002992:	200f      	movs	r0, #15
 8002994:	f000 f808 	bl	80029a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002998:	f7ff fd98 	bl	80024cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00

080029a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_InitTick+0x54>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_InitTick+0x58>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029be:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fd4f 	bl	800346a <HAL_SYSTICK_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00e      	b.n	80029f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b0f      	cmp	r3, #15
 80029da:	d80a      	bhi.n	80029f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029dc:	2200      	movs	r2, #0
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	f000 fd17 	bl	8003416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e8:	4a06      	ldr	r2, [pc, #24]	; (8002a04 <HAL_InitTick+0x5c>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e000      	b.n	80029f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20003f30 	.word	0x20003f30
 8002a00:	20003f38 	.word	0x20003f38
 8002a04:	20003f34 	.word	0x20003f34

08002a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_IncTick+0x20>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_IncTick+0x24>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <HAL_IncTick+0x24>)
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20003f38 	.word	0x20003f38
 8002a2c:	200042b8 	.word	0x200042b8

08002a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return uwTick;
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <HAL_GetTick+0x14>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	200042b8 	.word	0x200042b8

08002a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff ffee 	bl	8002a30 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d005      	beq.n	8002a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_Delay+0x44>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a6e:	bf00      	nop
 8002a70:	f7ff ffde 	bl	8002a30 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d8f7      	bhi.n	8002a70 <HAL_Delay+0x28>
  {
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20003f38 	.word	0x20003f38

08002a90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e033      	b.n	8002b0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff fd34 	bl	800251c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d118      	bne.n	8002b00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ad6:	f023 0302 	bic.w	r3, r3, #2
 8002ada:	f043 0202 	orr.w	r2, r3, #2
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fa3e 	bl	8002f64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f023 0303 	bic.w	r3, r3, #3
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
 8002afe:	e001      	b.n	8002b04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_Start_DMA+0x1e>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e0ce      	b.n	8002cd4 <HAL_ADC_Start_DMA+0x1bc>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d018      	beq.n	8002b7e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b5c:	4b5f      	ldr	r3, [pc, #380]	; (8002cdc <HAL_ADC_Start_DMA+0x1c4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a5f      	ldr	r2, [pc, #380]	; (8002ce0 <HAL_ADC_Start_DMA+0x1c8>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	0c9a      	lsrs	r2, r3, #18
 8002b68:	4613      	mov	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b70:	e002      	b.n	8002b78 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f9      	bne.n	8002b72 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b8c:	d107      	bne.n	8002b9e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	f040 8086 	bne.w	8002cba <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bd8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bec:	d106      	bne.n	8002bfc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f023 0206 	bic.w	r2, r3, #6
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	645a      	str	r2, [r3, #68]	; 0x44
 8002bfa:	e002      	b.n	8002c02 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c0a:	4b36      	ldr	r3, [pc, #216]	; (8002ce4 <HAL_ADC_Start_DMA+0x1cc>)
 8002c0c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	4a35      	ldr	r2, [pc, #212]	; (8002ce8 <HAL_ADC_Start_DMA+0x1d0>)
 8002c14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	4a34      	ldr	r2, [pc, #208]	; (8002cec <HAL_ADC_Start_DMA+0x1d4>)
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	4a33      	ldr	r2, [pc, #204]	; (8002cf0 <HAL_ADC_Start_DMA+0x1d8>)
 8002c24:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c2e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c3e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c4e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	334c      	adds	r3, #76	; 0x4c
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f000 fcbe 	bl	80035e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10f      	bne.n	8002c90 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d129      	bne.n	8002cd2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	e020      	b.n	8002cd2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a17      	ldr	r2, [pc, #92]	; (8002cf4 <HAL_ADC_Start_DMA+0x1dc>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d11b      	bne.n	8002cd2 <HAL_ADC_Start_DMA+0x1ba>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d114      	bne.n	8002cd2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	e00b      	b.n	8002cd2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f043 0210 	orr.w	r2, r3, #16
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f043 0201 	orr.w	r2, r3, #1
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20003f30 	.word	0x20003f30
 8002ce0:	431bde83 	.word	0x431bde83
 8002ce4:	40012300 	.word	0x40012300
 8002ce8:	0800315d 	.word	0x0800315d
 8002cec:	08003217 	.word	0x08003217
 8002cf0:	08003233 	.word	0x08003233
 8002cf4:	40012000 	.word	0x40012000

08002cf8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x1c>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e105      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x228>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b09      	cmp	r3, #9
 8002d4a:	d925      	bls.n	8002d98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68d9      	ldr	r1, [r3, #12]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	3b1e      	subs	r3, #30
 8002d62:	2207      	movs	r2, #7
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43da      	mvns	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	400a      	ands	r2, r1
 8002d70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68d9      	ldr	r1, [r3, #12]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	4618      	mov	r0, r3
 8002d84:	4603      	mov	r3, r0
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4403      	add	r3, r0
 8002d8a:	3b1e      	subs	r3, #30
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	e022      	b.n	8002dde <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6919      	ldr	r1, [r3, #16]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	2207      	movs	r2, #7
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43da      	mvns	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	400a      	ands	r2, r1
 8002dba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6919      	ldr	r1, [r3, #16]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	4618      	mov	r0, r3
 8002dce:	4603      	mov	r3, r0
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	4403      	add	r3, r0
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d824      	bhi.n	8002e30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	3b05      	subs	r3, #5
 8002df8:	221f      	movs	r2, #31
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	400a      	ands	r2, r1
 8002e06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4618      	mov	r0, r3
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	3b05      	subs	r3, #5
 8002e22:	fa00 f203 	lsl.w	r2, r0, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e2e:	e04c      	b.n	8002eca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b0c      	cmp	r3, #12
 8002e36:	d824      	bhi.n	8002e82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	3b23      	subs	r3, #35	; 0x23
 8002e4a:	221f      	movs	r2, #31
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43da      	mvns	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	400a      	ands	r2, r1
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	4618      	mov	r0, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	3b23      	subs	r3, #35	; 0x23
 8002e74:	fa00 f203 	lsl.w	r2, r0, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e80:	e023      	b.n	8002eca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	3b41      	subs	r3, #65	; 0x41
 8002e94:	221f      	movs	r2, #31
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	3b41      	subs	r3, #65	; 0x41
 8002ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eca:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <HAL_ADC_ConfigChannel+0x234>)
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a21      	ldr	r2, [pc, #132]	; (8002f58 <HAL_ADC_ConfigChannel+0x238>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d109      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x1cc>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b12      	cmp	r3, #18
 8002ede:	d105      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <HAL_ADC_ConfigChannel+0x238>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d123      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x21e>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b10      	cmp	r3, #16
 8002efc:	d003      	beq.n	8002f06 <HAL_ADC_ConfigChannel+0x1e6>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b11      	cmp	r3, #17
 8002f04:	d11b      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b10      	cmp	r3, #16
 8002f18:	d111      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <HAL_ADC_ConfigChannel+0x23c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a10      	ldr	r2, [pc, #64]	; (8002f60 <HAL_ADC_ConfigChannel+0x240>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	0c9a      	lsrs	r2, r3, #18
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f30:	e002      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f9      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	40012300 	.word	0x40012300
 8002f58:	40012000 	.word	0x40012000
 8002f5c:	20003f30 	.word	0x20003f30
 8002f60:	431bde83 	.word	0x431bde83

08002f64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f6c:	4b79      	ldr	r3, [pc, #484]	; (8003154 <ADC_Init+0x1f0>)
 8002f6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	021a      	lsls	r2, r3, #8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6899      	ldr	r1, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff6:	4a58      	ldr	r2, [pc, #352]	; (8003158 <ADC_Init+0x1f4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d022      	beq.n	8003042 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800300a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6899      	ldr	r1, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800302c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6899      	ldr	r1, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	e00f      	b.n	8003062 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003050:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003060:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0202 	bic.w	r2, r2, #2
 8003070:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6899      	ldr	r1, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	7e1b      	ldrb	r3, [r3, #24]
 800307c:	005a      	lsls	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01b      	beq.n	80030c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800309e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	3b01      	subs	r3, #1
 80030bc:	035a      	lsls	r2, r3, #13
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	e007      	b.n	80030d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	051a      	lsls	r2, r3, #20
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800310c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6899      	ldr	r1, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800311a:	025a      	lsls	r2, r3, #9
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6899      	ldr	r1, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	029a      	lsls	r2, r3, #10
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	609a      	str	r2, [r3, #8]
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40012300 	.word	0x40012300
 8003158:	0f000001 	.word	0x0f000001

0800315c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003172:	2b00      	cmp	r3, #0
 8003174:	d13c      	bne.n	80031f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d12b      	bne.n	80031e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003194:	2b00      	cmp	r3, #0
 8003196:	d127      	bne.n	80031e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d006      	beq.n	80031b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d119      	bne.n	80031e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0220 	bic.w	r2, r2, #32
 80031c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d105      	bne.n	80031e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	f043 0201 	orr.w	r2, r3, #1
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f7ff f839 	bl	8002260 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031ee:	e00e      	b.n	800320e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7ff fd85 	bl	8002d0c <HAL_ADC_ErrorCallback>
}
 8003202:	e004      	b.n	800320e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	4798      	blx	r3
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f7ff fd67 	bl	8002cf8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2240      	movs	r2, #64	; 0x40
 8003244:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f043 0204 	orr.w	r2, r3, #4
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f7ff fd5a 	bl	8002d0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003258:	bf00      	nop
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800327c:	4013      	ands	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800328c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003292:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	60d3      	str	r3, [r2, #12]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <__NVIC_GetPriorityGrouping+0x18>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	f003 0307 	and.w	r3, r3, #7
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	db0b      	blt.n	80032ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	f003 021f 	and.w	r2, r3, #31
 80032dc:	4907      	ldr	r1, [pc, #28]	; (80032fc <__NVIC_EnableIRQ+0x38>)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	2001      	movs	r0, #1
 80032e6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000e100 	.word	0xe000e100

08003300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	6039      	str	r1, [r7, #0]
 800330a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003310:	2b00      	cmp	r3, #0
 8003312:	db0a      	blt.n	800332a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	490c      	ldr	r1, [pc, #48]	; (800334c <__NVIC_SetPriority+0x4c>)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	0112      	lsls	r2, r2, #4
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	440b      	add	r3, r1
 8003324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003328:	e00a      	b.n	8003340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4908      	ldr	r1, [pc, #32]	; (8003350 <__NVIC_SetPriority+0x50>)
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	3b04      	subs	r3, #4
 8003338:	0112      	lsls	r2, r2, #4
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	440b      	add	r3, r1
 800333e:	761a      	strb	r2, [r3, #24]
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000e100 	.word	0xe000e100
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003354:	b480      	push	{r7}
 8003356:	b089      	sub	sp, #36	; 0x24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f1c3 0307 	rsb	r3, r3, #7
 800336e:	2b04      	cmp	r3, #4
 8003370:	bf28      	it	cs
 8003372:	2304      	movcs	r3, #4
 8003374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3304      	adds	r3, #4
 800337a:	2b06      	cmp	r3, #6
 800337c:	d902      	bls.n	8003384 <NVIC_EncodePriority+0x30>
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3b03      	subs	r3, #3
 8003382:	e000      	b.n	8003386 <NVIC_EncodePriority+0x32>
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003388:	f04f 32ff 	mov.w	r2, #4294967295
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43da      	mvns	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	401a      	ands	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800339c:	f04f 31ff 	mov.w	r1, #4294967295
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	43d9      	mvns	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ac:	4313      	orrs	r3, r2
         );
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3724      	adds	r7, #36	; 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033cc:	d301      	bcc.n	80033d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ce:	2301      	movs	r3, #1
 80033d0:	e00f      	b.n	80033f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <SysTick_Config+0x40>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033da:	210f      	movs	r1, #15
 80033dc:	f04f 30ff 	mov.w	r0, #4294967295
 80033e0:	f7ff ff8e 	bl	8003300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <SysTick_Config+0x40>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <SysTick_Config+0x40>)
 80033ec:	2207      	movs	r2, #7
 80033ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	e000e010 	.word	0xe000e010

08003400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff29 	bl	8003260 <__NVIC_SetPriorityGrouping>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003428:	f7ff ff3e 	bl	80032a8 <__NVIC_GetPriorityGrouping>
 800342c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	6978      	ldr	r0, [r7, #20]
 8003434:	f7ff ff8e 	bl	8003354 <NVIC_EncodePriority>
 8003438:	4602      	mov	r2, r0
 800343a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff5d 	bl	8003300 <__NVIC_SetPriority>
}
 8003446:	bf00      	nop
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	4603      	mov	r3, r0
 8003456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff ff31 	bl	80032c4 <__NVIC_EnableIRQ>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ffa2 	bl	80033bc <SysTick_Config>
 8003478:	4603      	mov	r3, r0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003490:	f7ff face 	bl	8002a30 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e099      	b.n	80035d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034c0:	e00f      	b.n	80034e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034c2:	f7ff fab5 	bl	8002a30 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	d908      	bls.n	80034e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2203      	movs	r2, #3
 80034da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e078      	b.n	80035d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e8      	bne.n	80034c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4b38      	ldr	r3, [pc, #224]	; (80035dc <HAL_DMA_Init+0x158>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800350e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800351a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	2b04      	cmp	r3, #4
 800353a:	d107      	bne.n	800354c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	4313      	orrs	r3, r2
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f023 0307 	bic.w	r3, r3, #7
 8003562:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	2b04      	cmp	r3, #4
 8003574:	d117      	bne.n	80035a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00e      	beq.n	80035a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fa6f 	bl	8003a6c <DMA_CheckFifoParam>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2240      	movs	r2, #64	; 0x40
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035a2:	2301      	movs	r3, #1
 80035a4:	e016      	b.n	80035d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fa26 	bl	8003a00 <DMA_CalcBaseAndBitshift>
 80035b4:	4603      	mov	r3, r0
 80035b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	223f      	movs	r2, #63	; 0x3f
 80035be:	409a      	lsls	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	f010803f 	.word	0xf010803f

080035e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_DMA_Start_IT+0x26>
 8003602:	2302      	movs	r3, #2
 8003604:	e040      	b.n	8003688 <HAL_DMA_Start_IT+0xa8>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d12f      	bne.n	800367a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2202      	movs	r2, #2
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f9b8 	bl	80039a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	223f      	movs	r2, #63	; 0x3f
 800363a:	409a      	lsls	r2, r3
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0216 	orr.w	r2, r2, #22
 800364e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d007      	beq.n	8003668 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0208 	orr.w	r2, r2, #8
 8003666:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	e005      	b.n	8003686 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003682:	2302      	movs	r3, #2
 8003684:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003686:	7dfb      	ldrb	r3, [r7, #23]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800369c:	4b8e      	ldr	r3, [pc, #568]	; (80038d8 <HAL_DMA_IRQHandler+0x248>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a8e      	ldr	r2, [pc, #568]	; (80038dc <HAL_DMA_IRQHandler+0x24c>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	0a9b      	lsrs	r3, r3, #10
 80036a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	2208      	movs	r2, #8
 80036bc:	409a      	lsls	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01a      	beq.n	80036fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0204 	bic.w	r2, r2, #4
 80036e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	2208      	movs	r2, #8
 80036ea:	409a      	lsls	r2, r3
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	f043 0201 	orr.w	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003700:	2201      	movs	r2, #1
 8003702:	409a      	lsls	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d012      	beq.n	8003732 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371e:	2201      	movs	r2, #1
 8003720:	409a      	lsls	r2, r3
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372a:	f043 0202 	orr.w	r2, r3, #2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	2204      	movs	r2, #4
 8003738:	409a      	lsls	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4013      	ands	r3, r2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d012      	beq.n	8003768 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00b      	beq.n	8003768 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	2204      	movs	r2, #4
 8003756:	409a      	lsls	r2, r3
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003760:	f043 0204 	orr.w	r2, r3, #4
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	2210      	movs	r2, #16
 800376e:	409a      	lsls	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4013      	ands	r3, r2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d043      	beq.n	8003800 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d03c      	beq.n	8003800 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378a:	2210      	movs	r2, #16
 800378c:	409a      	lsls	r2, r3
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d018      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d108      	bne.n	80037c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d024      	beq.n	8003800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	4798      	blx	r3
 80037be:	e01f      	b.n	8003800 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01b      	beq.n	8003800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	4798      	blx	r3
 80037d0:	e016      	b.n	8003800 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d107      	bne.n	80037f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0208 	bic.w	r2, r2, #8
 80037ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003804:	2220      	movs	r2, #32
 8003806:	409a      	lsls	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 808f 	beq.w	8003930 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 8087 	beq.w	8003930 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	2220      	movs	r2, #32
 8003828:	409a      	lsls	r2, r3
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b05      	cmp	r3, #5
 8003838:	d136      	bne.n	80038a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0216 	bic.w	r2, r2, #22
 8003848:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003858:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <HAL_DMA_IRQHandler+0x1da>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0208 	bic.w	r2, r2, #8
 8003878:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387e:	223f      	movs	r2, #63	; 0x3f
 8003880:	409a      	lsls	r2, r3
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389a:	2b00      	cmp	r3, #0
 800389c:	d07e      	beq.n	800399c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	4798      	blx	r3
        }
        return;
 80038a6:	e079      	b.n	800399c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d01d      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10d      	bne.n	80038e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d031      	beq.n	8003930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	4798      	blx	r3
 80038d4:	e02c      	b.n	8003930 <HAL_DMA_IRQHandler+0x2a0>
 80038d6:	bf00      	nop
 80038d8:	20003f30 	.word	0x20003f30
 80038dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d023      	beq.n	8003930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4798      	blx	r3
 80038f0:	e01e      	b.n	8003930 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10f      	bne.n	8003920 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0210 	bic.w	r2, r2, #16
 800390e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003934:	2b00      	cmp	r3, #0
 8003936:	d032      	beq.n	800399e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d022      	beq.n	800398a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2205      	movs	r2, #5
 8003948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0201 	bic.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	3301      	adds	r3, #1
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	429a      	cmp	r2, r3
 8003966:	d307      	bcc.n	8003978 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f2      	bne.n	800395c <HAL_DMA_IRQHandler+0x2cc>
 8003976:	e000      	b.n	800397a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003978:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398e:	2b00      	cmp	r3, #0
 8003990:	d005      	beq.n	800399e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	4798      	blx	r3
 800399a:	e000      	b.n	800399e <HAL_DMA_IRQHandler+0x30e>
        return;
 800399c:	bf00      	nop
    }
  }
}
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b40      	cmp	r3, #64	; 0x40
 80039d0:	d108      	bne.n	80039e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039e2:	e007      	b.n	80039f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	60da      	str	r2, [r3, #12]
}
 80039f4:	bf00      	nop
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	3b10      	subs	r3, #16
 8003a10:	4a14      	ldr	r2, [pc, #80]	; (8003a64 <DMA_CalcBaseAndBitshift+0x64>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a1a:	4a13      	ldr	r2, [pc, #76]	; (8003a68 <DMA_CalcBaseAndBitshift+0x68>)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d909      	bls.n	8003a42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a36:	f023 0303 	bic.w	r3, r3, #3
 8003a3a:	1d1a      	adds	r2, r3, #4
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	659a      	str	r2, [r3, #88]	; 0x58
 8003a40:	e007      	b.n	8003a52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	aaaaaaab 	.word	0xaaaaaaab
 8003a68:	08005b84 	.word	0x08005b84

08003a6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d11f      	bne.n	8003ac6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d856      	bhi.n	8003b3a <DMA_CheckFifoParam+0xce>
 8003a8c:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <DMA_CheckFifoParam+0x28>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003aa5 	.word	0x08003aa5
 8003a98:	08003ab7 	.word	0x08003ab7
 8003a9c:	08003aa5 	.word	0x08003aa5
 8003aa0:	08003b3b 	.word	0x08003b3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d046      	beq.n	8003b3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab4:	e043      	b.n	8003b3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003abe:	d140      	bne.n	8003b42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ac4:	e03d      	b.n	8003b42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ace:	d121      	bne.n	8003b14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d837      	bhi.n	8003b46 <DMA_CheckFifoParam+0xda>
 8003ad6:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <DMA_CheckFifoParam+0x70>)
 8003ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003adc:	08003aed 	.word	0x08003aed
 8003ae0:	08003af3 	.word	0x08003af3
 8003ae4:	08003aed 	.word	0x08003aed
 8003ae8:	08003b05 	.word	0x08003b05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
      break;
 8003af0:	e030      	b.n	8003b54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d025      	beq.n	8003b4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b02:	e022      	b.n	8003b4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b0c:	d11f      	bne.n	8003b4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b12:	e01c      	b.n	8003b4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d903      	bls.n	8003b22 <DMA_CheckFifoParam+0xb6>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d003      	beq.n	8003b28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b20:	e018      	b.n	8003b54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
      break;
 8003b26:	e015      	b.n	8003b54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00e      	beq.n	8003b52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
      break;
 8003b38:	e00b      	b.n	8003b52 <DMA_CheckFifoParam+0xe6>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e00a      	b.n	8003b54 <DMA_CheckFifoParam+0xe8>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e008      	b.n	8003b54 <DMA_CheckFifoParam+0xe8>
      break;
 8003b42:	bf00      	nop
 8003b44:	e006      	b.n	8003b54 <DMA_CheckFifoParam+0xe8>
      break;
 8003b46:	bf00      	nop
 8003b48:	e004      	b.n	8003b54 <DMA_CheckFifoParam+0xe8>
      break;
 8003b4a:	bf00      	nop
 8003b4c:	e002      	b.n	8003b54 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b4e:	bf00      	nop
 8003b50:	e000      	b.n	8003b54 <DMA_CheckFifoParam+0xe8>
      break;
 8003b52:	bf00      	nop
    }
  } 
  
  return status; 
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop

08003b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b089      	sub	sp, #36	; 0x24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	e159      	b.n	8003e34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b80:	2201      	movs	r2, #1
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4013      	ands	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	f040 8148 	bne.w	8003e2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d005      	beq.n	8003bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d130      	bne.n	8003c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bec:	2201      	movs	r2, #1
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 0201 	and.w	r2, r3, #1
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d017      	beq.n	8003c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	2203      	movs	r2, #3
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d123      	bne.n	8003ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	08da      	lsrs	r2, r3, #3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3208      	adds	r2, #8
 8003c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	220f      	movs	r2, #15
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4013      	ands	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	08da      	lsrs	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3208      	adds	r2, #8
 8003ca2:	69b9      	ldr	r1, [r7, #24]
 8003ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	2203      	movs	r2, #3
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0203 	and.w	r2, r3, #3
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80a2 	beq.w	8003e2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	4b57      	ldr	r3, [pc, #348]	; (8003e4c <HAL_GPIO_Init+0x2e8>)
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	4a56      	ldr	r2, [pc, #344]	; (8003e4c <HAL_GPIO_Init+0x2e8>)
 8003cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cfa:	4b54      	ldr	r3, [pc, #336]	; (8003e4c <HAL_GPIO_Init+0x2e8>)
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d06:	4a52      	ldr	r2, [pc, #328]	; (8003e50 <HAL_GPIO_Init+0x2ec>)
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	089b      	lsrs	r3, r3, #2
 8003d0c:	3302      	adds	r3, #2
 8003d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	220f      	movs	r2, #15
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	43db      	mvns	r3, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4013      	ands	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a49      	ldr	r2, [pc, #292]	; (8003e54 <HAL_GPIO_Init+0x2f0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d019      	beq.n	8003d66 <HAL_GPIO_Init+0x202>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a48      	ldr	r2, [pc, #288]	; (8003e58 <HAL_GPIO_Init+0x2f4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <HAL_GPIO_Init+0x1fe>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a47      	ldr	r2, [pc, #284]	; (8003e5c <HAL_GPIO_Init+0x2f8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00d      	beq.n	8003d5e <HAL_GPIO_Init+0x1fa>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a46      	ldr	r2, [pc, #280]	; (8003e60 <HAL_GPIO_Init+0x2fc>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d007      	beq.n	8003d5a <HAL_GPIO_Init+0x1f6>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a45      	ldr	r2, [pc, #276]	; (8003e64 <HAL_GPIO_Init+0x300>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d101      	bne.n	8003d56 <HAL_GPIO_Init+0x1f2>
 8003d52:	2304      	movs	r3, #4
 8003d54:	e008      	b.n	8003d68 <HAL_GPIO_Init+0x204>
 8003d56:	2307      	movs	r3, #7
 8003d58:	e006      	b.n	8003d68 <HAL_GPIO_Init+0x204>
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e004      	b.n	8003d68 <HAL_GPIO_Init+0x204>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e002      	b.n	8003d68 <HAL_GPIO_Init+0x204>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_GPIO_Init+0x204>
 8003d66:	2300      	movs	r3, #0
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	f002 0203 	and.w	r2, r2, #3
 8003d6e:	0092      	lsls	r2, r2, #2
 8003d70:	4093      	lsls	r3, r2
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d78:	4935      	ldr	r1, [pc, #212]	; (8003e50 <HAL_GPIO_Init+0x2ec>)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	3302      	adds	r3, #2
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d86:	4b38      	ldr	r3, [pc, #224]	; (8003e68 <HAL_GPIO_Init+0x304>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003daa:	4a2f      	ldr	r2, [pc, #188]	; (8003e68 <HAL_GPIO_Init+0x304>)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003db0:	4b2d      	ldr	r3, [pc, #180]	; (8003e68 <HAL_GPIO_Init+0x304>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dd4:	4a24      	ldr	r2, [pc, #144]	; (8003e68 <HAL_GPIO_Init+0x304>)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dda:	4b23      	ldr	r3, [pc, #140]	; (8003e68 <HAL_GPIO_Init+0x304>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	43db      	mvns	r3, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dfe:	4a1a      	ldr	r2, [pc, #104]	; (8003e68 <HAL_GPIO_Init+0x304>)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e04:	4b18      	ldr	r3, [pc, #96]	; (8003e68 <HAL_GPIO_Init+0x304>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e28:	4a0f      	ldr	r2, [pc, #60]	; (8003e68 <HAL_GPIO_Init+0x304>)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3301      	adds	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b0f      	cmp	r3, #15
 8003e38:	f67f aea2 	bls.w	8003b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	3724      	adds	r7, #36	; 0x24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	40013800 	.word	0x40013800
 8003e54:	40020000 	.word	0x40020000
 8003e58:	40020400 	.word	0x40020400
 8003e5c:	40020800 	.word	0x40020800
 8003e60:	40020c00 	.word	0x40020c00
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40013c00 	.word	0x40013c00

08003e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	807b      	strh	r3, [r7, #2]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e7c:	787b      	ldrb	r3, [r7, #1]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e82:	887a      	ldrh	r2, [r7, #2]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e88:	e003      	b.n	8003e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e8a:	887b      	ldrh	r3, [r7, #2]
 8003e8c:	041a      	lsls	r2, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	619a      	str	r2, [r3, #24]
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e12b      	b.n	800410a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fe fbd8 	bl	800267c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2224      	movs	r2, #36	; 0x24
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0201 	bic.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ef2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f04:	f001 f858 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 8003f08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4a81      	ldr	r2, [pc, #516]	; (8004114 <HAL_I2C_Init+0x274>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d807      	bhi.n	8003f24 <HAL_I2C_Init+0x84>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4a80      	ldr	r2, [pc, #512]	; (8004118 <HAL_I2C_Init+0x278>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	bf94      	ite	ls
 8003f1c:	2301      	movls	r3, #1
 8003f1e:	2300      	movhi	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	e006      	b.n	8003f32 <HAL_I2C_Init+0x92>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4a7d      	ldr	r2, [pc, #500]	; (800411c <HAL_I2C_Init+0x27c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	bf94      	ite	ls
 8003f2c:	2301      	movls	r3, #1
 8003f2e:	2300      	movhi	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e0e7      	b.n	800410a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4a78      	ldr	r2, [pc, #480]	; (8004120 <HAL_I2C_Init+0x280>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	0c9b      	lsrs	r3, r3, #18
 8003f44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	4a6a      	ldr	r2, [pc, #424]	; (8004114 <HAL_I2C_Init+0x274>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d802      	bhi.n	8003f74 <HAL_I2C_Init+0xd4>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	3301      	adds	r3, #1
 8003f72:	e009      	b.n	8003f88 <HAL_I2C_Init+0xe8>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f7a:	fb02 f303 	mul.w	r3, r2, r3
 8003f7e:	4a69      	ldr	r2, [pc, #420]	; (8004124 <HAL_I2C_Init+0x284>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	099b      	lsrs	r3, r3, #6
 8003f86:	3301      	adds	r3, #1
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	495c      	ldr	r1, [pc, #368]	; (8004114 <HAL_I2C_Init+0x274>)
 8003fa4:	428b      	cmp	r3, r1
 8003fa6:	d819      	bhi.n	8003fdc <HAL_I2C_Init+0x13c>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	1e59      	subs	r1, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fb6:	1c59      	adds	r1, r3, #1
 8003fb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fbc:	400b      	ands	r3, r1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_I2C_Init+0x138>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1e59      	subs	r1, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd6:	e051      	b.n	800407c <HAL_I2C_Init+0x1dc>
 8003fd8:	2304      	movs	r3, #4
 8003fda:	e04f      	b.n	800407c <HAL_I2C_Init+0x1dc>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d111      	bne.n	8004008 <HAL_I2C_Init+0x168>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1e58      	subs	r0, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	440b      	add	r3, r1
 8003ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	e012      	b.n	800402e <HAL_I2C_Init+0x18e>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	1e58      	subs	r0, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	0099      	lsls	r1, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	fbb0 f3f3 	udiv	r3, r0, r3
 800401e:	3301      	adds	r3, #1
 8004020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf0c      	ite	eq
 8004028:	2301      	moveq	r3, #1
 800402a:	2300      	movne	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_I2C_Init+0x196>
 8004032:	2301      	movs	r3, #1
 8004034:	e022      	b.n	800407c <HAL_I2C_Init+0x1dc>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10e      	bne.n	800405c <HAL_I2C_Init+0x1bc>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1e58      	subs	r0, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6859      	ldr	r1, [r3, #4]
 8004046:	460b      	mov	r3, r1
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	440b      	add	r3, r1
 800404c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004050:	3301      	adds	r3, #1
 8004052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800405a:	e00f      	b.n	800407c <HAL_I2C_Init+0x1dc>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1e58      	subs	r0, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6859      	ldr	r1, [r3, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	0099      	lsls	r1, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004072:	3301      	adds	r3, #1
 8004074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	6809      	ldr	r1, [r1, #0]
 8004080:	4313      	orrs	r3, r2
 8004082:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69da      	ldr	r2, [r3, #28]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6911      	ldr	r1, [r2, #16]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68d2      	ldr	r2, [r2, #12]
 80040b6:	4311      	orrs	r1, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	430b      	orrs	r3, r1
 80040be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	000186a0 	.word	0x000186a0
 8004118:	001e847f 	.word	0x001e847f
 800411c:	003d08ff 	.word	0x003d08ff
 8004120:	431bde83 	.word	0x431bde83
 8004124:	10624dd3 	.word	0x10624dd3

08004128 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	4608      	mov	r0, r1
 8004132:	4611      	mov	r1, r2
 8004134:	461a      	mov	r2, r3
 8004136:	4603      	mov	r3, r0
 8004138:	817b      	strh	r3, [r7, #10]
 800413a:	460b      	mov	r3, r1
 800413c:	813b      	strh	r3, [r7, #8]
 800413e:	4613      	mov	r3, r2
 8004140:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004142:	f7fe fc75 	bl	8002a30 <HAL_GetTick>
 8004146:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b20      	cmp	r3, #32
 8004152:	f040 80d9 	bne.w	8004308 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	2319      	movs	r3, #25
 800415c:	2201      	movs	r2, #1
 800415e:	496d      	ldr	r1, [pc, #436]	; (8004314 <HAL_I2C_Mem_Write+0x1ec>)
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f971 	bl	8004448 <I2C_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800416c:	2302      	movs	r3, #2
 800416e:	e0cc      	b.n	800430a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_I2C_Mem_Write+0x56>
 800417a:	2302      	movs	r3, #2
 800417c:	e0c5      	b.n	800430a <HAL_I2C_Mem_Write+0x1e2>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b01      	cmp	r3, #1
 8004192:	d007      	beq.n	80041a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2221      	movs	r2, #33	; 0x21
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2240      	movs	r2, #64	; 0x40
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a3a      	ldr	r2, [r7, #32]
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4a4d      	ldr	r2, [pc, #308]	; (8004318 <HAL_I2C_Mem_Write+0x1f0>)
 80041e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041e6:	88f8      	ldrh	r0, [r7, #6]
 80041e8:	893a      	ldrh	r2, [r7, #8]
 80041ea:	8979      	ldrh	r1, [r7, #10]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	9301      	str	r3, [sp, #4]
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	4603      	mov	r3, r0
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f890 	bl	800431c <I2C_RequestMemoryWrite>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d052      	beq.n	80042a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e081      	b.n	800430a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f9f2 	bl	80045f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	2b04      	cmp	r3, #4
 800421c:	d107      	bne.n	800422e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e06b      	b.n	800430a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	781a      	ldrb	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b04      	cmp	r3, #4
 800426e:	d11b      	bne.n	80042a8 <HAL_I2C_Mem_Write+0x180>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	2b00      	cmp	r3, #0
 8004276:	d017      	beq.n	80042a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	781a      	ldrb	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1aa      	bne.n	8004206 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f9de 	bl	8004676 <I2C_WaitOnBTFFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00d      	beq.n	80042dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d107      	bne.n	80042d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e016      	b.n	800430a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	e000      	b.n	800430a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004308:	2302      	movs	r3, #2
  }
}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	00100002 	.word	0x00100002
 8004318:	ffff0000 	.word	0xffff0000

0800431c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	4608      	mov	r0, r1
 8004326:	4611      	mov	r1, r2
 8004328:	461a      	mov	r2, r3
 800432a:	4603      	mov	r3, r0
 800432c:	817b      	strh	r3, [r7, #10]
 800432e:	460b      	mov	r3, r1
 8004330:	813b      	strh	r3, [r7, #8]
 8004332:	4613      	mov	r3, r2
 8004334:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004344:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	2200      	movs	r2, #0
 800434e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f878 	bl	8004448 <I2C_WaitOnFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00d      	beq.n	800437a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436c:	d103      	bne.n	8004376 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004374:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e05f      	b.n	800443a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800437a:	897b      	ldrh	r3, [r7, #10]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004388:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	6a3a      	ldr	r2, [r7, #32]
 800438e:	492d      	ldr	r1, [pc, #180]	; (8004444 <I2C_RequestMemoryWrite+0x128>)
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f8b0 	bl	80044f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e04c      	b.n	800443a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b8:	6a39      	ldr	r1, [r7, #32]
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f91a 	bl	80045f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00d      	beq.n	80043e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d107      	bne.n	80043de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e02b      	b.n	800443a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d105      	bne.n	80043f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043e8:	893b      	ldrh	r3, [r7, #8]
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	611a      	str	r2, [r3, #16]
 80043f2:	e021      	b.n	8004438 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043f4:	893b      	ldrh	r3, [r7, #8]
 80043f6:	0a1b      	lsrs	r3, r3, #8
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004404:	6a39      	ldr	r1, [r7, #32]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f8f4 	bl	80045f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00d      	beq.n	800442e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	2b04      	cmp	r3, #4
 8004418:	d107      	bne.n	800442a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004428:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e005      	b.n	800443a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800442e:	893b      	ldrh	r3, [r7, #8]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	00010002 	.word	0x00010002

08004448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	4613      	mov	r3, r2
 8004456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004458:	e025      	b.n	80044a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d021      	beq.n	80044a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004462:	f7fe fae5 	bl	8002a30 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d302      	bcc.n	8004478 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d116      	bne.n	80044a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f043 0220 	orr.w	r2, r3, #32
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e023      	b.n	80044ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	0c1b      	lsrs	r3, r3, #16
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d10d      	bne.n	80044cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	43da      	mvns	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4013      	ands	r3, r2
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bf0c      	ite	eq
 80044c2:	2301      	moveq	r3, #1
 80044c4:	2300      	movne	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	e00c      	b.n	80044e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	43da      	mvns	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4013      	ands	r3, r2
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bf0c      	ite	eq
 80044de:	2301      	moveq	r3, #1
 80044e0:	2300      	movne	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d0b6      	beq.n	800445a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
 8004502:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004504:	e051      	b.n	80045aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004514:	d123      	bne.n	800455e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004524:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800452e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f043 0204 	orr.w	r2, r3, #4
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e046      	b.n	80045ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d021      	beq.n	80045aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004566:	f7fe fa63 	bl	8002a30 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	429a      	cmp	r2, r3
 8004574:	d302      	bcc.n	800457c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d116      	bne.n	80045aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f043 0220 	orr.w	r2, r3, #32
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e020      	b.n	80045ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	0c1b      	lsrs	r3, r3, #16
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d10c      	bne.n	80045ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	43da      	mvns	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4013      	ands	r3, r2
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	bf14      	ite	ne
 80045c6:	2301      	movne	r3, #1
 80045c8:	2300      	moveq	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	e00b      	b.n	80045e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	43da      	mvns	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4013      	ands	r3, r2
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	bf14      	ite	ne
 80045e0:	2301      	movne	r3, #1
 80045e2:	2300      	moveq	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d18d      	bne.n	8004506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004600:	e02d      	b.n	800465e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f878 	bl	80046f8 <I2C_IsAcknowledgeFailed>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e02d      	b.n	800466e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d021      	beq.n	800465e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461a:	f7fe fa09 	bl	8002a30 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	429a      	cmp	r2, r3
 8004628:	d302      	bcc.n	8004630 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d116      	bne.n	800465e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f043 0220 	orr.w	r2, r3, #32
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e007      	b.n	800466e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	2b80      	cmp	r3, #128	; 0x80
 800466a:	d1ca      	bne.n	8004602 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004682:	e02d      	b.n	80046e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f837 	bl	80046f8 <I2C_IsAcknowledgeFailed>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e02d      	b.n	80046f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469a:	d021      	beq.n	80046e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469c:	f7fe f9c8 	bl	8002a30 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d302      	bcc.n	80046b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d116      	bne.n	80046e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	f043 0220 	orr.w	r2, r3, #32
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e007      	b.n	80046f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d1ca      	bne.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470e:	d11b      	bne.n	8004748 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004718:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	f043 0204 	orr.w	r2, r3, #4
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e267      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d075      	beq.n	8004862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004776:	4b88      	ldr	r3, [pc, #544]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 030c 	and.w	r3, r3, #12
 800477e:	2b04      	cmp	r3, #4
 8004780:	d00c      	beq.n	800479c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004782:	4b85      	ldr	r3, [pc, #532]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800478a:	2b08      	cmp	r3, #8
 800478c:	d112      	bne.n	80047b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800478e:	4b82      	ldr	r3, [pc, #520]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800479a:	d10b      	bne.n	80047b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479c:	4b7e      	ldr	r3, [pc, #504]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d05b      	beq.n	8004860 <HAL_RCC_OscConfig+0x108>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d157      	bne.n	8004860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e242      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047bc:	d106      	bne.n	80047cc <HAL_RCC_OscConfig+0x74>
 80047be:	4b76      	ldr	r3, [pc, #472]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a75      	ldr	r2, [pc, #468]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e01d      	b.n	8004808 <HAL_RCC_OscConfig+0xb0>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0x98>
 80047d6:	4b70      	ldr	r3, [pc, #448]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a6f      	ldr	r2, [pc, #444]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	4b6d      	ldr	r3, [pc, #436]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a6c      	ldr	r2, [pc, #432]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	e00b      	b.n	8004808 <HAL_RCC_OscConfig+0xb0>
 80047f0:	4b69      	ldr	r3, [pc, #420]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a68      	ldr	r2, [pc, #416]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	4b66      	ldr	r3, [pc, #408]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a65      	ldr	r2, [pc, #404]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d013      	beq.n	8004838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004810:	f7fe f90e 	bl	8002a30 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004818:	f7fe f90a 	bl	8002a30 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b64      	cmp	r3, #100	; 0x64
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e207      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482a:	4b5b      	ldr	r3, [pc, #364]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0xc0>
 8004836:	e014      	b.n	8004862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004838:	f7fe f8fa 	bl	8002a30 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004840:	f7fe f8f6 	bl	8002a30 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e1f3      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004852:	4b51      	ldr	r3, [pc, #324]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0xe8>
 800485e:	e000      	b.n	8004862 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d063      	beq.n	8004936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800486e:	4b4a      	ldr	r3, [pc, #296]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800487a:	4b47      	ldr	r3, [pc, #284]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004882:	2b08      	cmp	r3, #8
 8004884:	d11c      	bne.n	80048c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004886:	4b44      	ldr	r3, [pc, #272]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d116      	bne.n	80048c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004892:	4b41      	ldr	r3, [pc, #260]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d005      	beq.n	80048aa <HAL_RCC_OscConfig+0x152>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d001      	beq.n	80048aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e1c7      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048aa:	4b3b      	ldr	r3, [pc, #236]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	4937      	ldr	r1, [pc, #220]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048be:	e03a      	b.n	8004936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d020      	beq.n	800490a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048c8:	4b34      	ldr	r3, [pc, #208]	; (800499c <HAL_RCC_OscConfig+0x244>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ce:	f7fe f8af 	bl	8002a30 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048d6:	f7fe f8ab 	bl	8002a30 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e1a8      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e8:	4b2b      	ldr	r3, [pc, #172]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f4:	4b28      	ldr	r3, [pc, #160]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4925      	ldr	r1, [pc, #148]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 8004904:	4313      	orrs	r3, r2
 8004906:	600b      	str	r3, [r1, #0]
 8004908:	e015      	b.n	8004936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800490a:	4b24      	ldr	r3, [pc, #144]	; (800499c <HAL_RCC_OscConfig+0x244>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fe f88e 	bl	8002a30 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004918:	f7fe f88a 	bl	8002a30 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e187      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800492a:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d036      	beq.n	80049b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d016      	beq.n	8004978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800494a:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <HAL_RCC_OscConfig+0x248>)
 800494c:	2201      	movs	r2, #1
 800494e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fe f86e 	bl	8002a30 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004958:	f7fe f86a 	bl	8002a30 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e167      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800496a:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_RCC_OscConfig+0x240>)
 800496c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0x200>
 8004976:	e01b      	b.n	80049b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004978:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <HAL_RCC_OscConfig+0x248>)
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497e:	f7fe f857 	bl	8002a30 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004984:	e00e      	b.n	80049a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004986:	f7fe f853 	bl	8002a30 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d907      	bls.n	80049a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e150      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
 8004998:	40023800 	.word	0x40023800
 800499c:	42470000 	.word	0x42470000
 80049a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a4:	4b88      	ldr	r3, [pc, #544]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 80049a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1ea      	bne.n	8004986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 8097 	beq.w	8004aec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c2:	4b81      	ldr	r3, [pc, #516]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10f      	bne.n	80049ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ce:	2300      	movs	r3, #0
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	4b7d      	ldr	r3, [pc, #500]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	4a7c      	ldr	r2, [pc, #496]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 80049d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049dc:	6413      	str	r3, [r2, #64]	; 0x40
 80049de:	4b7a      	ldr	r3, [pc, #488]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e6:	60bb      	str	r3, [r7, #8]
 80049e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ea:	2301      	movs	r3, #1
 80049ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ee:	4b77      	ldr	r3, [pc, #476]	; (8004bcc <HAL_RCC_OscConfig+0x474>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d118      	bne.n	8004a2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049fa:	4b74      	ldr	r3, [pc, #464]	; (8004bcc <HAL_RCC_OscConfig+0x474>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a73      	ldr	r2, [pc, #460]	; (8004bcc <HAL_RCC_OscConfig+0x474>)
 8004a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a06:	f7fe f813 	bl	8002a30 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0e:	f7fe f80f 	bl	8002a30 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e10c      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a20:	4b6a      	ldr	r3, [pc, #424]	; (8004bcc <HAL_RCC_OscConfig+0x474>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d106      	bne.n	8004a42 <HAL_RCC_OscConfig+0x2ea>
 8004a34:	4b64      	ldr	r3, [pc, #400]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	4a63      	ldr	r2, [pc, #396]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a40:	e01c      	b.n	8004a7c <HAL_RCC_OscConfig+0x324>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b05      	cmp	r3, #5
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x30c>
 8004a4a:	4b5f      	ldr	r3, [pc, #380]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	4a5e      	ldr	r2, [pc, #376]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a50:	f043 0304 	orr.w	r3, r3, #4
 8004a54:	6713      	str	r3, [r2, #112]	; 0x70
 8004a56:	4b5c      	ldr	r3, [pc, #368]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	4a5b      	ldr	r2, [pc, #364]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	6713      	str	r3, [r2, #112]	; 0x70
 8004a62:	e00b      	b.n	8004a7c <HAL_RCC_OscConfig+0x324>
 8004a64:	4b58      	ldr	r3, [pc, #352]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a68:	4a57      	ldr	r2, [pc, #348]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a6a:	f023 0301 	bic.w	r3, r3, #1
 8004a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a70:	4b55      	ldr	r3, [pc, #340]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a74:	4a54      	ldr	r2, [pc, #336]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004a76:	f023 0304 	bic.w	r3, r3, #4
 8004a7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d015      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a84:	f7fd ffd4 	bl	8002a30 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a8c:	f7fd ffd0 	bl	8002a30 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e0cb      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa2:	4b49      	ldr	r3, [pc, #292]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0ee      	beq.n	8004a8c <HAL_RCC_OscConfig+0x334>
 8004aae:	e014      	b.n	8004ada <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab0:	f7fd ffbe 	bl	8002a30 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab6:	e00a      	b.n	8004ace <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab8:	f7fd ffba 	bl	8002a30 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e0b5      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ace:	4b3e      	ldr	r3, [pc, #248]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1ee      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ada:	7dfb      	ldrb	r3, [r7, #23]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d105      	bne.n	8004aec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae0:	4b39      	ldr	r3, [pc, #228]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	4a38      	ldr	r2, [pc, #224]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80a1 	beq.w	8004c38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004af6:	4b34      	ldr	r3, [pc, #208]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d05c      	beq.n	8004bbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d141      	bne.n	8004b8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b0a:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <HAL_RCC_OscConfig+0x478>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b10:	f7fd ff8e 	bl	8002a30 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b18:	f7fd ff8a 	bl	8002a30 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e087      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2a:	4b27      	ldr	r3, [pc, #156]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69da      	ldr	r2, [r3, #28]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	019b      	lsls	r3, r3, #6
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	085b      	lsrs	r3, r3, #1
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	041b      	lsls	r3, r3, #16
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	061b      	lsls	r3, r3, #24
 8004b5a:	491b      	ldr	r1, [pc, #108]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b60:	4b1b      	ldr	r3, [pc, #108]	; (8004bd0 <HAL_RCC_OscConfig+0x478>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b66:	f7fd ff63 	bl	8002a30 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b6e:	f7fd ff5f 	bl	8002a30 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e05c      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b80:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f0      	beq.n	8004b6e <HAL_RCC_OscConfig+0x416>
 8004b8c:	e054      	b.n	8004c38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8e:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <HAL_RCC_OscConfig+0x478>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b94:	f7fd ff4c 	bl	8002a30 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b9c:	f7fd ff48 	bl	8002a30 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e045      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <HAL_RCC_OscConfig+0x470>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x444>
 8004bba:	e03d      	b.n	8004c38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d107      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e038      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	40007000 	.word	0x40007000
 8004bd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bd4:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <HAL_RCC_OscConfig+0x4ec>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d028      	beq.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d121      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d11a      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c04:	4013      	ands	r3, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d111      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	085b      	lsrs	r3, r3, #1
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d107      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d001      	beq.n	8004c38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40023800 	.word	0x40023800

08004c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0cc      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c5c:	4b68      	ldr	r3, [pc, #416]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d90c      	bls.n	8004c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6a:	4b65      	ldr	r3, [pc, #404]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b63      	ldr	r3, [pc, #396]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0b8      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d020      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c9c:	4b59      	ldr	r3, [pc, #356]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	4a58      	ldr	r2, [pc, #352]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ca6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cb4:	4b53      	ldr	r3, [pc, #332]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	4a52      	ldr	r2, [pc, #328]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc0:	4b50      	ldr	r3, [pc, #320]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	494d      	ldr	r1, [pc, #308]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d044      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d107      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce6:	4b47      	ldr	r3, [pc, #284]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d119      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e07f      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d003      	beq.n	8004d06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d107      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d06:	4b3f      	ldr	r3, [pc, #252]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d109      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e06f      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d16:	4b3b      	ldr	r3, [pc, #236]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e067      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d26:	4b37      	ldr	r3, [pc, #220]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f023 0203 	bic.w	r2, r3, #3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	4934      	ldr	r1, [pc, #208]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d38:	f7fd fe7a 	bl	8002a30 <HAL_GetTick>
 8004d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3e:	e00a      	b.n	8004d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d40:	f7fd fe76 	bl	8002a30 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e04f      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d56:	4b2b      	ldr	r3, [pc, #172]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 020c 	and.w	r2, r3, #12
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d1eb      	bne.n	8004d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d68:	4b25      	ldr	r3, [pc, #148]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d20c      	bcs.n	8004d90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d76:	4b22      	ldr	r3, [pc, #136]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7e:	4b20      	ldr	r3, [pc, #128]	; (8004e00 <HAL_RCC_ClockConfig+0x1b8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e032      	b.n	8004df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d9c:	4b19      	ldr	r3, [pc, #100]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	4916      	ldr	r1, [pc, #88]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dba:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	490e      	ldr	r1, [pc, #56]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dce:	f000 f821 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	091b      	lsrs	r3, r3, #4
 8004dda:	f003 030f 	and.w	r3, r3, #15
 8004dde:	490a      	ldr	r1, [pc, #40]	; (8004e08 <HAL_RCC_ClockConfig+0x1c0>)
 8004de0:	5ccb      	ldrb	r3, [r1, r3]
 8004de2:	fa22 f303 	lsr.w	r3, r2, r3
 8004de6:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <HAL_RCC_ClockConfig+0x1c4>)
 8004de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <HAL_RCC_ClockConfig+0x1c8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fd fdda 	bl	80029a8 <HAL_InitTick>

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40023c00 	.word	0x40023c00
 8004e04:	40023800 	.word	0x40023800
 8004e08:	08005b6c 	.word	0x08005b6c
 8004e0c:	20003f30 	.word	0x20003f30
 8004e10:	20003f34 	.word	0x20003f34

08004e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e18:	b090      	sub	sp, #64	; 0x40
 8004e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e20:	2300      	movs	r3, #0
 8004e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e24:	2300      	movs	r3, #0
 8004e26:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e2c:	4b59      	ldr	r3, [pc, #356]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 030c 	and.w	r3, r3, #12
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d00d      	beq.n	8004e54 <HAL_RCC_GetSysClockFreq+0x40>
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	f200 80a1 	bhi.w	8004f80 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_RCC_GetSysClockFreq+0x34>
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d003      	beq.n	8004e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e46:	e09b      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e48:	4b53      	ldr	r3, [pc, #332]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e4a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004e4c:	e09b      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e4e:	4b53      	ldr	r3, [pc, #332]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8004e50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e52:	e098      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e54:	4b4f      	ldr	r3, [pc, #316]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e5e:	4b4d      	ldr	r3, [pc, #308]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d028      	beq.n	8004ebc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6a:	4b4a      	ldr	r3, [pc, #296]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	099b      	lsrs	r3, r3, #6
 8004e70:	2200      	movs	r2, #0
 8004e72:	623b      	str	r3, [r7, #32]
 8004e74:	627a      	str	r2, [r7, #36]	; 0x24
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	4b47      	ldr	r3, [pc, #284]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8004e80:	fb03 f201 	mul.w	r2, r3, r1
 8004e84:	2300      	movs	r3, #0
 8004e86:	fb00 f303 	mul.w	r3, r0, r3
 8004e8a:	4413      	add	r3, r2
 8004e8c:	4a43      	ldr	r2, [pc, #268]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8004e8e:	fba0 1202 	umull	r1, r2, r0, r2
 8004e92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e94:	460a      	mov	r2, r1
 8004e96:	62ba      	str	r2, [r7, #40]	; 0x28
 8004e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e9a:	4413      	add	r3, r2
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	61bb      	str	r3, [r7, #24]
 8004ea4:	61fa      	str	r2, [r7, #28]
 8004ea6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004eae:	f7fb fe1f 	bl	8000af0 <__aeabi_uldivmod>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eba:	e053      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ebc:	4b35      	ldr	r3, [pc, #212]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	099b      	lsrs	r3, r3, #6
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	617a      	str	r2, [r7, #20]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ece:	f04f 0b00 	mov.w	fp, #0
 8004ed2:	4652      	mov	r2, sl
 8004ed4:	465b      	mov	r3, fp
 8004ed6:	f04f 0000 	mov.w	r0, #0
 8004eda:	f04f 0100 	mov.w	r1, #0
 8004ede:	0159      	lsls	r1, r3, #5
 8004ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee4:	0150      	lsls	r0, r2, #5
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	ebb2 080a 	subs.w	r8, r2, sl
 8004eee:	eb63 090b 	sbc.w	r9, r3, fp
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004efe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f06:	ebb2 0408 	subs.w	r4, r2, r8
 8004f0a:	eb63 0509 	sbc.w	r5, r3, r9
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	f04f 0300 	mov.w	r3, #0
 8004f16:	00eb      	lsls	r3, r5, #3
 8004f18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f1c:	00e2      	lsls	r2, r4, #3
 8004f1e:	4614      	mov	r4, r2
 8004f20:	461d      	mov	r5, r3
 8004f22:	eb14 030a 	adds.w	r3, r4, sl
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	eb45 030b 	adc.w	r3, r5, fp
 8004f2c:	607b      	str	r3, [r7, #4]
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	028b      	lsls	r3, r1, #10
 8004f3e:	4621      	mov	r1, r4
 8004f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f44:	4621      	mov	r1, r4
 8004f46:	028a      	lsls	r2, r1, #10
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4e:	2200      	movs	r2, #0
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	60fa      	str	r2, [r7, #12]
 8004f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f58:	f7fb fdca 	bl	8000af0 <__aeabi_uldivmod>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4613      	mov	r3, r2
 8004f62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f64:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	0c1b      	lsrs	r3, r3, #16
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	3301      	adds	r3, #1
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004f74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f7e:	e002      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f80:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3740      	adds	r7, #64	; 0x40
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f92:	bf00      	nop
 8004f94:	40023800 	.word	0x40023800
 8004f98:	00f42400 	.word	0x00f42400
 8004f9c:	019bfcc0 	.word	0x019bfcc0

08004fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa4:	4b03      	ldr	r3, [pc, #12]	; (8004fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20003f30 	.word	0x20003f30

08004fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fbc:	f7ff fff0 	bl	8004fa0 <HAL_RCC_GetHCLKFreq>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	0a9b      	lsrs	r3, r3, #10
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	4903      	ldr	r1, [pc, #12]	; (8004fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fce:	5ccb      	ldrb	r3, [r1, r3]
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	08005b7c 	.word	0x08005b7c

08004fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e041      	b.n	8005076 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fd fc1c 	bl	8002844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f000 f950 	bl	80052c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b01      	cmp	r3, #1
 8005092:	d001      	beq.n	8005098 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e03c      	b.n	8005112 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1e      	ldr	r2, [pc, #120]	; (8005120 <HAL_TIM_Base_Start+0xa0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d018      	beq.n	80050dc <HAL_TIM_Base_Start+0x5c>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b2:	d013      	beq.n	80050dc <HAL_TIM_Base_Start+0x5c>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1a      	ldr	r2, [pc, #104]	; (8005124 <HAL_TIM_Base_Start+0xa4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00e      	beq.n	80050dc <HAL_TIM_Base_Start+0x5c>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a19      	ldr	r2, [pc, #100]	; (8005128 <HAL_TIM_Base_Start+0xa8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d009      	beq.n	80050dc <HAL_TIM_Base_Start+0x5c>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a17      	ldr	r2, [pc, #92]	; (800512c <HAL_TIM_Base_Start+0xac>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d004      	beq.n	80050dc <HAL_TIM_Base_Start+0x5c>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a16      	ldr	r2, [pc, #88]	; (8005130 <HAL_TIM_Base_Start+0xb0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d111      	bne.n	8005100 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b06      	cmp	r3, #6
 80050ec:	d010      	beq.n	8005110 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0201 	orr.w	r2, r2, #1
 80050fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fe:	e007      	b.n	8005110 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40010000 	.word	0x40010000
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800
 800512c:	40000c00 	.word	0x40000c00
 8005130:	40014000 	.word	0x40014000

08005134 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_TIM_ConfigClockSource+0x1c>
 800514c:	2302      	movs	r3, #2
 800514e:	e0b4      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x186>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800516e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005176:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005188:	d03e      	beq.n	8005208 <HAL_TIM_ConfigClockSource+0xd4>
 800518a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800518e:	f200 8087 	bhi.w	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005196:	f000 8086 	beq.w	80052a6 <HAL_TIM_ConfigClockSource+0x172>
 800519a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519e:	d87f      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
 80051a0:	2b70      	cmp	r3, #112	; 0x70
 80051a2:	d01a      	beq.n	80051da <HAL_TIM_ConfigClockSource+0xa6>
 80051a4:	2b70      	cmp	r3, #112	; 0x70
 80051a6:	d87b      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
 80051a8:	2b60      	cmp	r3, #96	; 0x60
 80051aa:	d050      	beq.n	800524e <HAL_TIM_ConfigClockSource+0x11a>
 80051ac:	2b60      	cmp	r3, #96	; 0x60
 80051ae:	d877      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
 80051b0:	2b50      	cmp	r3, #80	; 0x50
 80051b2:	d03c      	beq.n	800522e <HAL_TIM_ConfigClockSource+0xfa>
 80051b4:	2b50      	cmp	r3, #80	; 0x50
 80051b6:	d873      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
 80051b8:	2b40      	cmp	r3, #64	; 0x40
 80051ba:	d058      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x13a>
 80051bc:	2b40      	cmp	r3, #64	; 0x40
 80051be:	d86f      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
 80051c0:	2b30      	cmp	r3, #48	; 0x30
 80051c2:	d064      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x15a>
 80051c4:	2b30      	cmp	r3, #48	; 0x30
 80051c6:	d86b      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	d060      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x15a>
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	d867      	bhi.n	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d05c      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x15a>
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d05a      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x15a>
 80051d8:	e062      	b.n	80052a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6899      	ldr	r1, [r3, #8]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f000 f965 	bl	80054b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	609a      	str	r2, [r3, #8]
      break;
 8005206:	e04f      	b.n	80052a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6818      	ldr	r0, [r3, #0]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	6899      	ldr	r1, [r3, #8]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f000 f94e 	bl	80054b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800522a:	609a      	str	r2, [r3, #8]
      break;
 800522c:	e03c      	b.n	80052a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6859      	ldr	r1, [r3, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	461a      	mov	r2, r3
 800523c:	f000 f8c2 	bl	80053c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2150      	movs	r1, #80	; 0x50
 8005246:	4618      	mov	r0, r3
 8005248:	f000 f91b 	bl	8005482 <TIM_ITRx_SetConfig>
      break;
 800524c:	e02c      	b.n	80052a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6859      	ldr	r1, [r3, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	461a      	mov	r2, r3
 800525c:	f000 f8e1 	bl	8005422 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2160      	movs	r1, #96	; 0x60
 8005266:	4618      	mov	r0, r3
 8005268:	f000 f90b 	bl	8005482 <TIM_ITRx_SetConfig>
      break;
 800526c:	e01c      	b.n	80052a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6859      	ldr	r1, [r3, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	461a      	mov	r2, r3
 800527c:	f000 f8a2 	bl	80053c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2140      	movs	r1, #64	; 0x40
 8005286:	4618      	mov	r0, r3
 8005288:	f000 f8fb 	bl	8005482 <TIM_ITRx_SetConfig>
      break;
 800528c:	e00c      	b.n	80052a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4619      	mov	r1, r3
 8005298:	4610      	mov	r0, r2
 800529a:	f000 f8f2 	bl	8005482 <TIM_ITRx_SetConfig>
      break;
 800529e:	e003      	b.n	80052a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
      break;
 80052a4:	e000      	b.n	80052a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a34      	ldr	r2, [pc, #208]	; (80053a8 <TIM_Base_SetConfig+0xe4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00f      	beq.n	80052fc <TIM_Base_SetConfig+0x38>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e2:	d00b      	beq.n	80052fc <TIM_Base_SetConfig+0x38>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a31      	ldr	r2, [pc, #196]	; (80053ac <TIM_Base_SetConfig+0xe8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d007      	beq.n	80052fc <TIM_Base_SetConfig+0x38>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a30      	ldr	r2, [pc, #192]	; (80053b0 <TIM_Base_SetConfig+0xec>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_Base_SetConfig+0x38>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a2f      	ldr	r2, [pc, #188]	; (80053b4 <TIM_Base_SetConfig+0xf0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d108      	bne.n	800530e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a25      	ldr	r2, [pc, #148]	; (80053a8 <TIM_Base_SetConfig+0xe4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d01b      	beq.n	800534e <TIM_Base_SetConfig+0x8a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531c:	d017      	beq.n	800534e <TIM_Base_SetConfig+0x8a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a22      	ldr	r2, [pc, #136]	; (80053ac <TIM_Base_SetConfig+0xe8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <TIM_Base_SetConfig+0x8a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a21      	ldr	r2, [pc, #132]	; (80053b0 <TIM_Base_SetConfig+0xec>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00f      	beq.n	800534e <TIM_Base_SetConfig+0x8a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a20      	ldr	r2, [pc, #128]	; (80053b4 <TIM_Base_SetConfig+0xf0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00b      	beq.n	800534e <TIM_Base_SetConfig+0x8a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a1f      	ldr	r2, [pc, #124]	; (80053b8 <TIM_Base_SetConfig+0xf4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d007      	beq.n	800534e <TIM_Base_SetConfig+0x8a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a1e      	ldr	r2, [pc, #120]	; (80053bc <TIM_Base_SetConfig+0xf8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d003      	beq.n	800534e <TIM_Base_SetConfig+0x8a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a1d      	ldr	r2, [pc, #116]	; (80053c0 <TIM_Base_SetConfig+0xfc>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d108      	bne.n	8005360 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a08      	ldr	r2, [pc, #32]	; (80053a8 <TIM_Base_SetConfig+0xe4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d103      	bne.n	8005394 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	615a      	str	r2, [r3, #20]
}
 800539a:	bf00      	nop
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40010000 	.word	0x40010000
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40000800 	.word	0x40000800
 80053b4:	40000c00 	.word	0x40000c00
 80053b8:	40014000 	.word	0x40014000
 80053bc:	40014400 	.word	0x40014400
 80053c0:	40014800 	.word	0x40014800

080053c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f023 0201 	bic.w	r2, r3, #1
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f023 030a 	bic.w	r3, r3, #10
 8005400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	621a      	str	r2, [r3, #32]
}
 8005416:	bf00      	nop
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005422:	b480      	push	{r7}
 8005424:	b087      	sub	sp, #28
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f023 0210 	bic.w	r2, r3, #16
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800544c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	031b      	lsls	r3, r3, #12
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800545e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	621a      	str	r2, [r3, #32]
}
 8005476:	bf00      	nop
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005482:	b480      	push	{r7}
 8005484:	b085      	sub	sp, #20
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	f043 0307 	orr.w	r3, r3, #7
 80054a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	609a      	str	r2, [r3, #8]
}
 80054ac:	bf00      	nop
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	021a      	lsls	r2, r3, #8
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	431a      	orrs	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4313      	orrs	r3, r2
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	609a      	str	r2, [r3, #8]
}
 80054ec:	bf00      	nop
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800550c:	2302      	movs	r3, #2
 800550e:	e050      	b.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1c      	ldr	r2, [pc, #112]	; (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d018      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555c:	d013      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a18      	ldr	r2, [pc, #96]	; (80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00e      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a16      	ldr	r2, [pc, #88]	; (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d009      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a15      	ldr	r2, [pc, #84]	; (80055cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d004      	beq.n	8005586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d10c      	bne.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800558c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	4313      	orrs	r3, r2
 8005596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40000400 	.word	0x40000400
 80055c8:	40000800 	.word	0x40000800
 80055cc:	40000c00 	.word	0x40000c00
 80055d0:	40014000 	.word	0x40014000

080055d4 <memset>:
 80055d4:	4402      	add	r2, r0
 80055d6:	4603      	mov	r3, r0
 80055d8:	4293      	cmp	r3, r2
 80055da:	d100      	bne.n	80055de <memset+0xa>
 80055dc:	4770      	bx	lr
 80055de:	f803 1b01 	strb.w	r1, [r3], #1
 80055e2:	e7f9      	b.n	80055d8 <memset+0x4>

080055e4 <__errno>:
 80055e4:	4b01      	ldr	r3, [pc, #4]	; (80055ec <__errno+0x8>)
 80055e6:	6818      	ldr	r0, [r3, #0]
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	20003f88 	.word	0x20003f88

080055f0 <__libc_init_array>:
 80055f0:	b570      	push	{r4, r5, r6, lr}
 80055f2:	4d0d      	ldr	r5, [pc, #52]	; (8005628 <__libc_init_array+0x38>)
 80055f4:	4c0d      	ldr	r4, [pc, #52]	; (800562c <__libc_init_array+0x3c>)
 80055f6:	1b64      	subs	r4, r4, r5
 80055f8:	10a4      	asrs	r4, r4, #2
 80055fa:	2600      	movs	r6, #0
 80055fc:	42a6      	cmp	r6, r4
 80055fe:	d109      	bne.n	8005614 <__libc_init_array+0x24>
 8005600:	4d0b      	ldr	r5, [pc, #44]	; (8005630 <__libc_init_array+0x40>)
 8005602:	4c0c      	ldr	r4, [pc, #48]	; (8005634 <__libc_init_array+0x44>)
 8005604:	f000 faa6 	bl	8005b54 <_init>
 8005608:	1b64      	subs	r4, r4, r5
 800560a:	10a4      	asrs	r4, r4, #2
 800560c:	2600      	movs	r6, #0
 800560e:	42a6      	cmp	r6, r4
 8005610:	d105      	bne.n	800561e <__libc_init_array+0x2e>
 8005612:	bd70      	pop	{r4, r5, r6, pc}
 8005614:	f855 3b04 	ldr.w	r3, [r5], #4
 8005618:	4798      	blx	r3
 800561a:	3601      	adds	r6, #1
 800561c:	e7ee      	b.n	80055fc <__libc_init_array+0xc>
 800561e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005622:	4798      	blx	r3
 8005624:	3601      	adds	r6, #1
 8005626:	e7f2      	b.n	800560e <__libc_init_array+0x1e>
 8005628:	08005b98 	.word	0x08005b98
 800562c:	08005b98 	.word	0x08005b98
 8005630:	08005b98 	.word	0x08005b98
 8005634:	08005b9c 	.word	0x08005b9c

08005638 <log10>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	ed2d 8b02 	vpush	{d8}
 800563e:	ec55 4b10 	vmov	r4, r5, d0
 8005642:	f000 f841 	bl	80056c8 <__ieee754_log10>
 8005646:	4622      	mov	r2, r4
 8005648:	462b      	mov	r3, r5
 800564a:	4620      	mov	r0, r4
 800564c:	4629      	mov	r1, r5
 800564e:	eeb0 8a40 	vmov.f32	s16, s0
 8005652:	eef0 8a60 	vmov.f32	s17, s1
 8005656:	f7fb fa15 	bl	8000a84 <__aeabi_dcmpun>
 800565a:	b998      	cbnz	r0, 8005684 <log10+0x4c>
 800565c:	2200      	movs	r2, #0
 800565e:	2300      	movs	r3, #0
 8005660:	4620      	mov	r0, r4
 8005662:	4629      	mov	r1, r5
 8005664:	f7fb f9f0 	bl	8000a48 <__aeabi_dcmple>
 8005668:	b160      	cbz	r0, 8005684 <log10+0x4c>
 800566a:	2200      	movs	r2, #0
 800566c:	2300      	movs	r3, #0
 800566e:	4620      	mov	r0, r4
 8005670:	4629      	mov	r1, r5
 8005672:	f7fb f9d5 	bl	8000a20 <__aeabi_dcmpeq>
 8005676:	b160      	cbz	r0, 8005692 <log10+0x5a>
 8005678:	f7ff ffb4 	bl	80055e4 <__errno>
 800567c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80056a8 <log10+0x70>
 8005680:	2322      	movs	r3, #34	; 0x22
 8005682:	6003      	str	r3, [r0, #0]
 8005684:	eeb0 0a48 	vmov.f32	s0, s16
 8005688:	eef0 0a68 	vmov.f32	s1, s17
 800568c:	ecbd 8b02 	vpop	{d8}
 8005690:	bd38      	pop	{r3, r4, r5, pc}
 8005692:	f7ff ffa7 	bl	80055e4 <__errno>
 8005696:	ecbd 8b02 	vpop	{d8}
 800569a:	2321      	movs	r3, #33	; 0x21
 800569c:	6003      	str	r3, [r0, #0]
 800569e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056a2:	4803      	ldr	r0, [pc, #12]	; (80056b0 <log10+0x78>)
 80056a4:	f000 b808 	b.w	80056b8 <nan>
 80056a8:	00000000 	.word	0x00000000
 80056ac:	fff00000 	.word	0xfff00000
 80056b0:	08005b8c 	.word	0x08005b8c
 80056b4:	00000000 	.word	0x00000000

080056b8 <nan>:
 80056b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80056c0 <nan+0x8>
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	00000000 	.word	0x00000000
 80056c4:	7ff80000 	.word	0x7ff80000

080056c8 <__ieee754_log10>:
 80056c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056cc:	ec55 4b10 	vmov	r4, r5, d0
 80056d0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80056d4:	462b      	mov	r3, r5
 80056d6:	da2f      	bge.n	8005738 <__ieee754_log10+0x70>
 80056d8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80056dc:	4322      	orrs	r2, r4
 80056de:	d109      	bne.n	80056f4 <__ieee754_log10+0x2c>
 80056e0:	493b      	ldr	r1, [pc, #236]	; (80057d0 <__ieee754_log10+0x108>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	2300      	movs	r3, #0
 80056e6:	2000      	movs	r0, #0
 80056e8:	f7fb f85c 	bl	80007a4 <__aeabi_ddiv>
 80056ec:	ec41 0b10 	vmov	d0, r0, r1
 80056f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056f4:	2d00      	cmp	r5, #0
 80056f6:	da09      	bge.n	800570c <__ieee754_log10+0x44>
 80056f8:	ee10 2a10 	vmov	r2, s0
 80056fc:	ee10 0a10 	vmov	r0, s0
 8005700:	4629      	mov	r1, r5
 8005702:	f7fa fd6d 	bl	80001e0 <__aeabi_dsub>
 8005706:	2200      	movs	r2, #0
 8005708:	2300      	movs	r3, #0
 800570a:	e7ed      	b.n	80056e8 <__ieee754_log10+0x20>
 800570c:	4b31      	ldr	r3, [pc, #196]	; (80057d4 <__ieee754_log10+0x10c>)
 800570e:	2200      	movs	r2, #0
 8005710:	4629      	mov	r1, r5
 8005712:	ee10 0a10 	vmov	r0, s0
 8005716:	f7fa ff1b 	bl	8000550 <__aeabi_dmul>
 800571a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800571e:	4604      	mov	r4, r0
 8005720:	460d      	mov	r5, r1
 8005722:	460b      	mov	r3, r1
 8005724:	492c      	ldr	r1, [pc, #176]	; (80057d8 <__ieee754_log10+0x110>)
 8005726:	428b      	cmp	r3, r1
 8005728:	dd08      	ble.n	800573c <__ieee754_log10+0x74>
 800572a:	4622      	mov	r2, r4
 800572c:	462b      	mov	r3, r5
 800572e:	4620      	mov	r0, r4
 8005730:	4629      	mov	r1, r5
 8005732:	f7fa fd57 	bl	80001e4 <__adddf3>
 8005736:	e7d9      	b.n	80056ec <__ieee754_log10+0x24>
 8005738:	2200      	movs	r2, #0
 800573a:	e7f3      	b.n	8005724 <__ieee754_log10+0x5c>
 800573c:	1518      	asrs	r0, r3, #20
 800573e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8005742:	4410      	add	r0, r2
 8005744:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8005748:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800574c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8005750:	f7fa fe94 	bl	800047c <__aeabi_i2d>
 8005754:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8005758:	3303      	adds	r3, #3
 800575a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800575e:	ec45 4b10 	vmov	d0, r4, r5
 8005762:	4606      	mov	r6, r0
 8005764:	460f      	mov	r7, r1
 8005766:	f000 f83b 	bl	80057e0 <__ieee754_log>
 800576a:	a313      	add	r3, pc, #76	; (adr r3, 80057b8 <__ieee754_log10+0xf0>)
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	4630      	mov	r0, r6
 8005772:	4639      	mov	r1, r7
 8005774:	ec59 8b10 	vmov	r8, r9, d0
 8005778:	f7fa feea 	bl	8000550 <__aeabi_dmul>
 800577c:	a310      	add	r3, pc, #64	; (adr r3, 80057c0 <__ieee754_log10+0xf8>)
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	4604      	mov	r4, r0
 8005784:	460d      	mov	r5, r1
 8005786:	4640      	mov	r0, r8
 8005788:	4649      	mov	r1, r9
 800578a:	f7fa fee1 	bl	8000550 <__aeabi_dmul>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	4620      	mov	r0, r4
 8005794:	4629      	mov	r1, r5
 8005796:	f7fa fd25 	bl	80001e4 <__adddf3>
 800579a:	a30b      	add	r3, pc, #44	; (adr r3, 80057c8 <__ieee754_log10+0x100>)
 800579c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a0:	4604      	mov	r4, r0
 80057a2:	460d      	mov	r5, r1
 80057a4:	4630      	mov	r0, r6
 80057a6:	4639      	mov	r1, r7
 80057a8:	f7fa fed2 	bl	8000550 <__aeabi_dmul>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4620      	mov	r0, r4
 80057b2:	4629      	mov	r1, r5
 80057b4:	e7bd      	b.n	8005732 <__ieee754_log10+0x6a>
 80057b6:	bf00      	nop
 80057b8:	11f12b36 	.word	0x11f12b36
 80057bc:	3d59fef3 	.word	0x3d59fef3
 80057c0:	1526e50e 	.word	0x1526e50e
 80057c4:	3fdbcb7b 	.word	0x3fdbcb7b
 80057c8:	509f6000 	.word	0x509f6000
 80057cc:	3fd34413 	.word	0x3fd34413
 80057d0:	c3500000 	.word	0xc3500000
 80057d4:	43500000 	.word	0x43500000
 80057d8:	7fefffff 	.word	0x7fefffff
 80057dc:	00000000 	.word	0x00000000

080057e0 <__ieee754_log>:
 80057e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e4:	ec51 0b10 	vmov	r0, r1, d0
 80057e8:	ed2d 8b04 	vpush	{d8-d9}
 80057ec:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80057f0:	b083      	sub	sp, #12
 80057f2:	460d      	mov	r5, r1
 80057f4:	da29      	bge.n	800584a <__ieee754_log+0x6a>
 80057f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80057fa:	4303      	orrs	r3, r0
 80057fc:	ee10 2a10 	vmov	r2, s0
 8005800:	d10c      	bne.n	800581c <__ieee754_log+0x3c>
 8005802:	49cf      	ldr	r1, [pc, #828]	; (8005b40 <__ieee754_log+0x360>)
 8005804:	2200      	movs	r2, #0
 8005806:	2300      	movs	r3, #0
 8005808:	2000      	movs	r0, #0
 800580a:	f7fa ffcb 	bl	80007a4 <__aeabi_ddiv>
 800580e:	ec41 0b10 	vmov	d0, r0, r1
 8005812:	b003      	add	sp, #12
 8005814:	ecbd 8b04 	vpop	{d8-d9}
 8005818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800581c:	2900      	cmp	r1, #0
 800581e:	da05      	bge.n	800582c <__ieee754_log+0x4c>
 8005820:	460b      	mov	r3, r1
 8005822:	f7fa fcdd 	bl	80001e0 <__aeabi_dsub>
 8005826:	2200      	movs	r2, #0
 8005828:	2300      	movs	r3, #0
 800582a:	e7ee      	b.n	800580a <__ieee754_log+0x2a>
 800582c:	4bc5      	ldr	r3, [pc, #788]	; (8005b44 <__ieee754_log+0x364>)
 800582e:	2200      	movs	r2, #0
 8005830:	f7fa fe8e 	bl	8000550 <__aeabi_dmul>
 8005834:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005838:	460d      	mov	r5, r1
 800583a:	4ac3      	ldr	r2, [pc, #780]	; (8005b48 <__ieee754_log+0x368>)
 800583c:	4295      	cmp	r5, r2
 800583e:	dd06      	ble.n	800584e <__ieee754_log+0x6e>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	f7fa fcce 	bl	80001e4 <__adddf3>
 8005848:	e7e1      	b.n	800580e <__ieee754_log+0x2e>
 800584a:	2300      	movs	r3, #0
 800584c:	e7f5      	b.n	800583a <__ieee754_log+0x5a>
 800584e:	152c      	asrs	r4, r5, #20
 8005850:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005854:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005858:	441c      	add	r4, r3
 800585a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800585e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8005862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005866:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800586a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800586e:	ea42 0105 	orr.w	r1, r2, r5
 8005872:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8005876:	2200      	movs	r2, #0
 8005878:	4bb4      	ldr	r3, [pc, #720]	; (8005b4c <__ieee754_log+0x36c>)
 800587a:	f7fa fcb1 	bl	80001e0 <__aeabi_dsub>
 800587e:	1cab      	adds	r3, r5, #2
 8005880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005884:	2b02      	cmp	r3, #2
 8005886:	4682      	mov	sl, r0
 8005888:	468b      	mov	fp, r1
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	dc53      	bgt.n	8005938 <__ieee754_log+0x158>
 8005890:	2300      	movs	r3, #0
 8005892:	f7fb f8c5 	bl	8000a20 <__aeabi_dcmpeq>
 8005896:	b1d0      	cbz	r0, 80058ce <__ieee754_log+0xee>
 8005898:	2c00      	cmp	r4, #0
 800589a:	f000 8122 	beq.w	8005ae2 <__ieee754_log+0x302>
 800589e:	4620      	mov	r0, r4
 80058a0:	f7fa fdec 	bl	800047c <__aeabi_i2d>
 80058a4:	a390      	add	r3, pc, #576	; (adr r3, 8005ae8 <__ieee754_log+0x308>)
 80058a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058aa:	4606      	mov	r6, r0
 80058ac:	460f      	mov	r7, r1
 80058ae:	f7fa fe4f 	bl	8000550 <__aeabi_dmul>
 80058b2:	a38f      	add	r3, pc, #572	; (adr r3, 8005af0 <__ieee754_log+0x310>)
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	4604      	mov	r4, r0
 80058ba:	460d      	mov	r5, r1
 80058bc:	4630      	mov	r0, r6
 80058be:	4639      	mov	r1, r7
 80058c0:	f7fa fe46 	bl	8000550 <__aeabi_dmul>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4620      	mov	r0, r4
 80058ca:	4629      	mov	r1, r5
 80058cc:	e7ba      	b.n	8005844 <__ieee754_log+0x64>
 80058ce:	a38a      	add	r3, pc, #552	; (adr r3, 8005af8 <__ieee754_log+0x318>)
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	4650      	mov	r0, sl
 80058d6:	4659      	mov	r1, fp
 80058d8:	f7fa fe3a 	bl	8000550 <__aeabi_dmul>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	2000      	movs	r0, #0
 80058e2:	499b      	ldr	r1, [pc, #620]	; (8005b50 <__ieee754_log+0x370>)
 80058e4:	f7fa fc7c 	bl	80001e0 <__aeabi_dsub>
 80058e8:	4652      	mov	r2, sl
 80058ea:	4606      	mov	r6, r0
 80058ec:	460f      	mov	r7, r1
 80058ee:	465b      	mov	r3, fp
 80058f0:	4650      	mov	r0, sl
 80058f2:	4659      	mov	r1, fp
 80058f4:	f7fa fe2c 	bl	8000550 <__aeabi_dmul>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4630      	mov	r0, r6
 80058fe:	4639      	mov	r1, r7
 8005900:	f7fa fe26 	bl	8000550 <__aeabi_dmul>
 8005904:	4606      	mov	r6, r0
 8005906:	460f      	mov	r7, r1
 8005908:	b914      	cbnz	r4, 8005910 <__ieee754_log+0x130>
 800590a:	4632      	mov	r2, r6
 800590c:	463b      	mov	r3, r7
 800590e:	e0a2      	b.n	8005a56 <__ieee754_log+0x276>
 8005910:	4620      	mov	r0, r4
 8005912:	f7fa fdb3 	bl	800047c <__aeabi_i2d>
 8005916:	a374      	add	r3, pc, #464	; (adr r3, 8005ae8 <__ieee754_log+0x308>)
 8005918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591c:	4680      	mov	r8, r0
 800591e:	4689      	mov	r9, r1
 8005920:	f7fa fe16 	bl	8000550 <__aeabi_dmul>
 8005924:	a372      	add	r3, pc, #456	; (adr r3, 8005af0 <__ieee754_log+0x310>)
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	4604      	mov	r4, r0
 800592c:	460d      	mov	r5, r1
 800592e:	4640      	mov	r0, r8
 8005930:	4649      	mov	r1, r9
 8005932:	f7fa fe0d 	bl	8000550 <__aeabi_dmul>
 8005936:	e0a7      	b.n	8005a88 <__ieee754_log+0x2a8>
 8005938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800593c:	f7fa fc52 	bl	80001e4 <__adddf3>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4650      	mov	r0, sl
 8005946:	4659      	mov	r1, fp
 8005948:	f7fa ff2c 	bl	80007a4 <__aeabi_ddiv>
 800594c:	ec41 0b18 	vmov	d8, r0, r1
 8005950:	4620      	mov	r0, r4
 8005952:	f7fa fd93 	bl	800047c <__aeabi_i2d>
 8005956:	ec53 2b18 	vmov	r2, r3, d8
 800595a:	ec41 0b19 	vmov	d9, r0, r1
 800595e:	ec51 0b18 	vmov	r0, r1, d8
 8005962:	f7fa fdf5 	bl	8000550 <__aeabi_dmul>
 8005966:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800596a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800596e:	9301      	str	r3, [sp, #4]
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4680      	mov	r8, r0
 8005976:	4689      	mov	r9, r1
 8005978:	f7fa fdea 	bl	8000550 <__aeabi_dmul>
 800597c:	a360      	add	r3, pc, #384	; (adr r3, 8005b00 <__ieee754_log+0x320>)
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	4606      	mov	r6, r0
 8005984:	460f      	mov	r7, r1
 8005986:	f7fa fde3 	bl	8000550 <__aeabi_dmul>
 800598a:	a35f      	add	r3, pc, #380	; (adr r3, 8005b08 <__ieee754_log+0x328>)
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f7fa fc28 	bl	80001e4 <__adddf3>
 8005994:	4632      	mov	r2, r6
 8005996:	463b      	mov	r3, r7
 8005998:	f7fa fdda 	bl	8000550 <__aeabi_dmul>
 800599c:	a35c      	add	r3, pc, #368	; (adr r3, 8005b10 <__ieee754_log+0x330>)
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	f7fa fc1f 	bl	80001e4 <__adddf3>
 80059a6:	4632      	mov	r2, r6
 80059a8:	463b      	mov	r3, r7
 80059aa:	f7fa fdd1 	bl	8000550 <__aeabi_dmul>
 80059ae:	a35a      	add	r3, pc, #360	; (adr r3, 8005b18 <__ieee754_log+0x338>)
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	f7fa fc16 	bl	80001e4 <__adddf3>
 80059b8:	4642      	mov	r2, r8
 80059ba:	464b      	mov	r3, r9
 80059bc:	f7fa fdc8 	bl	8000550 <__aeabi_dmul>
 80059c0:	a357      	add	r3, pc, #348	; (adr r3, 8005b20 <__ieee754_log+0x340>)
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	4680      	mov	r8, r0
 80059c8:	4689      	mov	r9, r1
 80059ca:	4630      	mov	r0, r6
 80059cc:	4639      	mov	r1, r7
 80059ce:	f7fa fdbf 	bl	8000550 <__aeabi_dmul>
 80059d2:	a355      	add	r3, pc, #340	; (adr r3, 8005b28 <__ieee754_log+0x348>)
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	f7fa fc04 	bl	80001e4 <__adddf3>
 80059dc:	4632      	mov	r2, r6
 80059de:	463b      	mov	r3, r7
 80059e0:	f7fa fdb6 	bl	8000550 <__aeabi_dmul>
 80059e4:	a352      	add	r3, pc, #328	; (adr r3, 8005b30 <__ieee754_log+0x350>)
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	f7fa fbfb 	bl	80001e4 <__adddf3>
 80059ee:	4632      	mov	r2, r6
 80059f0:	463b      	mov	r3, r7
 80059f2:	f7fa fdad 	bl	8000550 <__aeabi_dmul>
 80059f6:	460b      	mov	r3, r1
 80059f8:	4602      	mov	r2, r0
 80059fa:	4649      	mov	r1, r9
 80059fc:	4640      	mov	r0, r8
 80059fe:	f7fa fbf1 	bl	80001e4 <__adddf3>
 8005a02:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8005a06:	9b01      	ldr	r3, [sp, #4]
 8005a08:	3551      	adds	r5, #81	; 0x51
 8005a0a:	431d      	orrs	r5, r3
 8005a0c:	2d00      	cmp	r5, #0
 8005a0e:	4680      	mov	r8, r0
 8005a10:	4689      	mov	r9, r1
 8005a12:	dd48      	ble.n	8005aa6 <__ieee754_log+0x2c6>
 8005a14:	4b4e      	ldr	r3, [pc, #312]	; (8005b50 <__ieee754_log+0x370>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	4650      	mov	r0, sl
 8005a1a:	4659      	mov	r1, fp
 8005a1c:	f7fa fd98 	bl	8000550 <__aeabi_dmul>
 8005a20:	4652      	mov	r2, sl
 8005a22:	465b      	mov	r3, fp
 8005a24:	f7fa fd94 	bl	8000550 <__aeabi_dmul>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	460f      	mov	r7, r1
 8005a30:	4640      	mov	r0, r8
 8005a32:	4649      	mov	r1, r9
 8005a34:	f7fa fbd6 	bl	80001e4 <__adddf3>
 8005a38:	ec53 2b18 	vmov	r2, r3, d8
 8005a3c:	f7fa fd88 	bl	8000550 <__aeabi_dmul>
 8005a40:	4680      	mov	r8, r0
 8005a42:	4689      	mov	r9, r1
 8005a44:	b964      	cbnz	r4, 8005a60 <__ieee754_log+0x280>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	4639      	mov	r1, r7
 8005a4e:	f7fa fbc7 	bl	80001e0 <__aeabi_dsub>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4650      	mov	r0, sl
 8005a58:	4659      	mov	r1, fp
 8005a5a:	f7fa fbc1 	bl	80001e0 <__aeabi_dsub>
 8005a5e:	e6d6      	b.n	800580e <__ieee754_log+0x2e>
 8005a60:	a321      	add	r3, pc, #132	; (adr r3, 8005ae8 <__ieee754_log+0x308>)
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	ec51 0b19 	vmov	r0, r1, d9
 8005a6a:	f7fa fd71 	bl	8000550 <__aeabi_dmul>
 8005a6e:	a320      	add	r3, pc, #128	; (adr r3, 8005af0 <__ieee754_log+0x310>)
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	4604      	mov	r4, r0
 8005a76:	460d      	mov	r5, r1
 8005a78:	ec51 0b19 	vmov	r0, r1, d9
 8005a7c:	f7fa fd68 	bl	8000550 <__aeabi_dmul>
 8005a80:	4642      	mov	r2, r8
 8005a82:	464b      	mov	r3, r9
 8005a84:	f7fa fbae 	bl	80001e4 <__adddf3>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	4639      	mov	r1, r7
 8005a90:	f7fa fba6 	bl	80001e0 <__aeabi_dsub>
 8005a94:	4652      	mov	r2, sl
 8005a96:	465b      	mov	r3, fp
 8005a98:	f7fa fba2 	bl	80001e0 <__aeabi_dsub>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	e7d9      	b.n	8005a5a <__ieee754_log+0x27a>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4650      	mov	r0, sl
 8005aac:	4659      	mov	r1, fp
 8005aae:	f7fa fb97 	bl	80001e0 <__aeabi_dsub>
 8005ab2:	ec53 2b18 	vmov	r2, r3, d8
 8005ab6:	f7fa fd4b 	bl	8000550 <__aeabi_dmul>
 8005aba:	4606      	mov	r6, r0
 8005abc:	460f      	mov	r7, r1
 8005abe:	2c00      	cmp	r4, #0
 8005ac0:	f43f af23 	beq.w	800590a <__ieee754_log+0x12a>
 8005ac4:	a308      	add	r3, pc, #32	; (adr r3, 8005ae8 <__ieee754_log+0x308>)
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	ec51 0b19 	vmov	r0, r1, d9
 8005ace:	f7fa fd3f 	bl	8000550 <__aeabi_dmul>
 8005ad2:	a307      	add	r3, pc, #28	; (adr r3, 8005af0 <__ieee754_log+0x310>)
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	4604      	mov	r4, r0
 8005ada:	460d      	mov	r5, r1
 8005adc:	ec51 0b19 	vmov	r0, r1, d9
 8005ae0:	e727      	b.n	8005932 <__ieee754_log+0x152>
 8005ae2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8005b38 <__ieee754_log+0x358>
 8005ae6:	e694      	b.n	8005812 <__ieee754_log+0x32>
 8005ae8:	fee00000 	.word	0xfee00000
 8005aec:	3fe62e42 	.word	0x3fe62e42
 8005af0:	35793c76 	.word	0x35793c76
 8005af4:	3dea39ef 	.word	0x3dea39ef
 8005af8:	55555555 	.word	0x55555555
 8005afc:	3fd55555 	.word	0x3fd55555
 8005b00:	df3e5244 	.word	0xdf3e5244
 8005b04:	3fc2f112 	.word	0x3fc2f112
 8005b08:	96cb03de 	.word	0x96cb03de
 8005b0c:	3fc74664 	.word	0x3fc74664
 8005b10:	94229359 	.word	0x94229359
 8005b14:	3fd24924 	.word	0x3fd24924
 8005b18:	55555593 	.word	0x55555593
 8005b1c:	3fe55555 	.word	0x3fe55555
 8005b20:	d078c69f 	.word	0xd078c69f
 8005b24:	3fc39a09 	.word	0x3fc39a09
 8005b28:	1d8e78af 	.word	0x1d8e78af
 8005b2c:	3fcc71c5 	.word	0x3fcc71c5
 8005b30:	9997fa04 	.word	0x9997fa04
 8005b34:	3fd99999 	.word	0x3fd99999
	...
 8005b40:	c3500000 	.word	0xc3500000
 8005b44:	43500000 	.word	0x43500000
 8005b48:	7fefffff 	.word	0x7fefffff
 8005b4c:	3ff00000 	.word	0x3ff00000
 8005b50:	3fe00000 	.word	0x3fe00000

08005b54 <_init>:
 8005b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b56:	bf00      	nop
 8005b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5a:	bc08      	pop	{r3}
 8005b5c:	469e      	mov	lr, r3
 8005b5e:	4770      	bx	lr

08005b60 <_fini>:
 8005b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b62:	bf00      	nop
 8005b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b66:	bc08      	pop	{r3}
 8005b68:	469e      	mov	lr, r3
 8005b6a:	4770      	bx	lr
