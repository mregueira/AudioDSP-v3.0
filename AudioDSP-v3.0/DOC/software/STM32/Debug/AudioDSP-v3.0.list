
AudioDSP-v3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006054  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080061ec  080061ec  000161ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006210  08006210  000299a4  2**0
                  CONTENTS
  4 .ARM          00000008  08006210  08006210  00016210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006218  08006218  000299a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006218  08006218  00016218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800621c  0800621c  0001621c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000099a4  20000000  08006220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  200099a4  0800fbc4  000299a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009e5c  0800fbc4  00029e5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000299a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000299d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d629  00000000  00000000  00029a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001de1  00000000  00000000  00037040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00038e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af0  00000000  00000000  00039c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002acc8  00000000  00000000  0003a6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a5f  00000000  00000000  000653b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001263ed  00000000  00000000  00075e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fac  00000000  00000000  0019c204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001a01b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200099a4 	.word	0x200099a4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080061d4 	.word	0x080061d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200099a8 	.word	0x200099a8
 80001d4:	080061d4 	.word	0x080061d4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b970 	b.w	8000de8 <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9e08      	ldr	r6, [sp, #32]
 8000b26:	460d      	mov	r5, r1
 8000b28:	4604      	mov	r4, r0
 8000b2a:	460f      	mov	r7, r1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d14a      	bne.n	8000bc6 <__udivmoddi4+0xa6>
 8000b30:	428a      	cmp	r2, r1
 8000b32:	4694      	mov	ip, r2
 8000b34:	d965      	bls.n	8000c02 <__udivmoddi4+0xe2>
 8000b36:	fab2 f382 	clz	r3, r2
 8000b3a:	b143      	cbz	r3, 8000b4e <__udivmoddi4+0x2e>
 8000b3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b40:	f1c3 0220 	rsb	r2, r3, #32
 8000b44:	409f      	lsls	r7, r3
 8000b46:	fa20 f202 	lsr.w	r2, r0, r2
 8000b4a:	4317      	orrs	r7, r2
 8000b4c:	409c      	lsls	r4, r3
 8000b4e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b52:	fa1f f58c 	uxth.w	r5, ip
 8000b56:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b5a:	0c22      	lsrs	r2, r4, #16
 8000b5c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b60:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b64:	fb01 f005 	mul.w	r0, r1, r5
 8000b68:	4290      	cmp	r0, r2
 8000b6a:	d90a      	bls.n	8000b82 <__udivmoddi4+0x62>
 8000b6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b70:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b74:	f080 811c 	bcs.w	8000db0 <__udivmoddi4+0x290>
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	f240 8119 	bls.w	8000db0 <__udivmoddi4+0x290>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4462      	add	r2, ip
 8000b82:	1a12      	subs	r2, r2, r0
 8000b84:	b2a4      	uxth	r4, r4
 8000b86:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b8a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b92:	fb00 f505 	mul.w	r5, r0, r5
 8000b96:	42a5      	cmp	r5, r4
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x90>
 8000b9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba2:	f080 8107 	bcs.w	8000db4 <__udivmoddi4+0x294>
 8000ba6:	42a5      	cmp	r5, r4
 8000ba8:	f240 8104 	bls.w	8000db4 <__udivmoddi4+0x294>
 8000bac:	4464      	add	r4, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb4:	1b64      	subs	r4, r4, r5
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11e      	cbz	r6, 8000bc2 <__udivmoddi4+0xa2>
 8000bba:	40dc      	lsrs	r4, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0xbc>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	f000 80ed 	beq.w	8000daa <__udivmoddi4+0x28a>
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bdc:	fab3 f183 	clz	r1, r3
 8000be0:	2900      	cmp	r1, #0
 8000be2:	d149      	bne.n	8000c78 <__udivmoddi4+0x158>
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	d302      	bcc.n	8000bee <__udivmoddi4+0xce>
 8000be8:	4282      	cmp	r2, r0
 8000bea:	f200 80f8 	bhi.w	8000dde <__udivmoddi4+0x2be>
 8000bee:	1a84      	subs	r4, r0, r2
 8000bf0:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	4617      	mov	r7, r2
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d0e2      	beq.n	8000bc2 <__udivmoddi4+0xa2>
 8000bfc:	e9c6 4700 	strd	r4, r7, [r6]
 8000c00:	e7df      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000c02:	b902      	cbnz	r2, 8000c06 <__udivmoddi4+0xe6>
 8000c04:	deff      	udf	#255	; 0xff
 8000c06:	fab2 f382 	clz	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x210>
 8000c10:	1a8a      	subs	r2, r1, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c20:	fb07 2015 	mls	r0, r7, r5, r2
 8000c24:	0c22      	lsrs	r2, r4, #16
 8000c26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c2a:	fb0e f005 	mul.w	r0, lr, r5
 8000c2e:	4290      	cmp	r0, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x124>
 8000c32:	eb1c 0202 	adds.w	r2, ip, r2
 8000c36:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x122>
 8000c3c:	4290      	cmp	r0, r2
 8000c3e:	f200 80cb 	bhi.w	8000dd8 <__udivmoddi4+0x2b8>
 8000c42:	4645      	mov	r5, r8
 8000c44:	1a12      	subs	r2, r2, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c4c:	fb07 2210 	mls	r2, r7, r0, r2
 8000c50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c54:	fb0e fe00 	mul.w	lr, lr, r0
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x14e>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x14c>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	f200 80bb 	bhi.w	8000de2 <__udivmoddi4+0x2c2>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c76:	e79f      	b.n	8000bb8 <__udivmoddi4+0x98>
 8000c78:	f1c1 0720 	rsb	r7, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c86:	fa05 f401 	lsl.w	r4, r5, r1
 8000c8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8e:	40fd      	lsrs	r5, r7
 8000c90:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	fb09 5518 	mls	r5, r9, r8, r5
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca8:	fb08 f50e 	mul.w	r5, r8, lr
 8000cac:	42a5      	cmp	r5, r4
 8000cae:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb2:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb6:	d90b      	bls.n	8000cd0 <__udivmoddi4+0x1b0>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc0:	f080 8088 	bcs.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cc4:	42a5      	cmp	r5, r4
 8000cc6:	f240 8085 	bls.w	8000dd4 <__udivmoddi4+0x2b4>
 8000cca:	f1a8 0802 	sub.w	r8, r8, #2
 8000cce:	4464      	add	r4, ip
 8000cd0:	1b64      	subs	r4, r4, r5
 8000cd2:	b29d      	uxth	r5, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ce0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1da>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cf0:	d26c      	bcs.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	d96a      	bls.n	8000dcc <__udivmoddi4+0x2ac>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fba3 9502 	umull	r9, r5, r3, r2
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	42ac      	cmp	r4, r5
 8000d08:	46c8      	mov	r8, r9
 8000d0a:	46ae      	mov	lr, r5
 8000d0c:	d356      	bcc.n	8000dbc <__udivmoddi4+0x29c>
 8000d0e:	d053      	beq.n	8000db8 <__udivmoddi4+0x298>
 8000d10:	b156      	cbz	r6, 8000d28 <__udivmoddi4+0x208>
 8000d12:	ebb0 0208 	subs.w	r2, r0, r8
 8000d16:	eb64 040e 	sbc.w	r4, r4, lr
 8000d1a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1e:	40ca      	lsrs	r2, r1
 8000d20:	40cc      	lsrs	r4, r1
 8000d22:	4317      	orrs	r7, r2
 8000d24:	e9c6 7400 	strd	r7, r4, [r6]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d30:	f1c3 0120 	rsb	r1, r3, #32
 8000d34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d38:	fa20 f201 	lsr.w	r2, r0, r1
 8000d3c:	fa25 f101 	lsr.w	r1, r5, r1
 8000d40:	409d      	lsls	r5, r3
 8000d42:	432a      	orrs	r2, r5
 8000d44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d50:	fb07 1510 	mls	r5, r7, r0, r1
 8000d54:	0c11      	lsrs	r1, r2, #16
 8000d56:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d5a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5e:	428d      	cmp	r5, r1
 8000d60:	fa04 f403 	lsl.w	r4, r4, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x258>
 8000d66:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6e:	d22f      	bcs.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d70:	428d      	cmp	r5, r1
 8000d72:	d92d      	bls.n	8000dd0 <__udivmoddi4+0x2b0>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1b49      	subs	r1, r1, r5
 8000d7a:	b292      	uxth	r2, r2
 8000d7c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d80:	fb07 1115 	mls	r1, r7, r5, r1
 8000d84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d88:	fb05 f10e 	mul.w	r1, r5, lr
 8000d8c:	4291      	cmp	r1, r2
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x282>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d98:	d216      	bcs.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9a:	4291      	cmp	r1, r2
 8000d9c:	d914      	bls.n	8000dc8 <__udivmoddi4+0x2a8>
 8000d9e:	3d02      	subs	r5, #2
 8000da0:	4462      	add	r2, ip
 8000da2:	1a52      	subs	r2, r2, r1
 8000da4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da8:	e738      	b.n	8000c1c <__udivmoddi4+0xfc>
 8000daa:	4631      	mov	r1, r6
 8000dac:	4630      	mov	r0, r6
 8000dae:	e708      	b.n	8000bc2 <__udivmoddi4+0xa2>
 8000db0:	4639      	mov	r1, r7
 8000db2:	e6e6      	b.n	8000b82 <__udivmoddi4+0x62>
 8000db4:	4610      	mov	r0, r2
 8000db6:	e6fb      	b.n	8000bb0 <__udivmoddi4+0x90>
 8000db8:	4548      	cmp	r0, r9
 8000dba:	d2a9      	bcs.n	8000d10 <__udivmoddi4+0x1f0>
 8000dbc:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	e7a3      	b.n	8000d10 <__udivmoddi4+0x1f0>
 8000dc8:	4645      	mov	r5, r8
 8000dca:	e7ea      	b.n	8000da2 <__udivmoddi4+0x282>
 8000dcc:	462b      	mov	r3, r5
 8000dce:	e794      	b.n	8000cfa <__udivmoddi4+0x1da>
 8000dd0:	4640      	mov	r0, r8
 8000dd2:	e7d1      	b.n	8000d78 <__udivmoddi4+0x258>
 8000dd4:	46d0      	mov	r8, sl
 8000dd6:	e77b      	b.n	8000cd0 <__udivmoddi4+0x1b0>
 8000dd8:	3d02      	subs	r5, #2
 8000dda:	4462      	add	r2, ip
 8000ddc:	e732      	b.n	8000c44 <__udivmoddi4+0x124>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e70a      	b.n	8000bf8 <__udivmoddi4+0xd8>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e742      	b.n	8000c6e <__udivmoddi4+0x14e>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <default_download_IC_1>:
/*
 * Default Download
 */
#define DEFAULT_DOWNLOAD_SIZE_IC_1 71

void default_download_IC_1() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R0_SOFT_RESET_IC_1_Default );
 8000df0:	4bde      	ldr	r3, [pc, #888]	; (800116c <default_download_IC_1+0x380>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	f64f 0190 	movw	r1, #63632	; 0xf890
 8000df8:	2070      	movs	r0, #112	; 0x70
 8000dfa:	f001 fd0d 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R1_SOFT_RESET_IC_1_Default );
 8000dfe:	4bdc      	ldr	r3, [pc, #880]	; (8001170 <default_download_IC_1+0x384>)
 8000e00:	2202      	movs	r2, #2
 8000e02:	f64f 0190 	movw	r1, #63632	; 0xf890
 8000e06:	2070      	movs	r0, #112	; 0x70
 8000e08:	f001 fd06 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R2_RESET_DELAY_IC_1_SIZE, R2_RESET_DELAY_IC_1_Default );
 8000e0c:	4ad9      	ldr	r2, [pc, #868]	; (8001174 <default_download_IC_1+0x388>)
 8000e0e:	2102      	movs	r1, #2
 8000e10:	2070      	movs	r0, #112	; 0x70
 8000e12:	f001 fd25 	bl	8002860 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R3_HIBERNATE_IC_1_Default );
 8000e16:	4bd8      	ldr	r3, [pc, #864]	; (8001178 <default_download_IC_1+0x38c>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000e1e:	2070      	movs	r0, #112	; 0x70
 8000e20:	f001 fcfa 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R4_HIBERNATE_IC_1_Default );
 8000e24:	4bd5      	ldr	r3, [pc, #852]	; (800117c <default_download_IC_1+0x390>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000e2c:	2070      	movs	r0, #112	; 0x70
 8000e2e:	f001 fcf3 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R5_HIBERNATE_DELAY_IC_1_SIZE, R5_HIBERNATE_DELAY_IC_1_Default );
 8000e32:	4ad3      	ldr	r2, [pc, #844]	; (8001180 <default_download_IC_1+0x394>)
 8000e34:	2102      	movs	r1, #2
 8000e36:	2070      	movs	r0, #112	; 0x70
 8000e38:	f001 fd12 	bl	8002860 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R6_KILL_CORE_IC_1_Default );
 8000e3c:	4bd1      	ldr	r3, [pc, #836]	; (8001184 <default_download_IC_1+0x398>)
 8000e3e:	2202      	movs	r2, #2
 8000e40:	f24f 4103 	movw	r1, #62467	; 0xf403
 8000e44:	2070      	movs	r0, #112	; 0x70
 8000e46:	f001 fce7 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R7_KILL_CORE_IC_1_Default );
 8000e4a:	4bcf      	ldr	r3, [pc, #828]	; (8001188 <default_download_IC_1+0x39c>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	f24f 4103 	movw	r1, #62467	; 0xf403
 8000e52:	2070      	movs	r0, #112	; 0x70
 8000e54:	f001 fce0 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R8_PLL_ENABLE_IC_1_Default );
 8000e58:	4bcc      	ldr	r3, [pc, #816]	; (800118c <default_download_IC_1+0x3a0>)
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000e60:	2070      	movs	r0, #112	; 0x70
 8000e62:	f001 fcd9 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_CTRL0_IC_1_ADDR, REG_PLL_CTRL0_IC_1_BYTE, R9_PLL_CTRL0_IC_1_Default );
 8000e66:	4bca      	ldr	r3, [pc, #808]	; (8001190 <default_download_IC_1+0x3a4>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000e6e:	2070      	movs	r0, #112	; 0x70
 8000e70:	f001 fcd2 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_CTRL1_IC_1_ADDR, REG_PLL_CTRL1_IC_1_BYTE, R10_PLL_CTRL1_IC_1_Default );
 8000e74:	4bc7      	ldr	r3, [pc, #796]	; (8001194 <default_download_IC_1+0x3a8>)
 8000e76:	2202      	movs	r2, #2
 8000e78:	f24f 0101 	movw	r1, #61441	; 0xf001
 8000e7c:	2070      	movs	r0, #112	; 0x70
 8000e7e:	f001 fccb 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_CLK_SRC_IC_1_ADDR, REG_PLL_CLK_SRC_IC_1_BYTE, R11_PLL_CLK_SRC_IC_1_Default );
 8000e82:	4bc5      	ldr	r3, [pc, #788]	; (8001198 <default_download_IC_1+0x3ac>)
 8000e84:	2202      	movs	r2, #2
 8000e86:	f24f 0102 	movw	r1, #61442	; 0xf002
 8000e8a:	2070      	movs	r0, #112	; 0x70
 8000e8c:	f001 fcc4 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MCLK_OUT_IC_1_ADDR, REG_MCLK_OUT_IC_1_BYTE, R12_MCLK_OUT_IC_1_Default );
 8000e90:	4bc2      	ldr	r3, [pc, #776]	; (800119c <default_download_IC_1+0x3b0>)
 8000e92:	2202      	movs	r2, #2
 8000e94:	f24f 0105 	movw	r1, #61445	; 0xf005
 8000e98:	2070      	movs	r0, #112	; 0x70
 8000e9a:	f001 fcbd 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R13_PLL_ENABLE_IC_1_Default );
 8000e9e:	4bc0      	ldr	r3, [pc, #768]	; (80011a0 <default_download_IC_1+0x3b4>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000ea6:	2070      	movs	r0, #112	; 0x70
 8000ea8:	f001 fcb6 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R14_PLL_LOCK_DELAY_IC_1_SIZE, R14_PLL_LOCK_DELAY_IC_1_Default );
 8000eac:	4abd      	ldr	r2, [pc, #756]	; (80011a4 <default_download_IC_1+0x3b8>)
 8000eae:	2102      	movs	r1, #2
 8000eb0:	2070      	movs	r0, #112	; 0x70
 8000eb2:	f001 fcd5 	bl	8002860 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_POWER_ENABLE0_IC_1_ADDR, REG_POWER_ENABLE0_IC_1_BYTE, R15_POWER_ENABLE0_IC_1_Default );
 8000eb6:	4bbc      	ldr	r3, [pc, #752]	; (80011a8 <default_download_IC_1+0x3bc>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	f24f 0150 	movw	r1, #61520	; 0xf050
 8000ebe:	2070      	movs	r0, #112	; 0x70
 8000ec0:	f001 fcaa 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_POWER_ENABLE1_IC_1_ADDR, REG_POWER_ENABLE1_IC_1_BYTE, R16_POWER_ENABLE1_IC_1_Default );
 8000ec4:	4bb9      	ldr	r3, [pc, #740]	; (80011ac <default_download_IC_1+0x3c0>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f24f 0151 	movw	r1, #61521	; 0xf051
 8000ecc:	2070      	movs	r0, #112	; 0x70
 8000ece:	f001 fca3 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLK_GEN1_M_IC_1_ADDR, REG_CLK_GEN1_M_IC_1_BYTE, R17_CLK_GEN1_M_IC_1_Default );
 8000ed2:	4bb7      	ldr	r3, [pc, #732]	; (80011b0 <default_download_IC_1+0x3c4>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	f24f 0120 	movw	r1, #61472	; 0xf020
 8000eda:	2070      	movs	r0, #112	; 0x70
 8000edc:	f001 fc9c 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLK_GEN1_N_IC_1_ADDR, REG_CLK_GEN1_N_IC_1_BYTE, R18_CLK_GEN1_N_IC_1_Default );
 8000ee0:	4bb4      	ldr	r3, [pc, #720]	; (80011b4 <default_download_IC_1+0x3c8>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	f24f 0121 	movw	r1, #61473	; 0xf021
 8000ee8:	2070      	movs	r0, #112	; 0x70
 8000eea:	f001 fc95 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLK_GEN3_M_IC_1_ADDR, REG_CLK_GEN3_M_IC_1_BYTE, R19_CLK_GEN3_M_IC_1_Default );
 8000eee:	4bb2      	ldr	r3, [pc, #712]	; (80011b8 <default_download_IC_1+0x3cc>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	f24f 0124 	movw	r1, #61476	; 0xf024
 8000ef6:	2070      	movs	r0, #112	; 0x70
 8000ef8:	f001 fc8e 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLK_GEN3_N_IC_1_ADDR, REG_CLK_GEN3_N_IC_1_BYTE, R20_CLK_GEN3_N_IC_1_Default );
 8000efc:	4baf      	ldr	r3, [pc, #700]	; (80011bc <default_download_IC_1+0x3d0>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	f24f 0125 	movw	r1, #61477	; 0xf025
 8000f04:	2070      	movs	r0, #112	; 0x70
 8000f06:	f001 fc87 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MP4_MODE_IC_1_ADDR, REG_MP4_MODE_IC_1_BYTE, R21_MP4_MODE_IC_1_Default );
 8000f0a:	4bad      	ldr	r3, [pc, #692]	; (80011c0 <default_download_IC_1+0x3d4>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	f24f 5114 	movw	r1, #62740	; 0xf514
 8000f12:	2070      	movs	r0, #112	; 0x70
 8000f14:	f001 fc80 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MP6_MODE_IC_1_ADDR, REG_MP6_MODE_IC_1_BYTE, R22_MP6_MODE_IC_1_Default );
 8000f18:	4baa      	ldr	r3, [pc, #680]	; (80011c4 <default_download_IC_1+0x3d8>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f24f 5116 	movw	r1, #62742	; 0xf516
 8000f20:	2070      	movs	r0, #112	; 0x70
 8000f22:	f001 fc79 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MP10_MODE_IC_1_ADDR, REG_MP10_MODE_IC_1_BYTE, R23_MP10_MODE_IC_1_Default );
 8000f26:	4ba8      	ldr	r3, [pc, #672]	; (80011c8 <default_download_IC_1+0x3dc>)
 8000f28:	2202      	movs	r2, #2
 8000f2a:	f24f 511a 	movw	r1, #62746	; 0xf51a
 8000f2e:	2070      	movs	r0, #112	; 0x70
 8000f30:	f001 fc72 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_BCLK_OUT0_PIN_IC_1_ADDR, REG_BCLK_OUT0_PIN_IC_1_BYTE, R24_BCLK_OUT0_PIN_IC_1_Default );
 8000f34:	4ba5      	ldr	r3, [pc, #660]	; (80011cc <default_download_IC_1+0x3e0>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	f24f 7184 	movw	r1, #63364	; 0xf784
 8000f3c:	2070      	movs	r0, #112	; 0x70
 8000f3e:	f001 fc6b 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_LRCLK_IN2_PIN_IC_1_ADDR, REG_LRCLK_IN2_PIN_IC_1_BYTE, R25_LRCLK_IN2_PIN_IC_1_Default );
 8000f42:	4ba3      	ldr	r3, [pc, #652]	; (80011d0 <default_download_IC_1+0x3e4>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	f24f 718a 	movw	r1, #63370	; 0xf78a
 8000f4a:	2070      	movs	r0, #112	; 0x70
 8000f4c:	f001 fc64 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_LRCLK_OUT0_PIN_IC_1_ADDR, REG_LRCLK_OUT0_PIN_IC_1_BYTE, R26_LRCLK_OUT0_PIN_IC_1_Default );
 8000f50:	4ba0      	ldr	r3, [pc, #640]	; (80011d4 <default_download_IC_1+0x3e8>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	f24f 718c 	movw	r1, #63372	; 0xf78c
 8000f58:	2070      	movs	r0, #112	; 0x70
 8000f5a:	f001 fc5d 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SS_PIN_IC_1_ADDR, REG_SS_PIN_IC_1_BYTE, R27_SS_PIN_IC_1_Default );
 8000f5e:	4b9e      	ldr	r3, [pc, #632]	; (80011d8 <default_download_IC_1+0x3ec>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	f24f 719b 	movw	r1, #63387	; 0xf79b
 8000f66:	2070      	movs	r0, #112	; 0x70
 8000f68:	f001 fc56 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MOSI_ADDR1_PIN_IC_1_ADDR, REG_MOSI_ADDR1_PIN_IC_1_BYTE, R28_MOSI_ADDR1_PIN_IC_1_Default );
 8000f6c:	4b9b      	ldr	r3, [pc, #620]	; (80011dc <default_download_IC_1+0x3f0>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	f24f 719c 	movw	r1, #63388	; 0xf79c
 8000f74:	2070      	movs	r0, #112	; 0x70
 8000f76:	f001 fc4f 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE0_IC_1_ADDR, REG_SOUT_SOURCE0_IC_1_BYTE, R29_SOUT_SOURCE0_IC_1_Default );
 8000f7a:	4b99      	ldr	r3, [pc, #612]	; (80011e0 <default_download_IC_1+0x3f4>)
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	f24f 1180 	movw	r1, #61824	; 0xf180
 8000f82:	2070      	movs	r0, #112	; 0x70
 8000f84:	f001 fc48 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE1_IC_1_ADDR, REG_SOUT_SOURCE1_IC_1_BYTE, R30_SOUT_SOURCE1_IC_1_Default );
 8000f88:	4b96      	ldr	r3, [pc, #600]	; (80011e4 <default_download_IC_1+0x3f8>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f24f 1181 	movw	r1, #61825	; 0xf181
 8000f90:	2070      	movs	r0, #112	; 0x70
 8000f92:	f001 fc41 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE2_IC_1_ADDR, REG_SOUT_SOURCE2_IC_1_BYTE, R31_SOUT_SOURCE2_IC_1_Default );
 8000f96:	4b94      	ldr	r3, [pc, #592]	; (80011e8 <default_download_IC_1+0x3fc>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	f24f 1182 	movw	r1, #61826	; 0xf182
 8000f9e:	2070      	movs	r0, #112	; 0x70
 8000fa0:	f001 fc3a 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE3_IC_1_ADDR, REG_SOUT_SOURCE3_IC_1_BYTE, R32_SOUT_SOURCE3_IC_1_Default );
 8000fa4:	4b91      	ldr	r3, [pc, #580]	; (80011ec <default_download_IC_1+0x400>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	f24f 1183 	movw	r1, #61827	; 0xf183
 8000fac:	2070      	movs	r0, #112	; 0x70
 8000fae:	f001 fc33 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE4_IC_1_ADDR, REG_SOUT_SOURCE4_IC_1_BYTE, R33_SOUT_SOURCE4_IC_1_Default );
 8000fb2:	4b8f      	ldr	r3, [pc, #572]	; (80011f0 <default_download_IC_1+0x404>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f24f 1184 	movw	r1, #61828	; 0xf184
 8000fba:	2070      	movs	r0, #112	; 0x70
 8000fbc:	f001 fc2c 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE5_IC_1_ADDR, REG_SOUT_SOURCE5_IC_1_BYTE, R34_SOUT_SOURCE5_IC_1_Default );
 8000fc0:	4b8c      	ldr	r3, [pc, #560]	; (80011f4 <default_download_IC_1+0x408>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	f24f 1185 	movw	r1, #61829	; 0xf185
 8000fc8:	2070      	movs	r0, #112	; 0x70
 8000fca:	f001 fc25 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE6_IC_1_ADDR, REG_SOUT_SOURCE6_IC_1_BYTE, R35_SOUT_SOURCE6_IC_1_Default );
 8000fce:	4b8a      	ldr	r3, [pc, #552]	; (80011f8 <default_download_IC_1+0x40c>)
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	f24f 1186 	movw	r1, #61830	; 0xf186
 8000fd6:	2070      	movs	r0, #112	; 0x70
 8000fd8:	f001 fc1e 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE7_IC_1_ADDR, REG_SOUT_SOURCE7_IC_1_BYTE, R36_SOUT_SOURCE7_IC_1_Default );
 8000fdc:	4b87      	ldr	r3, [pc, #540]	; (80011fc <default_download_IC_1+0x410>)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	f24f 1187 	movw	r1, #61831	; 0xf187
 8000fe4:	2070      	movs	r0, #112	; 0x70
 8000fe6:	f001 fc17 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE8_IC_1_ADDR, REG_SOUT_SOURCE8_IC_1_BYTE, R37_SOUT_SOURCE8_IC_1_Default );
 8000fea:	4b85      	ldr	r3, [pc, #532]	; (8001200 <default_download_IC_1+0x414>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	f24f 1188 	movw	r1, #61832	; 0xf188
 8000ff2:	2070      	movs	r0, #112	; 0x70
 8000ff4:	f001 fc10 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE9_IC_1_ADDR, REG_SOUT_SOURCE9_IC_1_BYTE, R38_SOUT_SOURCE9_IC_1_Default );
 8000ff8:	4b82      	ldr	r3, [pc, #520]	; (8001204 <default_download_IC_1+0x418>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	f24f 1189 	movw	r1, #61833	; 0xf189
 8001000:	2070      	movs	r0, #112	; 0x70
 8001002:	f001 fc09 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE10_IC_1_ADDR, REG_SOUT_SOURCE10_IC_1_BYTE, R39_SOUT_SOURCE10_IC_1_Default );
 8001006:	4b80      	ldr	r3, [pc, #512]	; (8001208 <default_download_IC_1+0x41c>)
 8001008:	2202      	movs	r2, #2
 800100a:	f24f 118a 	movw	r1, #61834	; 0xf18a
 800100e:	2070      	movs	r0, #112	; 0x70
 8001010:	f001 fc02 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE11_IC_1_ADDR, REG_SOUT_SOURCE11_IC_1_BYTE, R40_SOUT_SOURCE11_IC_1_Default );
 8001014:	4b7d      	ldr	r3, [pc, #500]	; (800120c <default_download_IC_1+0x420>)
 8001016:	2202      	movs	r2, #2
 8001018:	f24f 118b 	movw	r1, #61835	; 0xf18b
 800101c:	2070      	movs	r0, #112	; 0x70
 800101e:	f001 fbfb 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE12_IC_1_ADDR, REG_SOUT_SOURCE12_IC_1_BYTE, R41_SOUT_SOURCE12_IC_1_Default );
 8001022:	4b7b      	ldr	r3, [pc, #492]	; (8001210 <default_download_IC_1+0x424>)
 8001024:	2202      	movs	r2, #2
 8001026:	f24f 118c 	movw	r1, #61836	; 0xf18c
 800102a:	2070      	movs	r0, #112	; 0x70
 800102c:	f001 fbf4 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE13_IC_1_ADDR, REG_SOUT_SOURCE13_IC_1_BYTE, R42_SOUT_SOURCE13_IC_1_Default );
 8001030:	4b78      	ldr	r3, [pc, #480]	; (8001214 <default_download_IC_1+0x428>)
 8001032:	2202      	movs	r2, #2
 8001034:	f24f 118d 	movw	r1, #61837	; 0xf18d
 8001038:	2070      	movs	r0, #112	; 0x70
 800103a:	f001 fbed 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE14_IC_1_ADDR, REG_SOUT_SOURCE14_IC_1_BYTE, R43_SOUT_SOURCE14_IC_1_Default );
 800103e:	4b76      	ldr	r3, [pc, #472]	; (8001218 <default_download_IC_1+0x42c>)
 8001040:	2202      	movs	r2, #2
 8001042:	f24f 118e 	movw	r1, #61838	; 0xf18e
 8001046:	2070      	movs	r0, #112	; 0x70
 8001048:	f001 fbe6 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE15_IC_1_ADDR, REG_SOUT_SOURCE15_IC_1_BYTE, R44_SOUT_SOURCE15_IC_1_Default );
 800104c:	4b73      	ldr	r3, [pc, #460]	; (800121c <default_download_IC_1+0x430>)
 800104e:	2202      	movs	r2, #2
 8001050:	f24f 118f 	movw	r1, #61839	; 0xf18f
 8001054:	2070      	movs	r0, #112	; 0x70
 8001056:	f001 fbdf 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE16_IC_1_ADDR, REG_SOUT_SOURCE16_IC_1_BYTE, R45_SOUT_SOURCE16_IC_1_Default );
 800105a:	4b71      	ldr	r3, [pc, #452]	; (8001220 <default_download_IC_1+0x434>)
 800105c:	2202      	movs	r2, #2
 800105e:	f24f 1190 	movw	r1, #61840	; 0xf190
 8001062:	2070      	movs	r0, #112	; 0x70
 8001064:	f001 fbd8 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE17_IC_1_ADDR, REG_SOUT_SOURCE17_IC_1_BYTE, R46_SOUT_SOURCE17_IC_1_Default );
 8001068:	4b6e      	ldr	r3, [pc, #440]	; (8001224 <default_download_IC_1+0x438>)
 800106a:	2202      	movs	r2, #2
 800106c:	f24f 1191 	movw	r1, #61841	; 0xf191
 8001070:	2070      	movs	r0, #112	; 0x70
 8001072:	f001 fbd1 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE18_IC_1_ADDR, REG_SOUT_SOURCE18_IC_1_BYTE, R47_SOUT_SOURCE18_IC_1_Default );
 8001076:	4b6c      	ldr	r3, [pc, #432]	; (8001228 <default_download_IC_1+0x43c>)
 8001078:	2202      	movs	r2, #2
 800107a:	f24f 1192 	movw	r1, #61842	; 0xf192
 800107e:	2070      	movs	r0, #112	; 0x70
 8001080:	f001 fbca 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE19_IC_1_ADDR, REG_SOUT_SOURCE19_IC_1_BYTE, R48_SOUT_SOURCE19_IC_1_Default );
 8001084:	4b69      	ldr	r3, [pc, #420]	; (800122c <default_download_IC_1+0x440>)
 8001086:	2202      	movs	r2, #2
 8001088:	f24f 1193 	movw	r1, #61843	; 0xf193
 800108c:	2070      	movs	r0, #112	; 0x70
 800108e:	f001 fbc3 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE20_IC_1_ADDR, REG_SOUT_SOURCE20_IC_1_BYTE, R49_SOUT_SOURCE20_IC_1_Default );
 8001092:	4b67      	ldr	r3, [pc, #412]	; (8001230 <default_download_IC_1+0x444>)
 8001094:	2202      	movs	r2, #2
 8001096:	f24f 1194 	movw	r1, #61844	; 0xf194
 800109a:	2070      	movs	r0, #112	; 0x70
 800109c:	f001 fbbc 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE21_IC_1_ADDR, REG_SOUT_SOURCE21_IC_1_BYTE, R50_SOUT_SOURCE21_IC_1_Default );
 80010a0:	4b64      	ldr	r3, [pc, #400]	; (8001234 <default_download_IC_1+0x448>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	f24f 1195 	movw	r1, #61845	; 0xf195
 80010a8:	2070      	movs	r0, #112	; 0x70
 80010aa:	f001 fbb5 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE22_IC_1_ADDR, REG_SOUT_SOURCE22_IC_1_BYTE, R51_SOUT_SOURCE22_IC_1_Default );
 80010ae:	4b62      	ldr	r3, [pc, #392]	; (8001238 <default_download_IC_1+0x44c>)
 80010b0:	2202      	movs	r2, #2
 80010b2:	f24f 1196 	movw	r1, #61846	; 0xf196
 80010b6:	2070      	movs	r0, #112	; 0x70
 80010b8:	f001 fbae 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE23_IC_1_ADDR, REG_SOUT_SOURCE23_IC_1_BYTE, R52_SOUT_SOURCE23_IC_1_Default );
 80010bc:	4b5f      	ldr	r3, [pc, #380]	; (800123c <default_download_IC_1+0x450>)
 80010be:	2202      	movs	r2, #2
 80010c0:	f24f 1197 	movw	r1, #61847	; 0xf197
 80010c4:	2070      	movs	r0, #112	; 0x70
 80010c6:	f001 fba7 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_0_0_IC_1_ADDR, REG_SERIAL_BYTE_0_0_IC_1_BYTE, R53_SERIAL_BYTE_0_0_IC_1_Default );
 80010ca:	4b5d      	ldr	r3, [pc, #372]	; (8001240 <default_download_IC_1+0x454>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	f44f 4172 	mov.w	r1, #61952	; 0xf200
 80010d2:	2070      	movs	r0, #112	; 0x70
 80010d4:	f001 fba0 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_1_0_IC_1_ADDR, REG_SERIAL_BYTE_1_0_IC_1_BYTE, R54_SERIAL_BYTE_1_0_IC_1_Default );
 80010d8:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <default_download_IC_1+0x458>)
 80010da:	2202      	movs	r2, #2
 80010dc:	f24f 2104 	movw	r1, #61956	; 0xf204
 80010e0:	2070      	movs	r0, #112	; 0x70
 80010e2:	f001 fb99 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_2_0_IC_1_ADDR, REG_SERIAL_BYTE_2_0_IC_1_BYTE, R55_SERIAL_BYTE_2_0_IC_1_Default );
 80010e6:	4b58      	ldr	r3, [pc, #352]	; (8001248 <default_download_IC_1+0x45c>)
 80010e8:	2202      	movs	r2, #2
 80010ea:	f24f 2108 	movw	r1, #61960	; 0xf208
 80010ee:	2070      	movs	r0, #112	; 0x70
 80010f0:	f001 fb92 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_3_0_IC_1_ADDR, REG_SERIAL_BYTE_3_0_IC_1_BYTE, R56_SERIAL_BYTE_3_0_IC_1_Default );
 80010f4:	4b55      	ldr	r3, [pc, #340]	; (800124c <default_download_IC_1+0x460>)
 80010f6:	2202      	movs	r2, #2
 80010f8:	f24f 210c 	movw	r1, #61964	; 0xf20c
 80010fc:	2070      	movs	r0, #112	; 0x70
 80010fe:	f001 fb8b 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_4_0_IC_1_ADDR, REG_SERIAL_BYTE_4_0_IC_1_BYTE, R57_SERIAL_BYTE_4_0_IC_1_Default );
 8001102:	4b53      	ldr	r3, [pc, #332]	; (8001250 <default_download_IC_1+0x464>)
 8001104:	2202      	movs	r2, #2
 8001106:	f24f 2110 	movw	r1, #61968	; 0xf210
 800110a:	2070      	movs	r0, #112	; 0x70
 800110c:	f001 fb84 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_5_0_IC_1_ADDR, REG_SERIAL_BYTE_5_0_IC_1_BYTE, R58_SERIAL_BYTE_5_0_IC_1_Default );
 8001110:	4b50      	ldr	r3, [pc, #320]	; (8001254 <default_download_IC_1+0x468>)
 8001112:	2202      	movs	r2, #2
 8001114:	f24f 2114 	movw	r1, #61972	; 0xf214
 8001118:	2070      	movs	r0, #112	; 0x70
 800111a:	f001 fb7d 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_6_0_IC_1_ADDR, REG_SERIAL_BYTE_6_0_IC_1_BYTE, R59_SERIAL_BYTE_6_0_IC_1_Default );
 800111e:	4b4e      	ldr	r3, [pc, #312]	; (8001258 <default_download_IC_1+0x46c>)
 8001120:	2202      	movs	r2, #2
 8001122:	f24f 2118 	movw	r1, #61976	; 0xf218
 8001126:	2070      	movs	r0, #112	; 0x70
 8001128:	f001 fb76 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_7_0_IC_1_ADDR, REG_SERIAL_BYTE_7_0_IC_1_BYTE, R60_SERIAL_BYTE_7_0_IC_1_Default );
 800112c:	4b4b      	ldr	r3, [pc, #300]	; (800125c <default_download_IC_1+0x470>)
 800112e:	2202      	movs	r2, #2
 8001130:	f24f 211c 	movw	r1, #61980	; 0xf21c
 8001134:	2070      	movs	r0, #112	; 0x70
 8001136:	f001 fb6f 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
 800113a:	4b49      	ldr	r3, [pc, #292]	; (8001260 <default_download_IC_1+0x474>)
 800113c:	f644 32c0 	movw	r2, #19392	; 0x4bc0
 8001140:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001144:	2070      	movs	r0, #112	; 0x70
 8001146:	f001 fb67 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, Param_Data_IC_1 );
 800114a:	4b46      	ldr	r3, [pc, #280]	; (8001264 <default_download_IC_1+0x478>)
 800114c:	f243 120c 	movw	r2, #12556	; 0x310c
 8001150:	2100      	movs	r1, #0
 8001152:	2070      	movs	r0, #112	; 0x70
 8001154:	f001 fb60 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, DM1_DATA_ADDR_IC_1, DM1_DATA_SIZE_IC_1, DM1_DATA_Data_IC_1 );
 8001158:	4b43      	ldr	r3, [pc, #268]	; (8001268 <default_download_IC_1+0x47c>)
 800115a:	f641 3290 	movw	r2, #7056	; 0x1b90
 800115e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001162:	2070      	movs	r0, #112	; 0x70
 8001164:	f001 fb58 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
 8001168:	e080      	b.n	800126c <default_download_IC_1+0x480>
 800116a:	bf00      	nop
 800116c:	200099c0 	.word	0x200099c0
 8001170:	2000985c 	.word	0x2000985c
 8001174:	20009860 	.word	0x20009860
 8001178:	200099c4 	.word	0x200099c4
 800117c:	20009864 	.word	0x20009864
 8001180:	20009868 	.word	0x20009868
 8001184:	200099c8 	.word	0x200099c8
 8001188:	2000986c 	.word	0x2000986c
 800118c:	200099cc 	.word	0x200099cc
 8001190:	20009870 	.word	0x20009870
 8001194:	20009874 	.word	0x20009874
 8001198:	20009878 	.word	0x20009878
 800119c:	2000987c 	.word	0x2000987c
 80011a0:	20009880 	.word	0x20009880
 80011a4:	20009884 	.word	0x20009884
 80011a8:	20009888 	.word	0x20009888
 80011ac:	200099d0 	.word	0x200099d0
 80011b0:	2000988c 	.word	0x2000988c
 80011b4:	20009890 	.word	0x20009890
 80011b8:	20009894 	.word	0x20009894
 80011bc:	20009898 	.word	0x20009898
 80011c0:	2000989c 	.word	0x2000989c
 80011c4:	200098a0 	.word	0x200098a0
 80011c8:	200098a4 	.word	0x200098a4
 80011cc:	200098a8 	.word	0x200098a8
 80011d0:	200098ac 	.word	0x200098ac
 80011d4:	200098b0 	.word	0x200098b0
 80011d8:	200098b4 	.word	0x200098b4
 80011dc:	200098b8 	.word	0x200098b8
 80011e0:	200098bc 	.word	0x200098bc
 80011e4:	200098c0 	.word	0x200098c0
 80011e8:	200098c4 	.word	0x200098c4
 80011ec:	200098c8 	.word	0x200098c8
 80011f0:	200098cc 	.word	0x200098cc
 80011f4:	200098d0 	.word	0x200098d0
 80011f8:	200098d4 	.word	0x200098d4
 80011fc:	200098d8 	.word	0x200098d8
 8001200:	200098dc 	.word	0x200098dc
 8001204:	200098e0 	.word	0x200098e0
 8001208:	200098e4 	.word	0x200098e4
 800120c:	200098e8 	.word	0x200098e8
 8001210:	200098ec 	.word	0x200098ec
 8001214:	200098f0 	.word	0x200098f0
 8001218:	200098f4 	.word	0x200098f4
 800121c:	200098f8 	.word	0x200098f8
 8001220:	200098fc 	.word	0x200098fc
 8001224:	20009900 	.word	0x20009900
 8001228:	20009904 	.word	0x20009904
 800122c:	20009908 	.word	0x20009908
 8001230:	2000990c 	.word	0x2000990c
 8001234:	20009910 	.word	0x20009910
 8001238:	20009914 	.word	0x20009914
 800123c:	20009918 	.word	0x20009918
 8001240:	2000991c 	.word	0x2000991c
 8001244:	20009920 	.word	0x20009920
 8001248:	20009924 	.word	0x20009924
 800124c:	20009928 	.word	0x20009928
 8001250:	2000992c 	.word	0x2000992c
 8001254:	20009930 	.word	0x20009930
 8001258:	20009934 	.word	0x20009934
 800125c:	20009938 	.word	0x20009938
 8001260:	20001b90 	.word	0x20001b90
 8001264:	20006750 	.word	0x20006750
 8001268:	20000000 	.word	0x20000000
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R64_KILL_CORE_IC_1_Default );
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <default_download_IC_1+0x4e4>)
 800126e:	2202      	movs	r2, #2
 8001270:	f24f 4103 	movw	r1, #62467	; 0xf403
 8001274:	2070      	movs	r0, #112	; 0x70
 8001276:	f001 facf 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_ADDRESS_IC_1_ADDR, REG_START_ADDRESS_IC_1_BYTE, R65_START_ADDRESS_IC_1_Default );
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <default_download_IC_1+0x4e8>)
 800127c:	2202      	movs	r2, #2
 800127e:	f24f 4104 	movw	r1, #62468	; 0xf404
 8001282:	2070      	movs	r0, #112	; 0x70
 8001284:	f001 fac8 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_PULSE_IC_1_ADDR, REG_START_PULSE_IC_1_BYTE, R66_START_PULSE_IC_1_Default );
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <default_download_IC_1+0x4ec>)
 800128a:	2202      	movs	r2, #2
 800128c:	f24f 4101 	movw	r1, #62465	; 0xf401
 8001290:	2070      	movs	r0, #112	; 0x70
 8001292:	f001 fac1 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R67_START_CORE_IC_1_Default );
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <default_download_IC_1+0x4f0>)
 8001298:	2202      	movs	r2, #2
 800129a:	f24f 4102 	movw	r1, #62466	; 0xf402
 800129e:	2070      	movs	r0, #112	; 0x70
 80012a0:	f001 faba 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R68_START_CORE_IC_1_Default );
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <default_download_IC_1+0x4f4>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	f24f 4102 	movw	r1, #62466	; 0xf402
 80012ac:	2070      	movs	r0, #112	; 0x70
 80012ae:	f001 fab3 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R69_START_DELAY_IC_1_SIZE, R69_START_DELAY_IC_1_Default );
 80012b2:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <default_download_IC_1+0x4f8>)
 80012b4:	2102      	movs	r1, #2
 80012b6:	2070      	movs	r0, #112	; 0x70
 80012b8:	f001 fad2 	bl	8002860 <SIGMA_WRITE_DELAY>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R70_HIBERNATE_IC_1_Default );
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <default_download_IC_1+0x4fc>)
 80012be:	2202      	movs	r2, #2
 80012c0:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 80012c4:	2070      	movs	r0, #112	; 0x70
 80012c6:	f001 faa7 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200099d4 	.word	0x200099d4
 80012d4:	200099d8 	.word	0x200099d8
 80012d8:	2000993c 	.word	0x2000993c
 80012dc:	200099dc 	.word	0x200099dc
 80012e0:	20009940 	.word	0x20009940
 80012e4:	20009944 	.word	0x20009944
 80012e8:	200099e0 	.word	0x200099e0

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80012f2:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	  uint16_t k = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
	  uint16_t pote_aux = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
	  uint32_t vol_data[30]; // Fixed volume values
	  uint32_t loud_data[30]; // Fixed loudness values
	  uint32_t boost_data[30]; // Fixed boost loudness values
	  uint32_t comp_data[30]; // Fixed compensation values

	  BandAddress[0] = MOD_BAND32_SEL_DCINPALG145X1VALUE_ADDR;
 8001300:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8001304:	f8a7 31e4 	strh.w	r3, [r7, #484]	; 0x1e4
	  BandAddress[1] = MOD_BAND64_SEL_DCINPALG145X2VALUE_ADDR;
 8001308:	f640 13b7 	movw	r3, #2487	; 0x9b7
 800130c:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
	  BandAddress[2] = MOD_BAND128_SEL_DCINPALG145X3VALUE_ADDR;
 8001310:	f640 13ab 	movw	r3, #2475	; 0x9ab
 8001314:	f8a7 31e8 	strh.w	r3, [r7, #488]	; 0x1e8
	  BandAddress[3] = MOD_BAND256_SEL_DCINPALG145X4VALUE_ADDR;
 8001318:	f640 13ac 	movw	r3, #2476	; 0x9ac
 800131c:	f8a7 31ea 	strh.w	r3, [r7, #490]	; 0x1ea
	  BandAddress[4] = MOD_BAND512_SEL_DCINPALG145X5VALUE_ADDR;
 8001320:	f640 13a3 	movw	r3, #2467	; 0x9a3
 8001324:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
	  BandAddress[5] = MOD_BAND1K_SEL_DCINPALG145X6VALUE_ADDR;
 8001328:	f640 13a4 	movw	r3, #2468	; 0x9a4
 800132c:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	  BandAddress[6] = MOD_BAND2K_SEL_DCINPALG145X7VALUE_ADDR;
 8001330:	f640 139b 	movw	r3, #2459	; 0x99b
 8001334:	f8a7 31f0 	strh.w	r3, [r7, #496]	; 0x1f0
	  BandAddress[7] = MOD_BAND4K_SEL_DCINPALG145X8VALUE_ADDR;
 8001338:	f640 139c 	movw	r3, #2460	; 0x99c
 800133c:	f8a7 31f2 	strh.w	r3, [r7, #498]	; 0x1f2
	  BandAddress[8] = MOD_BAND8K_SEL_DCINPALG145X9VALUE_ADDR;
 8001340:	f44f 6319 	mov.w	r3, #2448	; 0x990
 8001344:	f8a7 31f4 	strh.w	r3, [r7, #500]	; 0x1f4
	  BandAddress[9] = MOD_BAND16K_SEL_DCINPALG145X10VALUE_ADDR;
 8001348:	f640 1391 	movw	r3, #2449	; 0x991
 800134c:	f8a7 31f6 	strh.w	r3, [r7, #502]	; 0x1f6
	  BandAddress[10] = MOD_BANDSUB_SEL_DCINPALG145X11VALUE_ADDR;
 8001350:	f640 13ad 	movw	r3, #2477	; 0x9ad
 8001354:	f8a7 31f8 	strh.w	r3, [r7, #504]	; 0x1f8
	  BandAddress[VOL_ARRAY] = MOD_VOL_GAINALGNS145X1GAIN_ADDR;
 8001358:	f640 1393 	movw	r3, #2451	; 0x993
 800135c:	f8a7 31fa 	strh.w	r3, [r7, #506]	; 0x1fa
	  BandAddress[LOUD_LOW_ARRAY] = MOD_LOUD_ALG0_LEVEL0_ADDR;
 8001360:	f240 13c3 	movw	r3, #451	; 0x1c3
 8001364:	f8a7 31fc 	strh.w	r3, [r7, #508]	; 0x1fc
	  BandAddress[LOUD_HIGH_ARRAY] = MOD_LOUD_ALG0_LEVEL1_ADDR;
 8001368:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
 800136c:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
	  BandAddress[LOUD_GRL_ARRAY] = MOD_LOUD_SEL_DCINPALG145X12VALUE_ADDR;
 8001370:	f640 1392 	movw	r3, #2450	; 0x992
 8001374:	f8a7 3200 	strh.w	r3, [r7, #512]	; 0x200

	  // 8.24 FixPoint Volume
	  vol_data[29] = 0x01000000; // 0dB
 8001378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800137c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	  vol_data[28] = 0x00CB5918; // -2dB
 8001380:	4bc2      	ldr	r3, [pc, #776]	; (800168c <main+0x3a0>)
 8001382:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	  vol_data[27] = 0x00A1866C; // -4dB
 8001386:	4bc2      	ldr	r3, [pc, #776]	; (8001690 <main+0x3a4>)
 8001388:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	  vol_data[26] = 0x00804DCE; // -6dB
 800138c:	4bc1      	ldr	r3, [pc, #772]	; (8001694 <main+0x3a8>)
 800138e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	  vol_data[25] = 0x0065EA5A; // -8dB
 8001392:	4bc1      	ldr	r3, [pc, #772]	; (8001698 <main+0x3ac>)
 8001394:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	  vol_data[24] = 0x0050F44E; // -10dB
 8001398:	4bc0      	ldr	r3, [pc, #768]	; (800169c <main+0x3b0>)
 800139a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	  vol_data[23] = 0x00404DE6; // -12dB
 800139e:	4bc0      	ldr	r3, [pc, #768]	; (80016a0 <main+0x3b4>)
 80013a0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	  vol_data[22] = 0x00331427; // -14dB (-7.2dB)
 80013a4:	4bbf      	ldr	r3, [pc, #764]	; (80016a4 <main+0x3b8>)
 80013a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	  vol_data[21] = 0x002892C2; // -16dB
 80013aa:	4bbf      	ldr	r3, [pc, #764]	; (80016a8 <main+0x3bc>)
 80013ac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	  vol_data[20] = 0x00203A7E; // -18dB
 80013b0:	4bbe      	ldr	r3, [pc, #760]	; (80016ac <main+0x3c0>)
 80013b2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	  vol_data[19] = 0x0019999A; // -20dB
 80013b6:	4bbe      	ldr	r3, [pc, #760]	; (80016b0 <main+0x3c4>)
 80013b8:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	  vol_data[18] = 0x001455B6; // -22dB
 80013bc:	4bbd      	ldr	r3, [pc, #756]	; (80016b4 <main+0x3c8>)
 80013be:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	  vol_data[17] = 0x0010270B; // -24dB
 80013c2:	4bbd      	ldr	r3, [pc, #756]	; (80016b8 <main+0x3cc>)
 80013c4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	  vol_data[16] = 0x000CD495; // -26dB
 80013c8:	4bbc      	ldr	r3, [pc, #752]	; (80016bc <main+0x3d0>)
 80013ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	  vol_data[15] = 0x000A3109; // -28dB
 80013ce:	4bbc      	ldr	r3, [pc, #752]	; (80016c0 <main+0x3d4>)
 80013d0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	  vol_data[14] = 0x0008186E; // -30dB
 80013d4:	4bbb      	ldr	r3, [pc, #748]	; (80016c4 <main+0x3d8>)
 80013d6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	  vol_data[13] = 0x00066E31; // -32dB
 80013da:	4bbb      	ldr	r3, [pc, #748]	; (80016c8 <main+0x3dc>)
 80013dc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	  vol_data[12] = 0x00051B9D; // -34dB
 80013e0:	4bba      	ldr	r3, [pc, #744]	; (80016cc <main+0x3e0>)
 80013e2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	  vol_data[11] = 0x00040EAD; // -36dB
 80013e6:	4bba      	ldr	r3, [pc, #744]	; (80016d0 <main+0x3e4>)
 80013e8:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	  vol_data[10] = 0x0003390D; // -38dB
 80013ec:	4bb9      	ldr	r3, [pc, #740]	; (80016d4 <main+0x3e8>)
 80013ee:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	  vol_data[9] = 0x00028F5C; // -40dB
 80013f2:	4bb9      	ldr	r3, [pc, #740]	; (80016d8 <main+0x3ec>)
 80013f4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	  vol_data[8] = 0x00020892; // -42dB
 80013f8:	4bb8      	ldr	r3, [pc, #736]	; (80016dc <main+0x3f0>)
 80013fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	  vol_data[7] = 0x00019D81; // -44dB
 80013fe:	4bb8      	ldr	r3, [pc, #736]	; (80016e0 <main+0x3f4>)
 8001400:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  vol_data[6] = 0x00014875; // -46dB
 8001404:	4bb7      	ldr	r3, [pc, #732]	; (80016e4 <main+0x3f8>)
 8001406:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	  vol_data[5] = 0x000104E7; // -48dB
 800140a:	4bb7      	ldr	r3, [pc, #732]	; (80016e8 <main+0x3fc>)
 800140c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	  vol_data[4] = 0x0000CF3E; // -50dB
 8001410:	f64c 733e 	movw	r3, #53054	; 0xcf3e
 8001414:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	  vol_data[3] = 0x0000A49E; // -52dB
 8001418:	f24a 439e 	movw	r3, #42142	; 0xa49e
 800141c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	  vol_data[2] = 0x000082C3; // -54dB
 8001420:	f248 23c3 	movw	r3, #33475	; 0x82c3
 8001424:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	  vol_data[1] = 0x000067DE; // -56dB
 8001428:	f246 73de 	movw	r3, #26590	; 0x67de
 800142c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	  vol_data[0] = 0x00005281; // -58dB
 8001430:	f245 2381 	movw	r3, #21121	; 0x5281
 8001434:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

	  // 8.24 FixPoint Loudness
	  loud_data[29] = 0x01000000; // 0dB
 8001438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800143c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001440:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001444:	675a      	str	r2, [r3, #116]	; 0x74
	  loud_data[28] = 0x00F1ADF9; // -0.5dB
 8001446:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800144a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800144e:	4aa7      	ldr	r2, [pc, #668]	; (80016ec <main+0x400>)
 8001450:	671a      	str	r2, [r3, #112]	; 0x70
	  loud_data[27] = 0x00E42905; // -1dB
 8001452:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001456:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800145a:	4aa5      	ldr	r2, [pc, #660]	; (80016f0 <main+0x404>)
 800145c:	66da      	str	r2, [r3, #108]	; 0x6c
	  loud_data[26] = 0x00D765AC; // -1.5dB
 800145e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001462:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001466:	4aa3      	ldr	r2, [pc, #652]	; (80016f4 <main+0x408>)
 8001468:	669a      	str	r2, [r3, #104]	; 0x68
	  loud_data[25] = 0x00CB5918; // -2dB
 800146a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800146e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001472:	4a86      	ldr	r2, [pc, #536]	; (800168c <main+0x3a0>)
 8001474:	665a      	str	r2, [r3, #100]	; 0x64
	  loud_data[24] = 0x00BFF911; // -2.5dB
 8001476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800147a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800147e:	4a9e      	ldr	r2, [pc, #632]	; (80016f8 <main+0x40c>)
 8001480:	661a      	str	r2, [r3, #96]	; 0x60
	  loud_data[23] = 0x00B53BEF; // -3dB
 8001482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001486:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800148a:	4a9c      	ldr	r2, [pc, #624]	; (80016fc <main+0x410>)
 800148c:	65da      	str	r2, [r3, #92]	; 0x5c
	  loud_data[22] = 0x00AB1896; // -3.5dB
 800148e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001492:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001496:	4a9a      	ldr	r2, [pc, #616]	; (8001700 <main+0x414>)
 8001498:	659a      	str	r2, [r3, #88]	; 0x58
	  loud_data[21] = 0x00A1866C; // -4dB
 800149a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800149e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014a2:	4a7b      	ldr	r2, [pc, #492]	; (8001690 <main+0x3a4>)
 80014a4:	655a      	str	r2, [r3, #84]	; 0x54
	  loud_data[20] = 0x00987D50; // -4.5dB
 80014a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014ae:	4a95      	ldr	r2, [pc, #596]	; (8001704 <main+0x418>)
 80014b0:	651a      	str	r2, [r3, #80]	; 0x50
	  loud_data[19] = 0x008FF59A; // -5dB
 80014b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014ba:	4a93      	ldr	r2, [pc, #588]	; (8001708 <main+0x41c>)
 80014bc:	64da      	str	r2, [r3, #76]	; 0x4c
	  loud_data[18] = 0x0087E80B; // -5.5dB
 80014be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014c6:	4a91      	ldr	r2, [pc, #580]	; (800170c <main+0x420>)
 80014c8:	649a      	str	r2, [r3, #72]	; 0x48
	  loud_data[17] = 0x00804DCE; // -6dB
 80014ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014d2:	4a70      	ldr	r2, [pc, #448]	; (8001694 <main+0x3a8>)
 80014d4:	645a      	str	r2, [r3, #68]	; 0x44
	  loud_data[16] = 0x00792071; // -6.5dB
 80014d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014de:	4a8c      	ldr	r2, [pc, #560]	; (8001710 <main+0x424>)
 80014e0:	641a      	str	r2, [r3, #64]	; 0x40
	  loud_data[15] = 0x007259DB; // -7dB
 80014e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014ea:	4a8a      	ldr	r2, [pc, #552]	; (8001714 <main+0x428>)
 80014ec:	63da      	str	r2, [r3, #60]	; 0x3c
	  loud_data[14] = 0x006BF44D; // -7.5dB
 80014ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014f6:	4a88      	ldr	r2, [pc, #544]	; (8001718 <main+0x42c>)
 80014f8:	639a      	str	r2, [r3, #56]	; 0x38
	  loud_data[13] = 0x0065EA5A; // -8dB
 80014fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001502:	4a65      	ldr	r2, [pc, #404]	; (8001698 <main+0x3ac>)
 8001504:	635a      	str	r2, [r3, #52]	; 0x34
	  loud_data[12] = 0x006036E1; // -8.5dB
 8001506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800150a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800150e:	4a83      	ldr	r2, [pc, #524]	; (800171c <main+0x430>)
 8001510:	631a      	str	r2, [r3, #48]	; 0x30
	  loud_data[11] = 0x005AD50D; // -9dB
 8001512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001516:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800151a:	4a81      	ldr	r2, [pc, #516]	; (8001720 <main+0x434>)
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
	  loud_data[10] = 0x0055C04C; // -9.5dB
 800151e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001522:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001526:	4a7f      	ldr	r2, [pc, #508]	; (8001724 <main+0x438>)
 8001528:	629a      	str	r2, [r3, #40]	; 0x28
	  loud_data[9] = 0x0050F44E; // -10dB
 800152a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800152e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001532:	4a5a      	ldr	r2, [pc, #360]	; (800169c <main+0x3b0>)
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
	  loud_data[8] = 0x004C6D01; // -10.5dB
 8001536:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800153a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800153e:	4a7a      	ldr	r2, [pc, #488]	; (8001728 <main+0x43c>)
 8001540:	621a      	str	r2, [r3, #32]
	  loud_data[7] = 0x0048268E; // -11dB
 8001542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001546:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800154a:	4a78      	ldr	r2, [pc, #480]	; (800172c <main+0x440>)
 800154c:	61da      	str	r2, [r3, #28]
	  loud_data[6] = 0x00441D54; // -11.5dB
 800154e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001552:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001556:	4a76      	ldr	r2, [pc, #472]	; (8001730 <main+0x444>)
 8001558:	619a      	str	r2, [r3, #24]
	  loud_data[5] = 0x00404DE6; // -12dB
 800155a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001562:	4a4f      	ldr	r2, [pc, #316]	; (80016a0 <main+0x3b4>)
 8001564:	615a      	str	r2, [r3, #20]
	  loud_data[4] = 0x003CB509; // -12.5dB
 8001566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800156a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800156e:	4a71      	ldr	r2, [pc, #452]	; (8001734 <main+0x448>)
 8001570:	611a      	str	r2, [r3, #16]
	  loud_data[3] = 0x00394FAF; // -13dB
 8001572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001576:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800157a:	4a6f      	ldr	r2, [pc, #444]	; (8001738 <main+0x44c>)
 800157c:	60da      	str	r2, [r3, #12]
	  loud_data[2] = 0x00361AF6; // -13.5dB
 800157e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001582:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001586:	4a6d      	ldr	r2, [pc, #436]	; (800173c <main+0x450>)
 8001588:	609a      	str	r2, [r3, #8]
	  loud_data[1] = 0x00331427; // -14dB
 800158a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001592:	4a44      	ldr	r2, [pc, #272]	; (80016a4 <main+0x3b8>)
 8001594:	605a      	str	r2, [r3, #4]
	  loud_data[0] = 0x003038AF; // -14.5dB
 8001596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800159a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800159e:	4a68      	ldr	r2, [pc, #416]	; (8001740 <main+0x454>)
 80015a0:	601a      	str	r2, [r3, #0]

	  // 8.24 Compensation FixPoint
	  comp_data[29] = 0x01000000; // 0dB
 80015a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015ae:	675a      	str	r2, [r3, #116]	; 0x74
	  comp_data[28] = 0x010F2B41; // +0.5dB
 80015b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015b8:	4a62      	ldr	r2, [pc, #392]	; (8001744 <main+0x458>)
 80015ba:	671a      	str	r2, [r3, #112]	; 0x70
	  comp_data[27] = 0x011F3C9A; // +1dB
 80015bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015c4:	4a60      	ldr	r2, [pc, #384]	; (8001748 <main+0x45c>)
 80015c6:	66da      	str	r2, [r3, #108]	; 0x6c
	  comp_data[26] = 0x013041AF; // +1.5dB
 80015c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015d0:	4a5e      	ldr	r2, [pc, #376]	; (800174c <main+0x460>)
 80015d2:	669a      	str	r2, [r3, #104]	; 0x68
	  comp_data[25] = 0x014248F0; // +2dB
 80015d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015dc:	4a5c      	ldr	r2, [pc, #368]	; (8001750 <main+0x464>)
 80015de:	665a      	str	r2, [r3, #100]	; 0x64
	  comp_data[24] = 0x015561A9; // +2.5dB
 80015e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015e8:	4a5a      	ldr	r2, [pc, #360]	; (8001754 <main+0x468>)
 80015ea:	661a      	str	r2, [r3, #96]	; 0x60
	  comp_data[23] = 0x01699C0F; // +3dB
 80015ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015f4:	4a58      	ldr	r2, [pc, #352]	; (8001758 <main+0x46c>)
 80015f6:	65da      	str	r2, [r3, #92]	; 0x5c
	  comp_data[22] = 0x017F094D; // +3.5dB
 80015f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001600:	4a56      	ldr	r2, [pc, #344]	; (800175c <main+0x470>)
 8001602:	659a      	str	r2, [r3, #88]	; 0x58
	  comp_data[21] = 0x0195BB8F; // +4dB
 8001604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001608:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800160c:	4a54      	ldr	r2, [pc, #336]	; (8001760 <main+0x474>)
 800160e:	655a      	str	r2, [r3, #84]	; 0x54
	  comp_data[20] = 0x01ADC61A; // +4.5dB
 8001610:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001614:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001618:	4a52      	ldr	r2, [pc, #328]	; (8001764 <main+0x478>)
 800161a:	651a      	str	r2, [r3, #80]	; 0x50
	  comp_data[19] = 0x01C73D52; // +5dB
 800161c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001620:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001624:	4a50      	ldr	r2, [pc, #320]	; (8001768 <main+0x47c>)
 8001626:	64da      	str	r2, [r3, #76]	; 0x4c
	  comp_data[18] = 0x01E236D4; // +5.5dB
 8001628:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800162c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001630:	4a4e      	ldr	r2, [pc, #312]	; (800176c <main+0x480>)
 8001632:	649a      	str	r2, [r3, #72]	; 0x48
	  comp_data[17] = 0x01FEC983; // +6dB
 8001634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001638:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800163c:	4a4c      	ldr	r2, [pc, #304]	; (8001770 <main+0x484>)
 800163e:	645a      	str	r2, [r3, #68]	; 0x44
	  comp_data[16] = 0x021D0D9E; // +6.5dB
 8001640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001644:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001648:	4a4a      	ldr	r2, [pc, #296]	; (8001774 <main+0x488>)
 800164a:	641a      	str	r2, [r3, #64]	; 0x40
	  comp_data[15] = 0x023D1CD4; // +7dB
 800164c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001650:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001654:	4a48      	ldr	r2, [pc, #288]	; (8001778 <main+0x48c>)
 8001656:	63da      	str	r2, [r3, #60]	; 0x3c
	  comp_data[14] = 0x025F1259; // +7.5dB
 8001658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800165c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001660:	4a46      	ldr	r2, [pc, #280]	; (800177c <main+0x490>)
 8001662:	639a      	str	r2, [r3, #56]	; 0x38
	  comp_data[13] = 0x02830AFD; // +8dB
 8001664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001668:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800166c:	4a44      	ldr	r2, [pc, #272]	; (8001780 <main+0x494>)
 800166e:	635a      	str	r2, [r3, #52]	; 0x34
	  comp_data[12] = 0x02A92547; // +8.5dB
 8001670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001674:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001678:	4a42      	ldr	r2, [pc, #264]	; (8001784 <main+0x498>)
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
	  comp_data[11] = 0x02D1818B; // +9dB
 800167c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001680:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001684:	4a40      	ldr	r2, [pc, #256]	; (8001788 <main+0x49c>)
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
 8001688:	e080      	b.n	800178c <main+0x4a0>
 800168a:	bf00      	nop
 800168c:	00cb5918 	.word	0x00cb5918
 8001690:	00a1866c 	.word	0x00a1866c
 8001694:	00804dce 	.word	0x00804dce
 8001698:	0065ea5a 	.word	0x0065ea5a
 800169c:	0050f44e 	.word	0x0050f44e
 80016a0:	00404de6 	.word	0x00404de6
 80016a4:	00331427 	.word	0x00331427
 80016a8:	002892c2 	.word	0x002892c2
 80016ac:	00203a7e 	.word	0x00203a7e
 80016b0:	0019999a 	.word	0x0019999a
 80016b4:	001455b6 	.word	0x001455b6
 80016b8:	0010270b 	.word	0x0010270b
 80016bc:	000cd495 	.word	0x000cd495
 80016c0:	000a3109 	.word	0x000a3109
 80016c4:	0008186e 	.word	0x0008186e
 80016c8:	00066e31 	.word	0x00066e31
 80016cc:	00051b9d 	.word	0x00051b9d
 80016d0:	00040ead 	.word	0x00040ead
 80016d4:	0003390d 	.word	0x0003390d
 80016d8:	00028f5c 	.word	0x00028f5c
 80016dc:	00020892 	.word	0x00020892
 80016e0:	00019d81 	.word	0x00019d81
 80016e4:	00014875 	.word	0x00014875
 80016e8:	000104e7 	.word	0x000104e7
 80016ec:	00f1adf9 	.word	0x00f1adf9
 80016f0:	00e42905 	.word	0x00e42905
 80016f4:	00d765ac 	.word	0x00d765ac
 80016f8:	00bff911 	.word	0x00bff911
 80016fc:	00b53bef 	.word	0x00b53bef
 8001700:	00ab1896 	.word	0x00ab1896
 8001704:	00987d50 	.word	0x00987d50
 8001708:	008ff59a 	.word	0x008ff59a
 800170c:	0087e80b 	.word	0x0087e80b
 8001710:	00792071 	.word	0x00792071
 8001714:	007259db 	.word	0x007259db
 8001718:	006bf44d 	.word	0x006bf44d
 800171c:	006036e1 	.word	0x006036e1
 8001720:	005ad50d 	.word	0x005ad50d
 8001724:	0055c04c 	.word	0x0055c04c
 8001728:	004c6d01 	.word	0x004c6d01
 800172c:	0048268e 	.word	0x0048268e
 8001730:	00441d54 	.word	0x00441d54
 8001734:	003cb509 	.word	0x003cb509
 8001738:	00394faf 	.word	0x00394faf
 800173c:	00361af6 	.word	0x00361af6
 8001740:	003038af 	.word	0x003038af
 8001744:	010f2b41 	.word	0x010f2b41
 8001748:	011f3c9a 	.word	0x011f3c9a
 800174c:	013041af 	.word	0x013041af
 8001750:	014248f0 	.word	0x014248f0
 8001754:	015561a9 	.word	0x015561a9
 8001758:	01699c0f 	.word	0x01699c0f
 800175c:	017f094d 	.word	0x017f094d
 8001760:	0195bb8f 	.word	0x0195bb8f
 8001764:	01adc61a 	.word	0x01adc61a
 8001768:	01c73d52 	.word	0x01c73d52
 800176c:	01e236d4 	.word	0x01e236d4
 8001770:	01fec983 	.word	0x01fec983
 8001774:	021d0d9e 	.word	0x021d0d9e
 8001778:	023d1cd4 	.word	0x023d1cd4
 800177c:	025f1259 	.word	0x025f1259
 8001780:	02830afd 	.word	0x02830afd
 8001784:	02a92547 	.word	0x02a92547
 8001788:	02d1818b 	.word	0x02d1818b
	  comp_data[10] = 0x02FC4209; // +9.5dB
 800178c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001790:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001794:	4a7c      	ldr	r2, [pc, #496]	; (8001988 <main+0x69c>)
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
	  comp_data[9] = 0x03298B07; // +10dB
 8001798:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800179c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017a0:	4a7a      	ldr	r2, [pc, #488]	; (800198c <main+0x6a0>)
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
	  comp_data[8] = 0x035982F3; // +10.5dB
 80017a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017ac:	4a78      	ldr	r2, [pc, #480]	; (8001990 <main+0x6a4>)
 80017ae:	621a      	str	r2, [r3, #32]
	  comp_data[7] = 0x038C5281; // +11dB
 80017b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017b8:	4a76      	ldr	r2, [pc, #472]	; (8001994 <main+0x6a8>)
 80017ba:	61da      	str	r2, [r3, #28]
	  comp_data[6] = 0x03C224CD; // +11.5dB
 80017bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017c4:	4a74      	ldr	r2, [pc, #464]	; (8001998 <main+0x6ac>)
 80017c6:	619a      	str	r2, [r3, #24]
	  comp_data[5] = 0x03FB2784; // +12dB
 80017c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017d0:	4a72      	ldr	r2, [pc, #456]	; (800199c <main+0x6b0>)
 80017d2:	615a      	str	r2, [r3, #20]
	  comp_data[4] = 0x04378B05; // +12.5dB
 80017d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017dc:	4a70      	ldr	r2, [pc, #448]	; (80019a0 <main+0x6b4>)
 80017de:	611a      	str	r2, [r3, #16]
	  comp_data[3] = 0x0477828F; // +13dB
 80017e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017e8:	4a6e      	ldr	r2, [pc, #440]	; (80019a4 <main+0x6b8>)
 80017ea:	60da      	str	r2, [r3, #12]
	  comp_data[2] = 0x04BB4469; // +13.5dB
 80017ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017f4:	4a6c      	ldr	r2, [pc, #432]	; (80019a8 <main+0x6bc>)
 80017f6:	609a      	str	r2, [r3, #8]
	  comp_data[1] = 0x05030A11; // +14dB
 80017f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001800:	4a6a      	ldr	r2, [pc, #424]	; (80019ac <main+0x6c0>)
 8001802:	605a      	str	r2, [r3, #4]
	  comp_data[0] = 0x054F106E; // +14.5dB
 8001804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001808:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800180c:	4a68      	ldr	r2, [pc, #416]	; (80019b0 <main+0x6c4>)
 800180e:	601a      	str	r2, [r3, #0]

	  // 8.24 FixPoint
	  boost_data[29] = 0x02800000; // 2.50
 8001810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001814:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001818:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
 800181c:	675a      	str	r2, [r3, #116]	; 0x74
	  boost_data[28] = 0x02666666; // 2.40
 800181e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001822:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001826:	4a63      	ldr	r2, [pc, #396]	; (80019b4 <main+0x6c8>)
 8001828:	671a      	str	r2, [r3, #112]	; 0x70
	  boost_data[27] = 0x02570a3c; // 2.34
 800182a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800182e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001832:	4a61      	ldr	r2, [pc, #388]	; (80019b8 <main+0x6cc>)
 8001834:	66da      	str	r2, [r3, #108]	; 0x6c
	  boost_data[26] = 0x02451eb8; // 2.27
 8001836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800183e:	4a5f      	ldr	r2, [pc, #380]	; (80019bc <main+0x6d0>)
 8001840:	669a      	str	r2, [r3, #104]	; 0x68
	  boost_data[25] = 0x02333332; // 2.20
 8001842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001846:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800184a:	4a5d      	ldr	r2, [pc, #372]	; (80019c0 <main+0x6d4>)
 800184c:	665a      	str	r2, [r3, #100]	; 0x64
	  boost_data[24] = 0x022147ae; // 2.13
 800184e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001852:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001856:	4a5b      	ldr	r2, [pc, #364]	; (80019c4 <main+0x6d8>)
 8001858:	661a      	str	r2, [r3, #96]	; 0x60
	  boost_data[23] = 0x020f5c28; // 2.06
 800185a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800185e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001862:	4a59      	ldr	r2, [pc, #356]	; (80019c8 <main+0x6dc>)
 8001864:	65da      	str	r2, [r3, #92]	; 0x5c
	  boost_data[22] = 0x02000000; // 2.00
 8001866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800186a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800186e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001872:	659a      	str	r2, [r3, #88]	; 0x58
	  boost_data[21] = 0x01ee147a; // 1.93
 8001874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001878:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800187c:	4a53      	ldr	r2, [pc, #332]	; (80019cc <main+0x6e0>)
 800187e:	655a      	str	r2, [r3, #84]	; 0x54
	  boost_data[20] = 0x01dc28f4; // 1.86
 8001880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001884:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001888:	4a51      	ldr	r2, [pc, #324]	; (80019d0 <main+0x6e4>)
 800188a:	651a      	str	r2, [r3, #80]	; 0x50
	  boost_data[19] = 0x01ca3d70; // 1.79
 800188c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001890:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001894:	4a4f      	ldr	r2, [pc, #316]	; (80019d4 <main+0x6e8>)
 8001896:	64da      	str	r2, [r3, #76]	; 0x4c
	  boost_data[18] = 0x01b851ea; // 1.72
 8001898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018a0:	4a4d      	ldr	r2, [pc, #308]	; (80019d8 <main+0x6ec>)
 80018a2:	649a      	str	r2, [r3, #72]	; 0x48
	  boost_data[17] = 0x01a8f5c2; // 1.66
 80018a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018ac:	4a4b      	ldr	r2, [pc, #300]	; (80019dc <main+0x6f0>)
 80018ae:	645a      	str	r2, [r3, #68]	; 0x44
	  boost_data[16] = 0x01970a3c; // 1.59
 80018b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018b8:	4a49      	ldr	r2, [pc, #292]	; (80019e0 <main+0x6f4>)
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40
	  boost_data[15] = 0x01851eb8; // 1.52
 80018bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018c4:	4a47      	ldr	r2, [pc, #284]	; (80019e4 <main+0x6f8>)
 80018c6:	63da      	str	r2, [r3, #60]	; 0x3c
	  boost_data[14] = 0x01733332; // 1.45
 80018c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018cc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018d0:	4a45      	ldr	r2, [pc, #276]	; (80019e8 <main+0x6fc>)
 80018d2:	639a      	str	r2, [r3, #56]	; 0x38
	  boost_data[13] = 0x016147ae; // 1.38
 80018d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018dc:	4a43      	ldr	r2, [pc, #268]	; (80019ec <main+0x700>)
 80018de:	635a      	str	r2, [r3, #52]	; 0x34
	  boost_data[12] = 0x0151eb84; // 1.32
 80018e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018e8:	4a41      	ldr	r2, [pc, #260]	; (80019f0 <main+0x704>)
 80018ea:	631a      	str	r2, [r3, #48]	; 0x30
	  boost_data[11] = 0x01400000; // 1.25
 80018ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018f4:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c
	  boost_data[10] = 0x012e147a; // 1.18
 80018fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001902:	4a3c      	ldr	r2, [pc, #240]	; (80019f4 <main+0x708>)
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
	  boost_data[9] =  0x011c28f4; // 1.11
 8001906:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800190a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800190e:	4a3a      	ldr	r2, [pc, #232]	; (80019f8 <main+0x70c>)
 8001910:	625a      	str	r2, [r3, #36]	; 0x24
	  boost_data[8] =  0x010a3d70; // 1.04
 8001912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001916:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800191a:	4a38      	ldr	r2, [pc, #224]	; (80019fc <main+0x710>)
 800191c:	621a      	str	r2, [r3, #32]
	  boost_data[7] =  0x00fae146; // 0.98
 800191e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001922:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001926:	4a36      	ldr	r2, [pc, #216]	; (8001a00 <main+0x714>)
 8001928:	61da      	str	r2, [r3, #28]
	  boost_data[6] =  0x00e8f5c2; // 0.91
 800192a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001932:	4a34      	ldr	r2, [pc, #208]	; (8001a04 <main+0x718>)
 8001934:	619a      	str	r2, [r3, #24]
	  boost_data[5] =  0x00d70a3c; // 0.84
 8001936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800193e:	4a32      	ldr	r2, [pc, #200]	; (8001a08 <main+0x71c>)
 8001940:	615a      	str	r2, [r3, #20]
	  boost_data[4] =  0x00c51eb8; // 0.77
 8001942:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001946:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800194a:	4a30      	ldr	r2, [pc, #192]	; (8001a0c <main+0x720>)
 800194c:	611a      	str	r2, [r3, #16]
	  boost_data[3] =  0x00b33332; // 0.70
 800194e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001952:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001956:	4a2e      	ldr	r2, [pc, #184]	; (8001a10 <main+0x724>)
 8001958:	60da      	str	r2, [r3, #12]
	  boost_data[2] =  0x00a3d70a; // 0.64
 800195a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001962:	4a2c      	ldr	r2, [pc, #176]	; (8001a14 <main+0x728>)
 8001964:	609a      	str	r2, [r3, #8]
	  boost_data[1] =  0x0091eb84; // 0.57
 8001966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800196a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800196e:	4a2a      	ldr	r2, [pc, #168]	; (8001a18 <main+0x72c>)
 8001970:	605a      	str	r2, [r3, #4]
	  boost_data[0] =  0x00800000; // 0.50
 8001972:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001976:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800197a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800197e:	601a      	str	r2, [r3, #0]

	  for(k=0; k<30; k++)
 8001980:	2300      	movs	r3, #0
 8001982:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001986:	e098      	b.n	8001aba <main+0x7ce>
 8001988:	02fc4209 	.word	0x02fc4209
 800198c:	03298b07 	.word	0x03298b07
 8001990:	035982f3 	.word	0x035982f3
 8001994:	038c5281 	.word	0x038c5281
 8001998:	03c224cd 	.word	0x03c224cd
 800199c:	03fb2784 	.word	0x03fb2784
 80019a0:	04378b05 	.word	0x04378b05
 80019a4:	0477828f 	.word	0x0477828f
 80019a8:	04bb4469 	.word	0x04bb4469
 80019ac:	05030a11 	.word	0x05030a11
 80019b0:	054f106e 	.word	0x054f106e
 80019b4:	02666666 	.word	0x02666666
 80019b8:	02570a3c 	.word	0x02570a3c
 80019bc:	02451eb8 	.word	0x02451eb8
 80019c0:	02333332 	.word	0x02333332
 80019c4:	022147ae 	.word	0x022147ae
 80019c8:	020f5c28 	.word	0x020f5c28
 80019cc:	01ee147a 	.word	0x01ee147a
 80019d0:	01dc28f4 	.word	0x01dc28f4
 80019d4:	01ca3d70 	.word	0x01ca3d70
 80019d8:	01b851ea 	.word	0x01b851ea
 80019dc:	01a8f5c2 	.word	0x01a8f5c2
 80019e0:	01970a3c 	.word	0x01970a3c
 80019e4:	01851eb8 	.word	0x01851eb8
 80019e8:	01733332 	.word	0x01733332
 80019ec:	016147ae 	.word	0x016147ae
 80019f0:	0151eb84 	.word	0x0151eb84
 80019f4:	012e147a 	.word	0x012e147a
 80019f8:	011c28f4 	.word	0x011c28f4
 80019fc:	010a3d70 	.word	0x010a3d70
 8001a00:	00fae146 	.word	0x00fae146
 8001a04:	00e8f5c2 	.word	0x00e8f5c2
 8001a08:	00d70a3c 	.word	0x00d70a3c
 8001a0c:	00c51eb8 	.word	0x00c51eb8
 8001a10:	00b33332 	.word	0x00b33332
 8001a14:	00a3d70a 	.word	0x00a3d70a
 8001a18:	0091eb84 	.word	0x0091eb84
	  {
		  log_in_table[k] = 4096.0*log10(1.0+(3.0*k/10.0));
 8001a1c:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd2b 	bl	800047c <__aeabi_i2d>
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	4b93      	ldr	r3, [pc, #588]	; (8001c78 <main+0x98c>)
 8001a2c:	f7fe fd90 	bl	8000550 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	4b8f      	ldr	r3, [pc, #572]	; (8001c7c <main+0x990>)
 8001a3e:	f7fe feb1 	bl	80007a4 <__aeabi_ddiv>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	4b8c      	ldr	r3, [pc, #560]	; (8001c80 <main+0x994>)
 8001a50:	f7fe fbc8 	bl	80001e4 <__adddf3>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	ec43 2b17 	vmov	d7, r2, r3
 8001a5c:	eeb0 0a47 	vmov.f32	s0, s14
 8001a60:	eef0 0a67 	vmov.f32	s1, s15
 8001a64:	f004 f928 	bl	8005cb8 <log10>
 8001a68:	ec51 0b10 	vmov	r0, r1, d0
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	4b84      	ldr	r3, [pc, #528]	; (8001c84 <main+0x998>)
 8001a72:	f7fe fd6d 	bl	8000550 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	f8b7 4206 	ldrh.w	r4, [r7, #518]	; 0x206
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff f815 	bl	8000ab0 <__aeabi_d2uiz>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	4b7f      	ldr	r3, [pc, #508]	; (8001c88 <main+0x99c>)
 8001a8c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  linear_in_table[k] = 4096*k/30;
 8001a90:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001a94:	031b      	lsls	r3, r3, #12
 8001a96:	4a7d      	ldr	r2, [pc, #500]	; (8001c8c <main+0x9a0>)
 8001a98:	fb82 1203 	smull	r1, r2, r2, r3
 8001a9c:	441a      	add	r2, r3
 8001a9e:	1112      	asrs	r2, r2, #4
 8001aa0:	17db      	asrs	r3, r3, #31
 8001aa2:	1ad2      	subs	r2, r2, r3
 8001aa4:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001aa8:	b291      	uxth	r1, r2
 8001aaa:	4a79      	ldr	r2, [pc, #484]	; (8001c90 <main+0x9a4>)
 8001aac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(k=0; k<30; k++)
 8001ab0:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001aba:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001abe:	2b1d      	cmp	r3, #29
 8001ac0:	d9ac      	bls.n	8001a1c <main+0x730>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ac2:	f001 fa8f 	bl	8002fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac6:	f000 fb3f 	bl	8002148 <SystemClock_Config>
//  MX_I2C3_Init();
//  MX_TIM2_Init();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aca:	f000 fe03 	bl	80026d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ace:	f000 fde1 	bl	8002694 <MX_DMA_Init>
  MX_I2C2_Init();
 8001ad2:	f000 fce9 	bl	80024a8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001ad6:	f000 fd15 	bl	8002504 <MX_I2C3_Init>
  MX_ADC1_Init();
 8001ada:	f000 fba1 	bl	8002220 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ade:	f000 fcb5 	bl	800244c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001ae2:	f000 fd3d 	bl	8002560 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001ae6:	f000 fd89 	bl	80025fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8001aea:	486a      	ldr	r0, [pc, #424]	; (8001c94 <main+0x9a8>)
 8001aec:	f003 fe08 	bl	8005700 <HAL_TIM_Base_Start>
  // Disable DSP
  HAL_GPIO_WritePin(nRST_DSP_GPIO_Port, nRST_DSP_Pin, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af6:	4868      	ldr	r0, [pc, #416]	; (8001c98 <main+0x9ac>)
 8001af8:	f002 fcf8 	bl	80044ec <HAL_GPIO_WritePin>

  // Disable CLK
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b02:	4865      	ldr	r0, [pc, #404]	; (8001c98 <main+0x9ac>)
 8001b04:	f002 fcf2 	bl	80044ec <HAL_GPIO_WritePin>

  // Configure Sampling Rate SR = Standard => 0
  //							  Double   => 1
  HAL_GPIO_WritePin(SR_GPIO_Port, SR_Pin, GPIO_PIN_SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b0e:	4863      	ldr	r0, [pc, #396]	; (8001c9c <main+0x9b0>)
 8001b10:	f002 fcec 	bl	80044ec <HAL_GPIO_WritePin>
  // Configure System Clock SCKO1 CSEL = 0 (default)
  HAL_GPIO_WritePin(CSEL_GPIO_Port, CSEL_Pin, GPIO_PIN_RESET);
 8001b14:	2200      	movs	r2, #0
 8001b16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b1a:	4860      	ldr	r0, [pc, #384]	; (8001c9c <main+0x9b0>)
 8001b1c:	f002 fce6 	bl	80044ec <HAL_GPIO_WritePin>
  // Configure Sampling Frequency Group = 32KHz => 10
  HAL_GPIO_WritePin(FS2_GPIO_Port, FS2_Pin, GPIO_PIN_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b26:	485d      	ldr	r0, [pc, #372]	; (8001c9c <main+0x9b0>)
 8001b28:	f002 fce0 	bl	80044ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FS1_GPIO_Port, FS1_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b32:	485a      	ldr	r0, [pc, #360]	; (8001c9c <main+0x9b0>)
 8001b34:	f002 fcda 	bl	80044ec <HAL_GPIO_WritePin>

  // Enable CLK
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b3e:	4856      	ldr	r0, [pc, #344]	; (8001c98 <main+0x9ac>)
 8001b40:	f002 fcd4 	bl	80044ec <HAL_GPIO_WritePin>

  HAL_Delay(500);
 8001b44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b48:	f001 fabe 	bl	80030c8 <HAL_Delay>

  // Enable DSP
  HAL_GPIO_WritePin(nRST_DSP_GPIO_Port, nRST_DSP_Pin, GPIO_PIN_SET);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b52:	4851      	ldr	r0, [pc, #324]	; (8001c98 <main+0x9ac>)
 8001b54:	f002 fcca 	bl	80044ec <HAL_GPIO_WritePin>

  HAL_Delay(100);
 8001b58:	2064      	movs	r0, #100	; 0x64
 8001b5a:	f001 fab5 	bl	80030c8 <HAL_Delay>

  default_download_IC_1();
 8001b5e:	f7ff f945 	bl	8000dec <default_download_IC_1>
  HAL_Delay(500);
 8001b62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b66:	f001 faaf 	bl	80030c8 <HAL_Delay>

  // Configure DAC format to I2S 16-24 bit, slow roll-off
  auxData[0] = 0b00000100;
 8001b6a:	4b4d      	ldr	r3, [pc, #308]	; (8001ca0 <main+0x9b4>)
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	701a      	strb	r2, [r3, #0]
  auxData[1] = 0x00;
 8001b70:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <main+0x9b4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	705a      	strb	r2, [r3, #1]
  stat = HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, 0x09, 1, auxData, 1, 1000);
 8001b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <main+0x9b4>)
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2301      	movs	r3, #1
 8001b86:	2209      	movs	r2, #9
 8001b88:	2198      	movs	r1, #152	; 0x98
 8001b8a:	4846      	ldr	r0, [pc, #280]	; (8001ca4 <main+0x9b8>)
 8001b8c:	f002 fe0c 	bl	80047a8 <HAL_I2C_Mem_Write>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b44      	ldr	r3, [pc, #272]	; (8001ca8 <main+0x9bc>)
 8001b96:	701a      	strb	r2, [r3, #0]

  auxData[0] = 0b00101001;
 8001b98:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <main+0x9b4>)
 8001b9a:	2229      	movs	r2, #41	; 0x29
 8001b9c:	701a      	strb	r2, [r3, #0]
  auxData[1] = 0x00;
 8001b9e:	4b40      	ldr	r3, [pc, #256]	; (8001ca0 <main+0x9b4>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	705a      	strb	r2, [r3, #1]
  stat = HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, 0x0A, 1, auxData, 1, 1000);
 8001ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba8:	9302      	str	r3, [sp, #8]
 8001baa:	2301      	movs	r3, #1
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	4b3c      	ldr	r3, [pc, #240]	; (8001ca0 <main+0x9b4>)
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	220a      	movs	r2, #10
 8001bb6:	2198      	movs	r1, #152	; 0x98
 8001bb8:	483a      	ldr	r0, [pc, #232]	; (8001ca4 <main+0x9b8>)
 8001bba:	f002 fdf5 	bl	80047a8 <HAL_I2C_Mem_Write>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <main+0x9bc>)
 8001bc4:	701a      	strb	r2, [r3, #0]

  // Configure DAC over-sampling wide, sharp roll-off
  auxData[0] = 0b10000000;
 8001bc6:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <main+0x9b4>)
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	701a      	strb	r2, [r3, #0]
  auxData[1] = 0x00;
 8001bcc:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <main+0x9b4>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	705a      	strb	r2, [r3, #1]
  stat = HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, 0x0C, 1, auxData, 1, 1000);
 8001bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <main+0x9b4>)
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2301      	movs	r3, #1
 8001be2:	220c      	movs	r2, #12
 8001be4:	2198      	movs	r1, #152	; 0x98
 8001be6:	482f      	ldr	r0, [pc, #188]	; (8001ca4 <main+0x9b8>)
 8001be8:	f002 fdde 	bl	80047a8 <HAL_I2C_Mem_Write>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <main+0x9bc>)
 8001bf2:	701a      	strb	r2, [r3, #0]
//
//  stat = HAL_I2C_Mem_Write(&hi2c1, ADC_ADDR, 0x0E, 1, auxData, 1, 1000);
//  stat = HAL_I2C_Mem_Write(&hi2c2, ADC_ADDR, 0x0E, 1, auxData, 1, 1000);
//  stat = HAL_I2C_Mem_Write(&hi2c3, ADC_ADDR, 0x0E, 1, auxData, 1, 1000);

  for(k=0; k<ADC_POT; k++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001bfa:	e00a      	b.n	8001c12 <main+0x926>
  {
	  flag[k] = 1;
 8001bfc:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001c00:	4a2a      	ldr	r2, [pc, #168]	; (8001cac <main+0x9c0>)
 8001c02:	2101      	movs	r1, #1
 8001c04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(k=0; k<ADC_POT; k++)
 8001c08:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001c12:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001c16:	2b0e      	cmp	r3, #14
 8001c18:	d9f0      	bls.n	8001bfc <main+0x910>
  }

  HAL_TIM_Base_Start(&htim2);
 8001c1a:	4825      	ldr	r0, [pc, #148]	; (8001cb0 <main+0x9c4>)
 8001c1c:	f003 fd70 	bl	8005700 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, value, ADC_POT);
 8001c20:	220f      	movs	r2, #15
 8001c22:	4924      	ldr	r1, [pc, #144]	; (8001cb4 <main+0x9c8>)
 8001c24:	4824      	ldr	r0, [pc, #144]	; (8001cb8 <main+0x9cc>)
 8001c26:	f001 fab7 	bl	8003198 <HAL_ADC_Start_DMA>

  HAL_Delay(3000);
 8001c2a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c2e:	f001 fa4b 	bl	80030c8 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  data_SafeLoad[2] = 0x00;
 8001c32:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <main+0x9d0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	709a      	strb	r2, [r3, #2]
	  data_SafeLoad[1] = 0x00;
 8001c38:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <main+0x9d0>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	705a      	strb	r2, [r3, #1]
	  data_SafeLoad[0] = 0x00;
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <main+0x9d0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]

	  address_SafeLoad[1] = 0x00;
 8001c44:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <main+0x9d4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	705a      	strb	r2, [r3, #1]
	  address_SafeLoad[0] = 0x00;
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <main+0x9d4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]

	  num_SafeLoad[3] = 0x01;
 8001c50:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <main+0x9d8>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	70da      	strb	r2, [r3, #3]
 	  num_SafeLoad[2] = 0x00;
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <main+0x9d8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	709a      	strb	r2, [r3, #2]
	  num_SafeLoad[1] = 0x00;
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <main+0x9d8>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	705a      	strb	r2, [r3, #1]
	  num_SafeLoad[0] = 0x00;
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <main+0x9d8>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]

	  if(update == 1)
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <main+0x9dc>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d1e0      	bne.n	8001c32 <main+0x946>
	  {
		  for(k=0; k<VOL_ARRAY; k++) // Filters 32Hz - 16KHz + Subwoofer
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001c76:	e076      	b.n	8001d66 <main+0xa7a>
 8001c78:	40080000 	.word	0x40080000
 8001c7c:	40240000 	.word	0x40240000
 8001c80:	3ff00000 	.word	0x3ff00000
 8001c84:	40b00000 	.word	0x40b00000
 8001c88:	20009c7c 	.word	0x20009c7c
 8001c8c:	88888889 	.word	0x88888889
 8001c90:	20009cb8 	.word	0x20009cb8
 8001c94:	20009bd0 	.word	0x20009bd0
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	20009c1c 	.word	0x20009c1c
 8001ca4:	20009b34 	.word	0x20009b34
 8001ca8:	20009c18 	.word	0x20009c18
 8001cac:	20009cf4 	.word	0x20009cf4
 8001cb0:	20009b88 	.word	0x20009b88
 8001cb4:	20009c20 	.word	0x20009c20
 8001cb8:	200099e4 	.word	0x200099e4
 8001cbc:	20009d14 	.word	0x20009d14
 8001cc0:	20009d18 	.word	0x20009d18
 8001cc4:	20009d1c 	.word	0x20009d1c
 8001cc8:	20009d12 	.word	0x20009d12
		  {
			  if(flag[k] == 1)
 8001ccc:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001cd0:	4acb      	ldr	r2, [pc, #812]	; (8002000 <main+0xd14>)
 8001cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d140      	bne.n	8001d5c <main+0xa70>
			  {
				  flag[k] = 0;
 8001cda:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001cde:	4ac8      	ldr	r2, [pc, #800]	; (8002000 <main+0xd14>)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  data_SafeLoad[3] = 29 - pote[k];
 8001ce6:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001cea:	4ac6      	ldr	r2, [pc, #792]	; (8002004 <main+0xd18>)
 8001cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f1c3 031d 	rsb	r3, r3, #29
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	4bc3      	ldr	r3, [pc, #780]	; (8002008 <main+0xd1c>)
 8001cfa:	70da      	strb	r2, [r3, #3]
				  address_SafeLoad[3] = 0xFF & (BandAddress[k]);
 8001cfc:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d06:	443b      	add	r3, r7
 8001d08:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4bbf      	ldr	r3, [pc, #764]	; (800200c <main+0xd20>)
 8001d10:	70da      	strb	r2, [r3, #3]
				  address_SafeLoad[2] = 0xFF & ((BandAddress[k])>>8);
 8001d12:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d1c:	443b      	add	r3, r7
 8001d1e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	4bb8      	ldr	r3, [pc, #736]	; (800200c <main+0xd20>)
 8001d2a:	709a      	strb	r2, [r3, #2]
				  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8001d2c:	4bb6      	ldr	r3, [pc, #728]	; (8002008 <main+0xd1c>)
 8001d2e:	2204      	movs	r2, #4
 8001d30:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001d34:	2070      	movs	r0, #112	; 0x70
 8001d36:	f000 fd6f 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
				  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 8001d3a:	4bb4      	ldr	r3, [pc, #720]	; (800200c <main+0xd20>)
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	f246 0105 	movw	r1, #24581	; 0x6005
 8001d42:	2070      	movs	r0, #112	; 0x70
 8001d44:	f000 fd68 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
				  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_NUM_SAFELOAD_ADDR, 4, num_SafeLoad);
 8001d48:	4bb1      	ldr	r3, [pc, #708]	; (8002010 <main+0xd24>)
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	f246 0106 	movw	r1, #24582	; 0x6006
 8001d50:	2070      	movs	r0, #112	; 0x70
 8001d52:	f000 fd61 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
				  delay_us(100);
 8001d56:	2064      	movs	r0, #100	; 0x64
 8001d58:	f000 fec2 	bl	8002ae0 <delay_us>
		  for(k=0; k<VOL_ARRAY; k++) // Filters 32Hz - 16KHz + Subwoofer
 8001d5c:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001d60:	3301      	adds	r3, #1
 8001d62:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 8001d66:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8001d6a:	2b0a      	cmp	r3, #10
 8001d6c:	d9ae      	bls.n	8001ccc <main+0x9e0>
			  }

		  }

		  if(flag[VOL_ARRAY] == 1)
 8001d6e:	4ba4      	ldr	r3, [pc, #656]	; (8002000 <main+0xd14>)
 8001d70:	8adb      	ldrh	r3, [r3, #22]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d15b      	bne.n	8001e2e <main+0xb42>
		  {
			  flag[VOL_ARRAY] = 0;
 8001d76:	4ba2      	ldr	r3, [pc, #648]	; (8002000 <main+0xd14>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	82da      	strh	r2, [r3, #22]
			  pote_aux = 29 - pote[VOL_ARRAY];
 8001d7c:	4ba1      	ldr	r3, [pc, #644]	; (8002004 <main+0xd18>)
 8001d7e:	8adb      	ldrh	r3, [r3, #22]
 8001d80:	f1c3 031d 	rsb	r3, r3, #29
 8001d84:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

			  data_SafeLoad[3] = 0xFF & (vol_data[pote_aux]);
 8001d88:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d92:	443b      	add	r3, r7
 8001d94:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4b9b      	ldr	r3, [pc, #620]	; (8002008 <main+0xd1c>)
 8001d9c:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((vol_data[pote_aux])>>8);
 8001d9e:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001da8:	443b      	add	r3, r7
 8001daa:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4b95      	ldr	r3, [pc, #596]	; (8002008 <main+0xd1c>)
 8001db4:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((vol_data[pote_aux])>>16);
 8001db6:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001dc0:	443b      	add	r3, r7
 8001dc2:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001dc6:	0c1b      	lsrs	r3, r3, #16
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b8f      	ldr	r3, [pc, #572]	; (8002008 <main+0xd1c>)
 8001dcc:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((vol_data[pote_aux])>>24);
 8001dce:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001dd8:	443b      	add	r3, r7
 8001dda:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001dde:	0e1b      	lsrs	r3, r3, #24
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b89      	ldr	r3, [pc, #548]	; (8002008 <main+0xd1c>)
 8001de4:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[VOL_ARRAY]);
 8001de6:	f8b7 31fa 	ldrh.w	r3, [r7, #506]	; 0x1fa
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b87      	ldr	r3, [pc, #540]	; (800200c <main+0xd20>)
 8001dee:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[VOL_ARRAY])>>8);
 8001df0:	f8b7 31fa 	ldrh.w	r3, [r7, #506]	; 0x1fa
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4b84      	ldr	r3, [pc, #528]	; (800200c <main+0xd20>)
 8001dfc:	709a      	strb	r2, [r3, #2]
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8001dfe:	4b82      	ldr	r3, [pc, #520]	; (8002008 <main+0xd1c>)
 8001e00:	2204      	movs	r2, #4
 8001e02:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001e06:	2070      	movs	r0, #112	; 0x70
 8001e08:	f000 fd06 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 8001e0c:	4b7f      	ldr	r3, [pc, #508]	; (800200c <main+0xd20>)
 8001e0e:	2204      	movs	r2, #4
 8001e10:	f246 0105 	movw	r1, #24581	; 0x6005
 8001e14:	2070      	movs	r0, #112	; 0x70
 8001e16:	f000 fcff 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_NUM_SAFELOAD_ADDR, 4, num_SafeLoad);
 8001e1a:	4b7d      	ldr	r3, [pc, #500]	; (8002010 <main+0xd24>)
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	f246 0106 	movw	r1, #24582	; 0x6006
 8001e22:	2070      	movs	r0, #112	; 0x70
 8001e24:	f000 fcf8 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
			  delay_us(100);
 8001e28:	2064      	movs	r0, #100	; 0x64
 8001e2a:	f000 fe59 	bl	8002ae0 <delay_us>
		  }

		  if(flag[LOUD_LOW_ARRAY] == 1)
 8001e2e:	4b74      	ldr	r3, [pc, #464]	; (8002000 <main+0xd14>)
 8001e30:	8b1b      	ldrh	r3, [r3, #24]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d15b      	bne.n	8001eee <main+0xc02>
		  {
			  flag[LOUD_LOW_ARRAY] = 0;
 8001e36:	4b72      	ldr	r3, [pc, #456]	; (8002000 <main+0xd14>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	831a      	strh	r2, [r3, #24]
			  pote_aux = 29 - pote[LOUD_LOW_ARRAY];
 8001e3c:	4b71      	ldr	r3, [pc, #452]	; (8002004 <main+0xd18>)
 8001e3e:	8b1b      	ldrh	r3, [r3, #24]
 8001e40:	f1c3 031d 	rsb	r3, r3, #29
 8001e44:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

			  data_SafeLoad[3] = 0xFF & (boost_data[pote_aux]);
 8001e48:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e50:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b6b      	ldr	r3, [pc, #428]	; (8002008 <main+0xd1c>)
 8001e5c:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((boost_data[pote_aux])>>8);
 8001e5e:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e66:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4b65      	ldr	r3, [pc, #404]	; (8002008 <main+0xd1c>)
 8001e74:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8001e76:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e86:	0c1b      	lsrs	r3, r3, #16
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4b5f      	ldr	r3, [pc, #380]	; (8002008 <main+0xd1c>)
 8001e8c:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((boost_data[pote_aux])>>24);
 8001e8e:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e96:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9e:	0e1b      	lsrs	r3, r3, #24
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4b59      	ldr	r3, [pc, #356]	; (8002008 <main+0xd1c>)
 8001ea4:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_LOW_ARRAY]);
 8001ea6:	f8b7 31fc 	ldrh.w	r3, [r7, #508]	; 0x1fc
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	4b57      	ldr	r3, [pc, #348]	; (800200c <main+0xd20>)
 8001eae:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_LOW_ARRAY])>>8);
 8001eb0:	f8b7 31fc 	ldrh.w	r3, [r7, #508]	; 0x1fc
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4b54      	ldr	r3, [pc, #336]	; (800200c <main+0xd20>)
 8001ebc:	709a      	strb	r2, [r3, #2]
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8001ebe:	4b52      	ldr	r3, [pc, #328]	; (8002008 <main+0xd1c>)
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001ec6:	2070      	movs	r0, #112	; 0x70
 8001ec8:	f000 fca6 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 8001ecc:	4b4f      	ldr	r3, [pc, #316]	; (800200c <main+0xd20>)
 8001ece:	2204      	movs	r2, #4
 8001ed0:	f246 0105 	movw	r1, #24581	; 0x6005
 8001ed4:	2070      	movs	r0, #112	; 0x70
 8001ed6:	f000 fc9f 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_NUM_SAFELOAD_ADDR, 4, num_SafeLoad);
 8001eda:	4b4d      	ldr	r3, [pc, #308]	; (8002010 <main+0xd24>)
 8001edc:	2204      	movs	r2, #4
 8001ede:	f246 0106 	movw	r1, #24582	; 0x6006
 8001ee2:	2070      	movs	r0, #112	; 0x70
 8001ee4:	f000 fc98 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
			  delay_us(100);
 8001ee8:	2064      	movs	r0, #100	; 0x64
 8001eea:	f000 fdf9 	bl	8002ae0 <delay_us>
		  }

		  if(flag[LOUD_HIGH_ARRAY] == 1)
 8001eee:	4b44      	ldr	r3, [pc, #272]	; (8002000 <main+0xd14>)
 8001ef0:	8b5b      	ldrh	r3, [r3, #26]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d15b      	bne.n	8001fae <main+0xcc2>
		  {
			  flag[LOUD_HIGH_ARRAY] = 0;
 8001ef6:	4b42      	ldr	r3, [pc, #264]	; (8002000 <main+0xd14>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	835a      	strh	r2, [r3, #26]
			  pote_aux = 29 - pote[LOUD_HIGH_ARRAY];
 8001efc:	4b41      	ldr	r3, [pc, #260]	; (8002004 <main+0xd18>)
 8001efe:	8b5b      	ldrh	r3, [r3, #26]
 8001f00:	f1c3 031d 	rsb	r3, r3, #29
 8001f04:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

			  data_SafeLoad[3] = 0xFF & (boost_data[pote_aux]);
 8001f08:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f10:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <main+0xd1c>)
 8001f1c:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((boost_data[pote_aux])>>8);
 8001f1e:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f26:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4b35      	ldr	r3, [pc, #212]	; (8002008 <main+0xd1c>)
 8001f34:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((boost_data[pote_aux])>>16);
 8001f36:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f46:	0c1b      	lsrs	r3, r3, #16
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <main+0xd1c>)
 8001f4c:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((boost_data[pote_aux])>>24);
 8001f4e:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001f52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f56:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5e:	0e1b      	lsrs	r3, r3, #24
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b29      	ldr	r3, [pc, #164]	; (8002008 <main+0xd1c>)
 8001f64:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_HIGH_ARRAY]);
 8001f66:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <main+0xd20>)
 8001f6e:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_HIGH_ARRAY])>>8);
 8001f70:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4b24      	ldr	r3, [pc, #144]	; (800200c <main+0xd20>)
 8001f7c:	709a      	strb	r2, [r3, #2]
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <main+0xd1c>)
 8001f80:	2204      	movs	r2, #4
 8001f82:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001f86:	2070      	movs	r0, #112	; 0x70
 8001f88:	f000 fc46 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	; (800200c <main+0xd20>)
 8001f8e:	2204      	movs	r2, #4
 8001f90:	f246 0105 	movw	r1, #24581	; 0x6005
 8001f94:	2070      	movs	r0, #112	; 0x70
 8001f96:	f000 fc3f 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_NUM_SAFELOAD_ADDR, 4, num_SafeLoad);
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <main+0xd24>)
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	f246 0106 	movw	r1, #24582	; 0x6006
 8001fa2:	2070      	movs	r0, #112	; 0x70
 8001fa4:	f000 fc38 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
			  delay_us(100);
 8001fa8:	2064      	movs	r0, #100	; 0x64
 8001faa:	f000 fd99 	bl	8002ae0 <delay_us>
		  }

		  if(flag[LOUD_GRL_ARRAY] == 1)
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <main+0xd14>)
 8001fb0:	8b9b      	ldrh	r3, [r3, #28]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	f040 80b3 	bne.w	800211e <main+0xe32>
		  {
			  flag[LOUD_GRL_ARRAY] = 0;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <main+0xd14>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	839a      	strh	r2, [r3, #28]
			  pote_aux = pote[LOUD_GRL_ARRAY];
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <main+0xd18>)
 8001fc0:	8b9b      	ldrh	r3, [r3, #28]
 8001fc2:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204

			  data_SafeLoad[3] = 0xFF & (loud_data[pote_aux]);
 8001fc6:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <main+0xd1c>)
 8001fda:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((loud_data[pote_aux])>>8);
 8001fdc:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <main+0xd1c>)
 8001ff2:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((loud_data[pote_aux])>>16);
 8001ff4:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8001ff8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ffc:	e00a      	b.n	8002014 <main+0xd28>
 8001ffe:	bf00      	nop
 8002000:	20009cf4 	.word	0x20009cf4
 8002004:	20009c5c 	.word	0x20009c5c
 8002008:	20009d14 	.word	0x20009d14
 800200c:	20009d18 	.word	0x20009d18
 8002010:	20009d1c 	.word	0x20009d1c
 8002014:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201c:	0c1b      	lsrs	r3, r3, #16
 800201e:	b2da      	uxtb	r2, r3
 8002020:	4b43      	ldr	r3, [pc, #268]	; (8002130 <main+0xe44>)
 8002022:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((loud_data[pote_aux])>>24);
 8002024:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002034:	0e1b      	lsrs	r3, r3, #24
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <main+0xe44>)
 800203a:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (BandAddress[LOUD_GRL_ARRAY]);
 800203c:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b3c      	ldr	r3, [pc, #240]	; (8002134 <main+0xe48>)
 8002044:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((BandAddress[LOUD_GRL_ARRAY])>>8);
 8002046:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	b29b      	uxth	r3, r3
 800204e:	b2da      	uxtb	r2, r3
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <main+0xe48>)
 8002052:	709a      	strb	r2, [r3, #2]
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 8002054:	4b36      	ldr	r3, [pc, #216]	; (8002130 <main+0xe44>)
 8002056:	2204      	movs	r2, #4
 8002058:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800205c:	2070      	movs	r0, #112	; 0x70
 800205e:	f000 fbdb 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 8002062:	4b34      	ldr	r3, [pc, #208]	; (8002134 <main+0xe48>)
 8002064:	2204      	movs	r2, #4
 8002066:	f246 0105 	movw	r1, #24581	; 0x6005
 800206a:	2070      	movs	r0, #112	; 0x70
 800206c:	f000 fbd4 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_NUM_SAFELOAD_ADDR, 4, num_SafeLoad);
 8002070:	4b31      	ldr	r3, [pc, #196]	; (8002138 <main+0xe4c>)
 8002072:	2204      	movs	r2, #4
 8002074:	f246 0106 	movw	r1, #24582	; 0x6006
 8002078:	2070      	movs	r0, #112	; 0x70
 800207a:	f000 fbcd 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
			  delay_us(100);
 800207e:	2064      	movs	r0, #100	; 0x64
 8002080:	f000 fd2e 	bl	8002ae0 <delay_us>

			  data_SafeLoad[3] = 0xFF & (comp_data[pote_aux]);
 8002084:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8002088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800208c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4b26      	ldr	r3, [pc, #152]	; (8002130 <main+0xe44>)
 8002098:	70da      	strb	r2, [r3, #3]
			  data_SafeLoad[2] = 0xFF & ((comp_data[pote_aux])>>8);
 800209a:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 800209e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <main+0xe44>)
 80020b0:	709a      	strb	r2, [r3, #2]
			  data_SafeLoad[1] = 0xFF & ((comp_data[pote_aux])>>16);
 80020b2:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 80020b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c2:	0c1b      	lsrs	r3, r3, #16
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <main+0xe44>)
 80020c8:	705a      	strb	r2, [r3, #1]
			  data_SafeLoad[0] = 0xFF & ((comp_data[pote_aux])>>24);
 80020ca:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 80020ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020da:	0e1b      	lsrs	r3, r3, #24
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4b14      	ldr	r3, [pc, #80]	; (8002130 <main+0xe44>)
 80020e0:	701a      	strb	r2, [r3, #0]
			  address_SafeLoad[3] = 0xFF & (MOD_LOUDCOMP_GAINALGNS145X2GAIN_ADDR);
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <main+0xe48>)
 80020e4:	229a      	movs	r2, #154	; 0x9a
 80020e6:	70da      	strb	r2, [r3, #3]
			  address_SafeLoad[2] = 0xFF & ((MOD_LOUDCOMP_GAINALGNS145X2GAIN_ADDR)>>8);
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <main+0xe48>)
 80020ea:	2209      	movs	r2, #9
 80020ec:	709a      	strb	r2, [r3, #2]
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_DATA_SAFELOAD0_ADDR, 4, data_SafeLoad);
 80020ee:	4b10      	ldr	r3, [pc, #64]	; (8002130 <main+0xe44>)
 80020f0:	2204      	movs	r2, #4
 80020f2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80020f6:	2070      	movs	r0, #112	; 0x70
 80020f8:	f000 fb8e 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_ADDRESS_SAFELOAD_ADDR, 4, address_SafeLoad);
 80020fc:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <main+0xe48>)
 80020fe:	2204      	movs	r2, #4
 8002100:	f246 0105 	movw	r1, #24581	; 0x6005
 8002104:	2070      	movs	r0, #112	; 0x70
 8002106:	f000 fb87 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
			  SIGMA_WRITE_REGISTER_BLOCK(DEVICE_ADDR_IC_1, MOD_SAFELOADMODULE_NUM_SAFELOAD_ADDR, 4, num_SafeLoad);
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <main+0xe4c>)
 800210c:	2204      	movs	r2, #4
 800210e:	f246 0106 	movw	r1, #24582	; 0x6006
 8002112:	2070      	movs	r0, #112	; 0x70
 8002114:	f000 fb80 	bl	8002818 <SIGMA_WRITE_REGISTER_BLOCK>
			  delay_us(100);
 8002118:	2064      	movs	r0, #100	; 0x64
 800211a:	f000 fce1 	bl	8002ae0 <delay_us>
		  }

		  update = 0;
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <main+0xe50>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_DMA(&hadc1, value, ADC_POT);
 8002124:	220f      	movs	r2, #15
 8002126:	4906      	ldr	r1, [pc, #24]	; (8002140 <main+0xe54>)
 8002128:	4806      	ldr	r0, [pc, #24]	; (8002144 <main+0xe58>)
 800212a:	f001 f835 	bl	8003198 <HAL_ADC_Start_DMA>
	  data_SafeLoad[2] = 0x00;
 800212e:	e580      	b.n	8001c32 <main+0x946>
 8002130:	20009d14 	.word	0x20009d14
 8002134:	20009d18 	.word	0x20009d18
 8002138:	20009d1c 	.word	0x20009d1c
 800213c:	20009d12 	.word	0x20009d12
 8002140:	20009c20 	.word	0x20009c20
 8002144:	200099e4 	.word	0x200099e4

08002148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b094      	sub	sp, #80	; 0x50
 800214c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800214e:	f107 0320 	add.w	r3, r7, #32
 8002152:	2230      	movs	r2, #48	; 0x30
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f003 fd7c 	bl	8005c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	4b29      	ldr	r3, [pc, #164]	; (8002218 <SystemClock_Config+0xd0>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	4a28      	ldr	r2, [pc, #160]	; (8002218 <SystemClock_Config+0xd0>)
 8002176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217a:	6413      	str	r3, [r2, #64]	; 0x40
 800217c:	4b26      	ldr	r3, [pc, #152]	; (8002218 <SystemClock_Config+0xd0>)
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002188:	2300      	movs	r3, #0
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	4b23      	ldr	r3, [pc, #140]	; (800221c <SystemClock_Config+0xd4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002194:	4a21      	ldr	r2, [pc, #132]	; (800221c <SystemClock_Config+0xd4>)
 8002196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b1f      	ldr	r3, [pc, #124]	; (800221c <SystemClock_Config+0xd4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021a8:	2301      	movs	r3, #1
 80021aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80021ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021b2:	2302      	movs	r3, #2
 80021b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 27;
 80021bc:	231b      	movs	r3, #27
 80021be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80021c0:	23a0      	movs	r3, #160	; 0xa0
 80021c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021c4:	2302      	movs	r3, #2
 80021c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021c8:	2304      	movs	r3, #4
 80021ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021cc:	f107 0320 	add.w	r3, r7, #32
 80021d0:	4618      	mov	r0, r3
 80021d2:	f002 fe01 	bl	8004dd8 <HAL_RCC_OscConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80021dc:	f000 fc9a 	bl	8002b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021e0:	230f      	movs	r3, #15
 80021e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021e4:	2302      	movs	r3, #2
 80021e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	2102      	movs	r1, #2
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 f862 	bl	80052c8 <HAL_RCC_ClockConfig>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800220a:	f000 fc83 	bl	8002b14 <Error_Handler>
  }
}
 800220e:	bf00      	nop
 8002210:	3750      	adds	r7, #80	; 0x50
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40007000 	.word	0x40007000

08002220 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002226:	463b      	mov	r3, r7
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002232:	4b84      	ldr	r3, [pc, #528]	; (8002444 <MX_ADC1_Init+0x224>)
 8002234:	4a84      	ldr	r2, [pc, #528]	; (8002448 <MX_ADC1_Init+0x228>)
 8002236:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002238:	4b82      	ldr	r3, [pc, #520]	; (8002444 <MX_ADC1_Init+0x224>)
 800223a:	2200      	movs	r2, #0
 800223c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800223e:	4b81      	ldr	r3, [pc, #516]	; (8002444 <MX_ADC1_Init+0x224>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002244:	4b7f      	ldr	r3, [pc, #508]	; (8002444 <MX_ADC1_Init+0x224>)
 8002246:	2201      	movs	r2, #1
 8002248:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800224a:	4b7e      	ldr	r3, [pc, #504]	; (8002444 <MX_ADC1_Init+0x224>)
 800224c:	2200      	movs	r2, #0
 800224e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002250:	4b7c      	ldr	r3, [pc, #496]	; (8002444 <MX_ADC1_Init+0x224>)
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002258:	4b7a      	ldr	r3, [pc, #488]	; (8002444 <MX_ADC1_Init+0x224>)
 800225a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002260:	4b78      	ldr	r3, [pc, #480]	; (8002444 <MX_ADC1_Init+0x224>)
 8002262:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002268:	4b76      	ldr	r3, [pc, #472]	; (8002444 <MX_ADC1_Init+0x224>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 15;
 800226e:	4b75      	ldr	r3, [pc, #468]	; (8002444 <MX_ADC1_Init+0x224>)
 8002270:	220f      	movs	r2, #15
 8002272:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002274:	4b73      	ldr	r3, [pc, #460]	; (8002444 <MX_ADC1_Init+0x224>)
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800227c:	4b71      	ldr	r3, [pc, #452]	; (8002444 <MX_ADC1_Init+0x224>)
 800227e:	2200      	movs	r2, #0
 8002280:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002282:	4870      	ldr	r0, [pc, #448]	; (8002444 <MX_ADC1_Init+0x224>)
 8002284:	f000 ff44 	bl	8003110 <HAL_ADC_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800228e:	f000 fc41 	bl	8002b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002292:	2300      	movs	r3, #0
 8002294:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002296:	2301      	movs	r3, #1
 8002298:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800229a:	2304      	movs	r3, #4
 800229c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800229e:	463b      	mov	r3, r7
 80022a0:	4619      	mov	r1, r3
 80022a2:	4868      	ldr	r0, [pc, #416]	; (8002444 <MX_ADC1_Init+0x224>)
 80022a4:	f001 f87c 	bl	80033a0 <HAL_ADC_ConfigChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80022ae:	f000 fc31 	bl	8002b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80022b6:	2302      	movs	r3, #2
 80022b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ba:	463b      	mov	r3, r7
 80022bc:	4619      	mov	r1, r3
 80022be:	4861      	ldr	r0, [pc, #388]	; (8002444 <MX_ADC1_Init+0x224>)
 80022c0:	f001 f86e 	bl	80033a0 <HAL_ADC_ConfigChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80022ca:	f000 fc23 	bl	8002b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80022ce:	2302      	movs	r3, #2
 80022d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80022d2:	2303      	movs	r3, #3
 80022d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022d6:	463b      	mov	r3, r7
 80022d8:	4619      	mov	r1, r3
 80022da:	485a      	ldr	r0, [pc, #360]	; (8002444 <MX_ADC1_Init+0x224>)
 80022dc:	f001 f860 	bl	80033a0 <HAL_ADC_ConfigChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80022e6:	f000 fc15 	bl	8002b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80022ea:	2303      	movs	r3, #3
 80022ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80022ee:	2304      	movs	r3, #4
 80022f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022f2:	463b      	mov	r3, r7
 80022f4:	4619      	mov	r1, r3
 80022f6:	4853      	ldr	r0, [pc, #332]	; (8002444 <MX_ADC1_Init+0x224>)
 80022f8:	f001 f852 	bl	80033a0 <HAL_ADC_ConfigChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002302:	f000 fc07 	bl	8002b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002306:	2304      	movs	r3, #4
 8002308:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800230a:	2305      	movs	r3, #5
 800230c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800230e:	463b      	mov	r3, r7
 8002310:	4619      	mov	r1, r3
 8002312:	484c      	ldr	r0, [pc, #304]	; (8002444 <MX_ADC1_Init+0x224>)
 8002314:	f001 f844 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800231e:	f000 fbf9 	bl	8002b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002322:	2305      	movs	r3, #5
 8002324:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002326:	2306      	movs	r3, #6
 8002328:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800232a:	463b      	mov	r3, r7
 800232c:	4619      	mov	r1, r3
 800232e:	4845      	ldr	r0, [pc, #276]	; (8002444 <MX_ADC1_Init+0x224>)
 8002330:	f001 f836 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 800233a:	f000 fbeb 	bl	8002b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800233e:	2306      	movs	r3, #6
 8002340:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002342:	2307      	movs	r3, #7
 8002344:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002346:	463b      	mov	r3, r7
 8002348:	4619      	mov	r1, r3
 800234a:	483e      	ldr	r0, [pc, #248]	; (8002444 <MX_ADC1_Init+0x224>)
 800234c:	f001 f828 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8002356:	f000 fbdd 	bl	8002b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800235a:	2307      	movs	r3, #7
 800235c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800235e:	2308      	movs	r3, #8
 8002360:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002362:	463b      	mov	r3, r7
 8002364:	4619      	mov	r1, r3
 8002366:	4837      	ldr	r0, [pc, #220]	; (8002444 <MX_ADC1_Init+0x224>)
 8002368:	f001 f81a 	bl	80033a0 <HAL_ADC_ConfigChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8002372:	f000 fbcf 	bl	8002b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002376:	2308      	movs	r3, #8
 8002378:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800237a:	2309      	movs	r3, #9
 800237c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800237e:	463b      	mov	r3, r7
 8002380:	4619      	mov	r1, r3
 8002382:	4830      	ldr	r0, [pc, #192]	; (8002444 <MX_ADC1_Init+0x224>)
 8002384:	f001 f80c 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 800238e:	f000 fbc1 	bl	8002b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002392:	2309      	movs	r3, #9
 8002394:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002396:	230a      	movs	r3, #10
 8002398:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800239a:	463b      	mov	r3, r7
 800239c:	4619      	mov	r1, r3
 800239e:	4829      	ldr	r0, [pc, #164]	; (8002444 <MX_ADC1_Init+0x224>)
 80023a0:	f000 fffe 	bl	80033a0 <HAL_ADC_ConfigChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80023aa:	f000 fbb3 	bl	8002b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80023ae:	230a      	movs	r3, #10
 80023b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80023b2:	230b      	movs	r3, #11
 80023b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023b6:	463b      	mov	r3, r7
 80023b8:	4619      	mov	r1, r3
 80023ba:	4822      	ldr	r0, [pc, #136]	; (8002444 <MX_ADC1_Init+0x224>)
 80023bc:	f000 fff0 	bl	80033a0 <HAL_ADC_ConfigChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80023c6:	f000 fba5 	bl	8002b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80023ca:	230b      	movs	r3, #11
 80023cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80023ce:	230c      	movs	r3, #12
 80023d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023d2:	463b      	mov	r3, r7
 80023d4:	4619      	mov	r1, r3
 80023d6:	481b      	ldr	r0, [pc, #108]	; (8002444 <MX_ADC1_Init+0x224>)
 80023d8:	f000 ffe2 	bl	80033a0 <HAL_ADC_ConfigChannel>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 80023e2:	f000 fb97 	bl	8002b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80023e6:	230c      	movs	r3, #12
 80023e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80023ea:	230d      	movs	r3, #13
 80023ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023ee:	463b      	mov	r3, r7
 80023f0:	4619      	mov	r1, r3
 80023f2:	4814      	ldr	r0, [pc, #80]	; (8002444 <MX_ADC1_Init+0x224>)
 80023f4:	f000 ffd4 	bl	80033a0 <HAL_ADC_ConfigChannel>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 80023fe:	f000 fb89 	bl	8002b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002402:	230d      	movs	r3, #13
 8002404:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8002406:	230e      	movs	r3, #14
 8002408:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800240a:	463b      	mov	r3, r7
 800240c:	4619      	mov	r1, r3
 800240e:	480d      	ldr	r0, [pc, #52]	; (8002444 <MX_ADC1_Init+0x224>)
 8002410:	f000 ffc6 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_ADC1_Init+0x1fe>
  {
    Error_Handler();
 800241a:	f000 fb7b 	bl	8002b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800241e:	230e      	movs	r3, #14
 8002420:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8002422:	230f      	movs	r3, #15
 8002424:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002426:	463b      	mov	r3, r7
 8002428:	4619      	mov	r1, r3
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <MX_ADC1_Init+0x224>)
 800242c:	f000 ffb8 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_ADC1_Init+0x21a>
  {
    Error_Handler();
 8002436:	f000 fb6d 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200099e4 	.word	0x200099e4
 8002448:	40012000 	.word	0x40012000

0800244c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <MX_I2C1_Init+0x50>)
 8002452:	4a13      	ldr	r2, [pc, #76]	; (80024a0 <MX_I2C1_Init+0x54>)
 8002454:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_I2C1_Init+0x50>)
 8002458:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <MX_I2C1_Init+0x58>)
 800245a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <MX_I2C1_Init+0x50>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_I2C1_Init+0x50>)
 8002464:	2200      	movs	r2, #0
 8002466:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <MX_I2C1_Init+0x50>)
 800246a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800246e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <MX_I2C1_Init+0x50>)
 8002472:	2200      	movs	r2, #0
 8002474:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <MX_I2C1_Init+0x50>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <MX_I2C1_Init+0x50>)
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_I2C1_Init+0x50>)
 8002484:	2200      	movs	r2, #0
 8002486:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002488:	4804      	ldr	r0, [pc, #16]	; (800249c <MX_I2C1_Init+0x50>)
 800248a:	f002 f849 	bl	8004520 <HAL_I2C_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002494:	f000 fb3e 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20009a8c 	.word	0x20009a8c
 80024a0:	40005400 	.word	0x40005400
 80024a4:	00061a80 	.word	0x00061a80

080024a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <MX_I2C2_Init+0x50>)
 80024ae:	4a13      	ldr	r2, [pc, #76]	; (80024fc <MX_I2C2_Init+0x54>)
 80024b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <MX_I2C2_Init+0x50>)
 80024b4:	4a12      	ldr	r2, [pc, #72]	; (8002500 <MX_I2C2_Init+0x58>)
 80024b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <MX_I2C2_Init+0x50>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <MX_I2C2_Init+0x50>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <MX_I2C2_Init+0x50>)
 80024c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <MX_I2C2_Init+0x50>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <MX_I2C2_Init+0x50>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024d8:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <MX_I2C2_Init+0x50>)
 80024da:	2200      	movs	r2, #0
 80024dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <MX_I2C2_Init+0x50>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024e4:	4804      	ldr	r0, [pc, #16]	; (80024f8 <MX_I2C2_Init+0x50>)
 80024e6:	f002 f81b 	bl	8004520 <HAL_I2C_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80024f0:	f000 fb10 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20009ae0 	.word	0x20009ae0
 80024fc:	40005800 	.word	0x40005800
 8002500:	00061a80 	.word	0x00061a80

08002504 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <MX_I2C3_Init+0x50>)
 800250a:	4a13      	ldr	r2, [pc, #76]	; (8002558 <MX_I2C3_Init+0x54>)
 800250c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <MX_I2C3_Init+0x50>)
 8002510:	4a12      	ldr	r2, [pc, #72]	; (800255c <MX_I2C3_Init+0x58>)
 8002512:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <MX_I2C3_Init+0x50>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <MX_I2C3_Init+0x50>)
 800251c:	2200      	movs	r2, #0
 800251e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <MX_I2C3_Init+0x50>)
 8002522:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002526:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <MX_I2C3_Init+0x50>)
 800252a:	2200      	movs	r2, #0
 800252c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <MX_I2C3_Init+0x50>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002534:	4b07      	ldr	r3, [pc, #28]	; (8002554 <MX_I2C3_Init+0x50>)
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MX_I2C3_Init+0x50>)
 800253c:	2200      	movs	r2, #0
 800253e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002540:	4804      	ldr	r0, [pc, #16]	; (8002554 <MX_I2C3_Init+0x50>)
 8002542:	f001 ffed 	bl	8004520 <HAL_I2C_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800254c:	f000 fae2 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20009b34 	.word	0x20009b34
 8002558:	40005c00 	.word	0x40005c00
 800255c:	000186a0 	.word	0x000186a0

08002560 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002566:	f107 0308 	add.w	r3, r7, #8
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002574:	463b      	mov	r3, r7
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800257c:	4b1e      	ldr	r3, [pc, #120]	; (80025f8 <MX_TIM2_Init+0x98>)
 800257e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002582:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8002584:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <MX_TIM2_Init+0x98>)
 8002586:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800258a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258c:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <MX_TIM2_Init+0x98>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <MX_TIM2_Init+0x98>)
 8002594:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002598:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259a:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <MX_TIM2_Init+0x98>)
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a0:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <MX_TIM2_Init+0x98>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025a6:	4814      	ldr	r0, [pc, #80]	; (80025f8 <MX_TIM2_Init+0x98>)
 80025a8:	f003 f85a 	bl	8005660 <HAL_TIM_Base_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80025b2:	f000 faaf 	bl	8002b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025bc:	f107 0308 	add.w	r3, r7, #8
 80025c0:	4619      	mov	r1, r3
 80025c2:	480d      	ldr	r0, [pc, #52]	; (80025f8 <MX_TIM2_Init+0x98>)
 80025c4:	f003 f8f6 	bl	80057b4 <HAL_TIM_ConfigClockSource>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80025ce:	f000 faa1 	bl	8002b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025d2:	2320      	movs	r3, #32
 80025d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025da:	463b      	mov	r3, r7
 80025dc:	4619      	mov	r1, r3
 80025de:	4806      	ldr	r0, [pc, #24]	; (80025f8 <MX_TIM2_Init+0x98>)
 80025e0:	f003 faca 	bl	8005b78 <HAL_TIMEx_MasterConfigSynchronization>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80025ea:	f000 fa93 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025ee:	bf00      	nop
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20009b88 	.word	0x20009b88

080025fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002602:	f107 0308 	add.w	r3, r7, #8
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002610:	463b      	mov	r3, r7
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002618:	4b1c      	ldr	r3, [pc, #112]	; (800268c <MX_TIM4_Init+0x90>)
 800261a:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <MX_TIM4_Init+0x94>)
 800261c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80 - 1;
 800261e:	4b1b      	ldr	r3, [pc, #108]	; (800268c <MX_TIM4_Init+0x90>)
 8002620:	224f      	movs	r2, #79	; 0x4f
 8002622:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <MX_TIM4_Init+0x90>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 123;
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <MX_TIM4_Init+0x90>)
 800262c:	227b      	movs	r2, #123	; 0x7b
 800262e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002630:	4b16      	ldr	r3, [pc, #88]	; (800268c <MX_TIM4_Init+0x90>)
 8002632:	2200      	movs	r2, #0
 8002634:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <MX_TIM4_Init+0x90>)
 8002638:	2200      	movs	r2, #0
 800263a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800263c:	4813      	ldr	r0, [pc, #76]	; (800268c <MX_TIM4_Init+0x90>)
 800263e:	f003 f80f 	bl	8005660 <HAL_TIM_Base_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8002648:	f000 fa64 	bl	8002b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800264c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002650:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002652:	f107 0308 	add.w	r3, r7, #8
 8002656:	4619      	mov	r1, r3
 8002658:	480c      	ldr	r0, [pc, #48]	; (800268c <MX_TIM4_Init+0x90>)
 800265a:	f003 f8ab 	bl	80057b4 <HAL_TIM_ConfigClockSource>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8002664:	f000 fa56 	bl	8002b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002668:	2300      	movs	r3, #0
 800266a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266c:	2300      	movs	r3, #0
 800266e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002670:	463b      	mov	r3, r7
 8002672:	4619      	mov	r1, r3
 8002674:	4805      	ldr	r0, [pc, #20]	; (800268c <MX_TIM4_Init+0x90>)
 8002676:	f003 fa7f 	bl	8005b78 <HAL_TIMEx_MasterConfigSynchronization>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8002680:	f000 fa48 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002684:	bf00      	nop
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20009bd0 	.word	0x20009bd0
 8002690:	40000800 	.word	0x40000800

08002694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <MX_DMA_Init+0x3c>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <MX_DMA_Init+0x3c>)
 80026a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026a8:	6313      	str	r3, [r2, #48]	; 0x30
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <MX_DMA_Init+0x3c>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	2038      	movs	r0, #56	; 0x38
 80026bc:	f001 f9eb 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026c0:	2038      	movs	r0, #56	; 0x38
 80026c2:	f001 fa04 	bl	8003ace <HAL_NVIC_EnableIRQ>

}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	; 0x28
 80026d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	4b46      	ldr	r3, [pc, #280]	; (8002808 <MX_GPIO_Init+0x134>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a45      	ldr	r2, [pc, #276]	; (8002808 <MX_GPIO_Init+0x134>)
 80026f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b43      	ldr	r3, [pc, #268]	; (8002808 <MX_GPIO_Init+0x134>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b3f      	ldr	r3, [pc, #252]	; (8002808 <MX_GPIO_Init+0x134>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a3e      	ldr	r2, [pc, #248]	; (8002808 <MX_GPIO_Init+0x134>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b3c      	ldr	r3, [pc, #240]	; (8002808 <MX_GPIO_Init+0x134>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	4b38      	ldr	r3, [pc, #224]	; (8002808 <MX_GPIO_Init+0x134>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a37      	ldr	r2, [pc, #220]	; (8002808 <MX_GPIO_Init+0x134>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b35      	ldr	r3, [pc, #212]	; (8002808 <MX_GPIO_Init+0x134>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	4b31      	ldr	r3, [pc, #196]	; (8002808 <MX_GPIO_Init+0x134>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a30      	ldr	r2, [pc, #192]	; (8002808 <MX_GPIO_Init+0x134>)
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b2e      	ldr	r3, [pc, #184]	; (8002808 <MX_GPIO_Init+0x134>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRST_DSP_GPIO_Port, nRST_DSP_Pin, GPIO_PIN_SET);
 800275a:	2201      	movs	r2, #1
 800275c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002760:	482a      	ldr	r0, [pc, #168]	; (800280c <MX_GPIO_Init+0x138>)
 8002762:	f001 fec3 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_SCK_GPIO_Port, EN_SCK_Pin, GPIO_PIN_RESET);
 8002766:	2200      	movs	r2, #0
 8002768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800276c:	4827      	ldr	r0, [pc, #156]	; (800280c <MX_GPIO_Init+0x138>)
 800276e:	f001 febd 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSEL_Pin|SR_Pin|FS2_Pin|FS1_Pin, GPIO_PIN_RESET);
 8002772:	2200      	movs	r2, #0
 8002774:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8002778:	4825      	ldr	r0, [pc, #148]	; (8002810 <MX_GPIO_Init+0x13c>)
 800277a:	f001 feb7 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO0_GPIO_Port, GPIO0_Pin, GPIO_PIN_RESET);
 800277e:	2200      	movs	r2, #0
 8002780:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002784:	4823      	ldr	r0, [pc, #140]	; (8002814 <MX_GPIO_Init+0x140>)
 8002786:	f001 feb1 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : nRST_DSP_Pin EN_SCK_Pin */
  GPIO_InitStruct.Pin = nRST_DSP_Pin|EN_SCK_Pin;
 800278a:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800278e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002790:	2311      	movs	r3, #17
 8002792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002794:	2301      	movs	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002798:	2302      	movs	r3, #2
 800279a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4619      	mov	r1, r3
 80027a2:	481a      	ldr	r0, [pc, #104]	; (800280c <MX_GPIO_Init+0x138>)
 80027a4:	f001 fd1e 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSEL_Pin SR_Pin FS2_Pin FS1_Pin */
  GPIO_InitStruct.Pin = CSEL_Pin|SR_Pin|FS2_Pin|FS1_Pin;
 80027a8:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80027ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ae:	2301      	movs	r3, #1
 80027b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027b2:	2301      	movs	r3, #1
 80027b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027b6:	2302      	movs	r3, #2
 80027b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	4813      	ldr	r0, [pc, #76]	; (8002810 <MX_GPIO_Init+0x13c>)
 80027c2:	f001 fd0f 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO0_Pin */
  GPIO_InitStruct.Pin = GPIO0_Pin;
 80027c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027cc:	2301      	movs	r3, #1
 80027ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d4:	2300      	movs	r3, #0
 80027d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO0_GPIO_Port, &GPIO_InitStruct);
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	4619      	mov	r1, r3
 80027de:	480d      	ldr	r0, [pc, #52]	; (8002814 <MX_GPIO_Init+0x140>)
 80027e0:	f001 fd00 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin;
 80027e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ee:	2301      	movs	r3, #1
 80027f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO1_GPIO_Port, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	4806      	ldr	r0, [pc, #24]	; (8002814 <MX_GPIO_Init+0x140>)
 80027fa:	f001 fcf3 	bl	80041e4 <HAL_GPIO_Init>

}
 80027fe:	bf00      	nop
 8002800:	3728      	adds	r7, #40	; 0x28
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800
 800280c:	40020400 	.word	0x40020400
 8002810:	40020000 	.word	0x40020000
 8002814:	40020800 	.word	0x40020800

08002818 <SIGMA_WRITE_REGISTER_BLOCK>:

/* USER CODE BEGIN 4 */
void SIGMA_WRITE_REGISTER_BLOCK(uint16_t devAddress, uint16_t address, uint16_t length, uint8_t *pData)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af04      	add	r7, sp, #16
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	4603      	mov	r3, r0
 8002822:	81fb      	strh	r3, [r7, #14]
 8002824:	460b      	mov	r3, r1
 8002826:	81bb      	strh	r3, [r7, #12]
 8002828:	4613      	mov	r3, r2
 800282a:	817b      	strh	r3, [r7, #10]
	stat = HAL_I2C_Mem_Write(&hi2c1, devAddress, address, 2, pData, length, 1000);
 800282c:	89ba      	ldrh	r2, [r7, #12]
 800282e:	89f9      	ldrh	r1, [r7, #14]
 8002830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002834:	9302      	str	r3, [sp, #8]
 8002836:	897b      	ldrh	r3, [r7, #10]
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2302      	movs	r3, #2
 8002840:	4805      	ldr	r0, [pc, #20]	; (8002858 <SIGMA_WRITE_REGISTER_BLOCK+0x40>)
 8002842:	f001 ffb1 	bl	80047a8 <HAL_I2C_Mem_Write>
 8002846:	4603      	mov	r3, r0
 8002848:	461a      	mov	r2, r3
 800284a:	4b04      	ldr	r3, [pc, #16]	; (800285c <SIGMA_WRITE_REGISTER_BLOCK+0x44>)
 800284c:	701a      	strb	r2, [r3, #0]
}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20009a8c 	.word	0x20009a8c
 800285c:	20009c18 	.word	0x20009c18

08002860 <SIGMA_WRITE_DELAY>:

void SIGMA_WRITE_DELAY(uint16_t devAddress, uint16_t length, uint8_t *pData)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	603a      	str	r2, [r7, #0]
 800286a:	80fb      	strh	r3, [r7, #6]
 800286c:	460b      	mov	r3, r1
 800286e:	80bb      	strh	r3, [r7, #4]
	HAL_Delay(11);
 8002870:	200b      	movs	r0, #11
 8002872:	f000 fc29 	bl	80030c8 <HAL_Delay>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
	uint32_t j = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]
	uint32_t k = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]


	for(k=VOL_ARRAY; k<ADC_POT; k++) // For volume, loud low, loud high, loud general
 8002894:	230b      	movs	r3, #11
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	e080      	b.n	800299c <HAL_ADC_ConvCpltCallback+0x11c>
	{
		for(i=0; i<30; i++)
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	e077      	b.n	8002990 <HAL_ADC_ConvCpltCallback+0x110>
		{
			if((i == 0) && (value[k] < (linear_in_table[i+1])-15))
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d11f      	bne.n	80028e6 <HAL_ADC_ConvCpltCallback+0x66>
 80028a6:	4a88      	ldr	r2, [pc, #544]	; (8002ac8 <HAL_ADC_ConvCpltCallback+0x248>)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	3201      	adds	r2, #1
 80028b2:	4986      	ldr	r1, [pc, #536]	; (8002acc <HAL_ADC_ConvCpltCallback+0x24c>)
 80028b4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80028b8:	3a0f      	subs	r2, #15
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d213      	bcs.n	80028e6 <HAL_ADC_ConvCpltCallback+0x66>
			{
				if(pote[k] != i)
 80028be:	4a84      	ldr	r2, [pc, #528]	; (8002ad0 <HAL_ADC_ConvCpltCallback+0x250>)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028c6:	461a      	mov	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d05d      	beq.n	800298a <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	b299      	uxth	r1, r3
 80028d2:	4a7f      	ldr	r2, [pc, #508]	; (8002ad0 <HAL_ADC_ConvCpltCallback+0x250>)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 80028da:	4a7e      	ldr	r2, [pc, #504]	; (8002ad4 <HAL_ADC_ConvCpltCallback+0x254>)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2101      	movs	r1, #1
 80028e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[k] != i)
 80028e4:	e051      	b.n	800298a <HAL_ADC_ConvCpltCallback+0x10a>
				}
			}
			else if((i > 0) && (i < 29) && (value[k] > (linear_in_table[i]+15)) && (value[k] < (linear_in_table[i+1])-15))
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d02d      	beq.n	8002948 <HAL_ADC_ConvCpltCallback+0xc8>
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2b1c      	cmp	r3, #28
 80028f0:	d82a      	bhi.n	8002948 <HAL_ADC_ConvCpltCallback+0xc8>
 80028f2:	4a75      	ldr	r2, [pc, #468]	; (8002ac8 <HAL_ADC_ConvCpltCallback+0x248>)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fa:	4974      	ldr	r1, [pc, #464]	; (8002acc <HAL_ADC_ConvCpltCallback+0x24c>)
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002902:	320f      	adds	r2, #15
 8002904:	4293      	cmp	r3, r2
 8002906:	d91f      	bls.n	8002948 <HAL_ADC_ConvCpltCallback+0xc8>
 8002908:	4a6f      	ldr	r2, [pc, #444]	; (8002ac8 <HAL_ADC_ConvCpltCallback+0x248>)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	3201      	adds	r2, #1
 8002914:	496d      	ldr	r1, [pc, #436]	; (8002acc <HAL_ADC_ConvCpltCallback+0x24c>)
 8002916:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800291a:	3a0f      	subs	r2, #15
 800291c:	4293      	cmp	r3, r2
 800291e:	d213      	bcs.n	8002948 <HAL_ADC_ConvCpltCallback+0xc8>
			{
				if(pote[k] != i)
 8002920:	4a6b      	ldr	r2, [pc, #428]	; (8002ad0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002928:	461a      	mov	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	4293      	cmp	r3, r2
 800292e:	d02c      	beq.n	800298a <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	b299      	uxth	r1, r3
 8002934:	4a66      	ldr	r2, [pc, #408]	; (8002ad0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 800293c:	4a65      	ldr	r2, [pc, #404]	; (8002ad4 <HAL_ADC_ConvCpltCallback+0x254>)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2101      	movs	r1, #1
 8002942:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[k] != i)
 8002946:	e020      	b.n	800298a <HAL_ADC_ConvCpltCallback+0x10a>
				}
			}
			else if((i == 29) && (value[k] > (linear_in_table[i]+15)))
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2b1d      	cmp	r3, #29
 800294c:	d11d      	bne.n	800298a <HAL_ADC_ConvCpltCallback+0x10a>
 800294e:	4a5e      	ldr	r2, [pc, #376]	; (8002ac8 <HAL_ADC_ConvCpltCallback+0x248>)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002956:	495d      	ldr	r1, [pc, #372]	; (8002acc <HAL_ADC_ConvCpltCallback+0x24c>)
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800295e:	320f      	adds	r2, #15
 8002960:	4293      	cmp	r3, r2
 8002962:	d912      	bls.n	800298a <HAL_ADC_ConvCpltCallback+0x10a>
			{
				if(pote[k] != i)
 8002964:	4a5a      	ldr	r2, [pc, #360]	; (8002ad0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800296c:	461a      	mov	r2, r3
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	4293      	cmp	r3, r2
 8002972:	d00a      	beq.n	800298a <HAL_ADC_ConvCpltCallback+0x10a>
				{
					pote[k] = i;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	b299      	uxth	r1, r3
 8002978:	4a55      	ldr	r2, [pc, #340]	; (8002ad0 <HAL_ADC_ConvCpltCallback+0x250>)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[k] = 1;
 8002980:	4a54      	ldr	r2, [pc, #336]	; (8002ad4 <HAL_ADC_ConvCpltCallback+0x254>)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2101      	movs	r1, #1
 8002986:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<30; i++)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3301      	adds	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b1d      	cmp	r3, #29
 8002994:	d984      	bls.n	80028a0 <HAL_ADC_ConvCpltCallback+0x20>
	for(k=VOL_ARRAY; k<ADC_POT; k++) // For volume, loud low, loud high, loud general
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3301      	adds	r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b0e      	cmp	r3, #14
 80029a0:	f67f af7b 	bls.w	800289a <HAL_ADC_ConvCpltCallback+0x1a>
			}
		}
	}


	for(j=0; j<(VOL_ARRAY); j++) // For filter 32Hz - 16KHz + Subwoofer
 80029a4:	2300      	movs	r3, #0
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	e080      	b.n	8002aac <HAL_ADC_ConvCpltCallback+0x22c>
	{
		for(i=0; i<30; i++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	e077      	b.n	8002aa0 <HAL_ADC_ConvCpltCallback+0x220>
		{
			if((i == 0) && (value[j] < (log_in_table[i+1])-15))
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d11f      	bne.n	80029f6 <HAL_ADC_ConvCpltCallback+0x176>
 80029b6:	4a44      	ldr	r2, [pc, #272]	; (8002ac8 <HAL_ADC_ConvCpltCallback+0x248>)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	3201      	adds	r2, #1
 80029c2:	4945      	ldr	r1, [pc, #276]	; (8002ad8 <HAL_ADC_ConvCpltCallback+0x258>)
 80029c4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80029c8:	3a0f      	subs	r2, #15
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d213      	bcs.n	80029f6 <HAL_ADC_ConvCpltCallback+0x176>
			{
				if(pote[j] != i)
 80029ce:	4a40      	ldr	r2, [pc, #256]	; (8002ad0 <HAL_ADC_ConvCpltCallback+0x250>)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029d6:	461a      	mov	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	4293      	cmp	r3, r2
 80029dc:	d05d      	beq.n	8002a9a <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	b299      	uxth	r1, r3
 80029e2:	4a3b      	ldr	r2, [pc, #236]	; (8002ad0 <HAL_ADC_ConvCpltCallback+0x250>)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 80029ea:	4a3a      	ldr	r2, [pc, #232]	; (8002ad4 <HAL_ADC_ConvCpltCallback+0x254>)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2101      	movs	r1, #1
 80029f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[j] != i)
 80029f4:	e051      	b.n	8002a9a <HAL_ADC_ConvCpltCallback+0x21a>
				}
			}
			else if((i > 0) && (i < 29) && (value[j] > (log_in_table[i]+15)) && (value[j] < (log_in_table[i+1])-15))
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d02d      	beq.n	8002a58 <HAL_ADC_ConvCpltCallback+0x1d8>
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2b1c      	cmp	r3, #28
 8002a00:	d82a      	bhi.n	8002a58 <HAL_ADC_ConvCpltCallback+0x1d8>
 8002a02:	4a31      	ldr	r2, [pc, #196]	; (8002ac8 <HAL_ADC_ConvCpltCallback+0x248>)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0a:	4933      	ldr	r1, [pc, #204]	; (8002ad8 <HAL_ADC_ConvCpltCallback+0x258>)
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002a12:	320f      	adds	r2, #15
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d91f      	bls.n	8002a58 <HAL_ADC_ConvCpltCallback+0x1d8>
 8002a18:	4a2b      	ldr	r2, [pc, #172]	; (8002ac8 <HAL_ADC_ConvCpltCallback+0x248>)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	3201      	adds	r2, #1
 8002a24:	492c      	ldr	r1, [pc, #176]	; (8002ad8 <HAL_ADC_ConvCpltCallback+0x258>)
 8002a26:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002a2a:	3a0f      	subs	r2, #15
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d213      	bcs.n	8002a58 <HAL_ADC_ConvCpltCallback+0x1d8>
			{
				if(pote[j] != i)
 8002a30:	4a27      	ldr	r2, [pc, #156]	; (8002ad0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d02c      	beq.n	8002a9a <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	b299      	uxth	r1, r3
 8002a44:	4a22      	ldr	r2, [pc, #136]	; (8002ad0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 8002a4c:	4a21      	ldr	r2, [pc, #132]	; (8002ad4 <HAL_ADC_ConvCpltCallback+0x254>)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2101      	movs	r1, #1
 8002a52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(pote[j] != i)
 8002a56:	e020      	b.n	8002a9a <HAL_ADC_ConvCpltCallback+0x21a>
				}
			}
			else if((i == 29) && (value[j] > (log_in_table[i]+15)))
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b1d      	cmp	r3, #29
 8002a5c:	d11d      	bne.n	8002a9a <HAL_ADC_ConvCpltCallback+0x21a>
 8002a5e:	4a1a      	ldr	r2, [pc, #104]	; (8002ac8 <HAL_ADC_ConvCpltCallback+0x248>)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a66:	491c      	ldr	r1, [pc, #112]	; (8002ad8 <HAL_ADC_ConvCpltCallback+0x258>)
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002a6e:	320f      	adds	r2, #15
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d912      	bls.n	8002a9a <HAL_ADC_ConvCpltCallback+0x21a>
			{
				if(pote[j] != i)
 8002a74:	4a16      	ldr	r2, [pc, #88]	; (8002ad0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00a      	beq.n	8002a9a <HAL_ADC_ConvCpltCallback+0x21a>
				{
					pote[j] = i;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	b299      	uxth	r1, r3
 8002a88:	4a11      	ldr	r2, [pc, #68]	; (8002ad0 <HAL_ADC_ConvCpltCallback+0x250>)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flag[j] = 1;
 8002a90:	4a10      	ldr	r2, [pc, #64]	; (8002ad4 <HAL_ADC_ConvCpltCallback+0x254>)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2101      	movs	r1, #1
 8002a96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<30; i++)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2b1d      	cmp	r3, #29
 8002aa4:	d984      	bls.n	80029b0 <HAL_ADC_ConvCpltCallback+0x130>
	for(j=0; j<(VOL_ARRAY); j++) // For filter 32Hz - 16KHz + Subwoofer
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b0a      	cmp	r3, #10
 8002ab0:	f67f af7b 	bls.w	80029aa <HAL_ADC_ConvCpltCallback+0x12a>
			}
		}

	}

	update = 1;
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_ADC_ConvCpltCallback+0x25c>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
}
 8002aba:	bf00      	nop
 8002abc:	371c      	adds	r7, #28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20009c20 	.word	0x20009c20
 8002acc:	20009cb8 	.word	0x20009cb8
 8002ad0:	20009c5c 	.word	0x20009c5c
 8002ad4:	20009cf4 	.word	0x20009cf4
 8002ad8:	20009c7c 	.word	0x20009c7c
 8002adc:	20009d12 	.word	0x20009d12

08002ae0 <delay_us>:

void delay_us(uint16_t us)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	80fb      	strh	r3, [r7, #6]
	htim4.Instance->CNT = 0;
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <delay_us+0x30>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2200      	movs	r2, #0
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24
	while((htim4.Instance->CNT) < us);
 8002af2:	bf00      	nop
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <delay_us+0x30>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d3f9      	bcc.n	8002af4 <delay_us+0x14>
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20009bd0 	.word	0x20009bd0

08002b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b18:	b672      	cpsid	i
}
 8002b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <Error_Handler+0x8>
	...

08002b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <HAL_MspInit+0x4c>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	4a0f      	ldr	r2, [pc, #60]	; (8002b6c <HAL_MspInit+0x4c>)
 8002b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b34:	6453      	str	r3, [r2, #68]	; 0x44
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <HAL_MspInit+0x4c>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3e:	607b      	str	r3, [r7, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	603b      	str	r3, [r7, #0]
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_MspInit+0x4c>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <HAL_MspInit+0x4c>)
 8002b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_MspInit+0x4c>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800

08002b70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08c      	sub	sp, #48	; 0x30
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 031c 	add.w	r3, r7, #28
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a49      	ldr	r2, [pc, #292]	; (8002cb4 <HAL_ADC_MspInit+0x144>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	f040 808c 	bne.w	8002cac <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b94:	2300      	movs	r3, #0
 8002b96:	61bb      	str	r3, [r7, #24]
 8002b98:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	4a46      	ldr	r2, [pc, #280]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba4:	4b44      	ldr	r3, [pc, #272]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	4a3f      	ldr	r2, [pc, #252]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bba:	f043 0304 	orr.w	r3, r3, #4
 8002bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc0:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bcc:	2300      	movs	r3, #0
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	4a38      	ldr	r2, [pc, #224]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6313      	str	r3, [r2, #48]	; 0x30
 8002bdc:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	4a31      	ldr	r2, [pc, #196]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bf2:	f043 0302 	orr.w	r3, r3, #2
 8002bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002c04:	231f      	movs	r3, #31
 8002c06:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c10:	f107 031c 	add.w	r3, r7, #28
 8002c14:	4619      	mov	r1, r3
 8002c16:	4829      	ldr	r0, [pc, #164]	; (8002cbc <HAL_ADC_MspInit+0x14c>)
 8002c18:	f001 fae4 	bl	80041e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002c1c:	23ff      	movs	r3, #255	; 0xff
 8002c1e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c20:	2303      	movs	r3, #3
 8002c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c28:	f107 031c 	add.w	r3, r7, #28
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4824      	ldr	r0, [pc, #144]	; (8002cc0 <HAL_ADC_MspInit+0x150>)
 8002c30:	f001 fad8 	bl	80041e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c34:	2303      	movs	r3, #3
 8002c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c40:	f107 031c 	add.w	r3, r7, #28
 8002c44:	4619      	mov	r1, r3
 8002c46:	481f      	ldr	r0, [pc, #124]	; (8002cc4 <HAL_ADC_MspInit+0x154>)
 8002c48:	f001 facc 	bl	80041e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	; (8002ccc <HAL_ADC_MspInit+0x15c>)
 8002c50:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c64:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c6a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c6c:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c72:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c74:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c7a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c82:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c84:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c90:	480d      	ldr	r0, [pc, #52]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c92:	f000 ff37 	bl	8003b04 <HAL_DMA_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002c9c:	f7ff ff3a 	bl	8002b14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a09      	ldr	r2, [pc, #36]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ca6:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cac:	bf00      	nop
 8002cae:	3730      	adds	r7, #48	; 0x30
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40012000 	.word	0x40012000
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40020800 	.word	0x40020800
 8002cc0:	40020000 	.word	0x40020000
 8002cc4:	40020400 	.word	0x40020400
 8002cc8:	20009a2c 	.word	0x20009a2c
 8002ccc:	40026410 	.word	0x40026410

08002cd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08e      	sub	sp, #56	; 0x38
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a63      	ldr	r2, [pc, #396]	; (8002e7c <HAL_I2C_MspInit+0x1ac>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d12c      	bne.n	8002d4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	623b      	str	r3, [r7, #32]
 8002cf6:	4b62      	ldr	r3, [pc, #392]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a61      	ldr	r2, [pc, #388]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b5f      	ldr	r3, [pc, #380]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	623b      	str	r3, [r7, #32]
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d0e:	23c0      	movs	r3, #192	; 0xc0
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d12:	2312      	movs	r3, #18
 8002d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d1e:	2304      	movs	r3, #4
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d26:	4619      	mov	r1, r3
 8002d28:	4856      	ldr	r0, [pc, #344]	; (8002e84 <HAL_I2C_MspInit+0x1b4>)
 8002d2a:	f001 fa5b 	bl	80041e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	4a52      	ldr	r2, [pc, #328]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002d38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3e:	4b50      	ldr	r3, [pc, #320]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002d4a:	e093      	b.n	8002e74 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a4d      	ldr	r2, [pc, #308]	; (8002e88 <HAL_I2C_MspInit+0x1b8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d13d      	bne.n	8002dd2 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	4b49      	ldr	r3, [pc, #292]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	4a48      	ldr	r2, [pc, #288]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	6313      	str	r3, [r2, #48]	; 0x30
 8002d66:	4b46      	ldr	r3, [pc, #280]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d78:	2312      	movs	r3, #18
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	2303      	movs	r3, #3
 8002d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d84:	2304      	movs	r3, #4
 8002d86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	483d      	ldr	r0, [pc, #244]	; (8002e84 <HAL_I2C_MspInit+0x1b4>)
 8002d90:	f001 fa28 	bl	80041e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d94:	2308      	movs	r3, #8
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d98:	2312      	movs	r3, #18
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da0:	2303      	movs	r3, #3
 8002da2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002da4:	2309      	movs	r3, #9
 8002da6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dac:	4619      	mov	r1, r3
 8002dae:	4835      	ldr	r0, [pc, #212]	; (8002e84 <HAL_I2C_MspInit+0x1b4>)
 8002db0:	f001 fa18 	bl	80041e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	4a30      	ldr	r2, [pc, #192]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002dbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc4:	4b2e      	ldr	r3, [pc, #184]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	697b      	ldr	r3, [r7, #20]
}
 8002dd0:	e050      	b.n	8002e74 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2d      	ldr	r2, [pc, #180]	; (8002e8c <HAL_I2C_MspInit+0x1bc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d14b      	bne.n	8002e74 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	4a26      	ldr	r2, [pc, #152]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002de6:	f043 0304 	orr.w	r3, r3, #4
 8002dea:	6313      	str	r3, [r2, #48]	; 0x30
 8002dec:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	4a1f      	ldr	r2, [pc, #124]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6313      	str	r3, [r2, #48]	; 0x30
 8002e08:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e1a:	2312      	movs	r3, #18
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e22:	2303      	movs	r3, #3
 8002e24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e26:	2304      	movs	r3, #4
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4817      	ldr	r0, [pc, #92]	; (8002e90 <HAL_I2C_MspInit+0x1c0>)
 8002e32:	f001 f9d7 	bl	80041e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e3c:	2312      	movs	r3, #18
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e44:	2303      	movs	r3, #3
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e48:	2304      	movs	r3, #4
 8002e4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e50:	4619      	mov	r1, r3
 8002e52:	4810      	ldr	r0, [pc, #64]	; (8002e94 <HAL_I2C_MspInit+0x1c4>)
 8002e54:	f001 f9c6 	bl	80041e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002e62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e66:	6413      	str	r3, [r2, #64]	; 0x40
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_I2C_MspInit+0x1b0>)
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	68bb      	ldr	r3, [r7, #8]
}
 8002e74:	bf00      	nop
 8002e76:	3738      	adds	r7, #56	; 0x38
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40005400 	.word	0x40005400
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020400 	.word	0x40020400
 8002e88:	40005800 	.word	0x40005800
 8002e8c:	40005c00 	.word	0x40005c00
 8002e90:	40020800 	.word	0x40020800
 8002e94:	40020000 	.word	0x40020000

08002e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea8:	d10e      	bne.n	8002ec8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b13      	ldr	r3, [pc, #76]	; (8002efc <HAL_TIM_Base_MspInit+0x64>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	4a12      	ldr	r2, [pc, #72]	; (8002efc <HAL_TIM_Base_MspInit+0x64>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_TIM_Base_MspInit+0x64>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ec6:	e012      	b.n	8002eee <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a0c      	ldr	r2, [pc, #48]	; (8002f00 <HAL_TIM_Base_MspInit+0x68>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d10d      	bne.n	8002eee <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <HAL_TIM_Base_MspInit+0x64>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4a08      	ldr	r2, [pc, #32]	; (8002efc <HAL_TIM_Base_MspInit+0x64>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_TIM_Base_MspInit+0x64>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40000800 	.word	0x40000800

08002f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f08:	e7fe      	b.n	8002f08 <NMI_Handler+0x4>

08002f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f0e:	e7fe      	b.n	8002f0e <HardFault_Handler+0x4>

08002f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f14:	e7fe      	b.n	8002f14 <MemManage_Handler+0x4>

08002f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f16:	b480      	push	{r7}
 8002f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f1a:	e7fe      	b.n	8002f1a <BusFault_Handler+0x4>

08002f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f20:	e7fe      	b.n	8002f20 <UsageFault_Handler+0x4>

08002f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f50:	f000 f89a 	bl	8003088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f54:	bf00      	nop
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f5c:	4802      	ldr	r0, [pc, #8]	; (8002f68 <DMA2_Stream0_IRQHandler+0x10>)
 8002f5e:	f000 fed7 	bl	8003d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20009a2c 	.word	0x20009a2c

08002f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <SystemInit+0x20>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	4a05      	ldr	r2, [pc, #20]	; (8002f8c <SystemInit+0x20>)
 8002f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f94:	480d      	ldr	r0, [pc, #52]	; (8002fcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f96:	490e      	ldr	r1, [pc, #56]	; (8002fd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f98:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f9c:	e002      	b.n	8002fa4 <LoopCopyDataInit>

08002f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fa2:	3304      	adds	r3, #4

08002fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fa8:	d3f9      	bcc.n	8002f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002faa:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fac:	4c0b      	ldr	r4, [pc, #44]	; (8002fdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fb0:	e001      	b.n	8002fb6 <LoopFillZerobss>

08002fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fb4:	3204      	adds	r2, #4

08002fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fb8:	d3fb      	bcc.n	8002fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fba:	f7ff ffd7 	bl	8002f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fbe:	f002 fe57 	bl	8005c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fc2:	f7fe f993 	bl	80012ec <main>
  bx  lr    
 8002fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fc8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fd0:	200099a4 	.word	0x200099a4
  ldr r2, =_sidata
 8002fd4:	08006220 	.word	0x08006220
  ldr r2, =_sbss
 8002fd8:	200099a4 	.word	0x200099a4
  ldr r4, =_ebss
 8002fdc:	20009e5c 	.word	0x20009e5c

08002fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fe0:	e7fe      	b.n	8002fe0 <ADC_IRQHandler>
	...

08002fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <HAL_Init+0x40>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <HAL_Init+0x40>)
 8002fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_Init+0x40>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <HAL_Init+0x40>)
 8002ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003000:	4b08      	ldr	r3, [pc, #32]	; (8003024 <HAL_Init+0x40>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a07      	ldr	r2, [pc, #28]	; (8003024 <HAL_Init+0x40>)
 8003006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800300c:	2003      	movs	r0, #3
 800300e:	f000 fd37 	bl	8003a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003012:	200f      	movs	r0, #15
 8003014:	f000 f808 	bl	8003028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003018:	f7ff fd82 	bl	8002b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023c00 	.word	0x40023c00

08003028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003030:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_InitTick+0x54>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4b12      	ldr	r3, [pc, #72]	; (8003080 <HAL_InitTick+0x58>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	4619      	mov	r1, r3
 800303a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800303e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fd4f 	bl	8003aea <HAL_SYSTICK_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e00e      	b.n	8003074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b0f      	cmp	r3, #15
 800305a:	d80a      	bhi.n	8003072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800305c:	2200      	movs	r2, #0
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	f04f 30ff 	mov.w	r0, #4294967295
 8003064:	f000 fd17 	bl	8003a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003068:	4a06      	ldr	r2, [pc, #24]	; (8003084 <HAL_InitTick+0x5c>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20009948 	.word	0x20009948
 8003080:	20009950 	.word	0x20009950
 8003084:	2000994c 	.word	0x2000994c

08003088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_IncTick+0x20>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_IncTick+0x24>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4413      	add	r3, r2
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <HAL_IncTick+0x24>)
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20009950 	.word	0x20009950
 80030ac:	20009d20 	.word	0x20009d20

080030b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return uwTick;
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <HAL_GetTick+0x14>)
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	20009d20 	.word	0x20009d20

080030c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d0:	f7ff ffee 	bl	80030b0 <HAL_GetTick>
 80030d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d005      	beq.n	80030ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <HAL_Delay+0x44>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030ee:	bf00      	nop
 80030f0:	f7ff ffde 	bl	80030b0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d8f7      	bhi.n	80030f0 <HAL_Delay+0x28>
  {
  }
}
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20009950 	.word	0x20009950

08003110 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e033      	b.n	800318e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fd1e 	bl	8002b70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b00      	cmp	r3, #0
 800314c:	d118      	bne.n	8003180 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003156:	f023 0302 	bic.w	r3, r3, #2
 800315a:	f043 0202 	orr.w	r2, r3, #2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fa3e 	bl	80035e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	f043 0201 	orr.w	r2, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
 800317e:	e001      	b.n	8003184 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_Start_DMA+0x1e>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e0ce      	b.n	8003354 <HAL_ADC_Start_DMA+0x1bc>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d018      	beq.n	80031fe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031dc:	4b5f      	ldr	r3, [pc, #380]	; (800335c <HAL_ADC_Start_DMA+0x1c4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a5f      	ldr	r2, [pc, #380]	; (8003360 <HAL_ADC_Start_DMA+0x1c8>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	0c9a      	lsrs	r2, r3, #18
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031f0:	e002      	b.n	80031f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f9      	bne.n	80031f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320c:	d107      	bne.n	800321e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800321c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b01      	cmp	r3, #1
 800322a:	f040 8086 	bne.w	800333a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324c:	2b00      	cmp	r3, #0
 800324e:	d007      	beq.n	8003260 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003258:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326c:	d106      	bne.n	800327c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f023 0206 	bic.w	r2, r3, #6
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	645a      	str	r2, [r3, #68]	; 0x44
 800327a:	e002      	b.n	8003282 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800328a:	4b36      	ldr	r3, [pc, #216]	; (8003364 <HAL_ADC_Start_DMA+0x1cc>)
 800328c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	4a35      	ldr	r2, [pc, #212]	; (8003368 <HAL_ADC_Start_DMA+0x1d0>)
 8003294:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	4a34      	ldr	r2, [pc, #208]	; (800336c <HAL_ADC_Start_DMA+0x1d4>)
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	4a33      	ldr	r2, [pc, #204]	; (8003370 <HAL_ADC_Start_DMA+0x1d8>)
 80032a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80032be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	334c      	adds	r3, #76	; 0x4c
 80032da:	4619      	mov	r1, r3
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f000 fcbe 	bl	8003c60 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10f      	bne.n	8003310 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d129      	bne.n	8003352 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	e020      	b.n	8003352 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a17      	ldr	r2, [pc, #92]	; (8003374 <HAL_ADC_Start_DMA+0x1dc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d11b      	bne.n	8003352 <HAL_ADC_Start_DMA+0x1ba>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d114      	bne.n	8003352 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	e00b      	b.n	8003352 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f043 0210 	orr.w	r2, r3, #16
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	f043 0201 	orr.w	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20009948 	.word	0x20009948
 8003360:	431bde83 	.word	0x431bde83
 8003364:	40012300 	.word	0x40012300
 8003368:	080037dd 	.word	0x080037dd
 800336c:	08003897 	.word	0x08003897
 8003370:	080038b3 	.word	0x080038b3
 8003374:	40012000 	.word	0x40012000

08003378 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x1c>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e105      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x228>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b09      	cmp	r3, #9
 80033ca:	d925      	bls.n	8003418 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68d9      	ldr	r1, [r3, #12]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	3b1e      	subs	r3, #30
 80033e2:	2207      	movs	r2, #7
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43da      	mvns	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	400a      	ands	r2, r1
 80033f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68d9      	ldr	r1, [r3, #12]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	4618      	mov	r0, r3
 8003404:	4603      	mov	r3, r0
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4403      	add	r3, r0
 800340a:	3b1e      	subs	r3, #30
 800340c:	409a      	lsls	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	e022      	b.n	800345e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6919      	ldr	r1, [r3, #16]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	4613      	mov	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4413      	add	r3, r2
 800342c:	2207      	movs	r2, #7
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43da      	mvns	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	400a      	ands	r2, r1
 800343a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6919      	ldr	r1, [r3, #16]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	4618      	mov	r0, r3
 800344e:	4603      	mov	r3, r0
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4403      	add	r3, r0
 8003454:	409a      	lsls	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b06      	cmp	r3, #6
 8003464:	d824      	bhi.n	80034b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	3b05      	subs	r3, #5
 8003478:	221f      	movs	r2, #31
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43da      	mvns	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	400a      	ands	r2, r1
 8003486:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	4618      	mov	r0, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	3b05      	subs	r3, #5
 80034a2:	fa00 f203 	lsl.w	r2, r0, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	635a      	str	r2, [r3, #52]	; 0x34
 80034ae:	e04c      	b.n	800354a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	d824      	bhi.n	8003502 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	3b23      	subs	r3, #35	; 0x23
 80034ca:	221f      	movs	r2, #31
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43da      	mvns	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	400a      	ands	r2, r1
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	4618      	mov	r0, r3
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	3b23      	subs	r3, #35	; 0x23
 80034f4:	fa00 f203 	lsl.w	r2, r0, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003500:	e023      	b.n	800354a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	3b41      	subs	r3, #65	; 0x41
 8003514:	221f      	movs	r2, #31
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	400a      	ands	r2, r1
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	4618      	mov	r0, r3
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	3b41      	subs	r3, #65	; 0x41
 800353e:	fa00 f203 	lsl.w	r2, r0, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800354a:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <HAL_ADC_ConfigChannel+0x234>)
 800354c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a21      	ldr	r2, [pc, #132]	; (80035d8 <HAL_ADC_ConfigChannel+0x238>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d109      	bne.n	800356c <HAL_ADC_ConfigChannel+0x1cc>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b12      	cmp	r3, #18
 800355e:	d105      	bne.n	800356c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <HAL_ADC_ConfigChannel+0x238>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d123      	bne.n	80035be <HAL_ADC_ConfigChannel+0x21e>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b10      	cmp	r3, #16
 800357c:	d003      	beq.n	8003586 <HAL_ADC_ConfigChannel+0x1e6>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b11      	cmp	r3, #17
 8003584:	d11b      	bne.n	80035be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b10      	cmp	r3, #16
 8003598:	d111      	bne.n	80035be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <HAL_ADC_ConfigChannel+0x23c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a10      	ldr	r2, [pc, #64]	; (80035e0 <HAL_ADC_ConfigChannel+0x240>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	0c9a      	lsrs	r2, r3, #18
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035b0:	e002      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f9      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40012300 	.word	0x40012300
 80035d8:	40012000 	.word	0x40012000
 80035dc:	20009948 	.word	0x20009948
 80035e0:	431bde83 	.word	0x431bde83

080035e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035ec:	4b79      	ldr	r3, [pc, #484]	; (80037d4 <ADC_Init+0x1f0>)
 80035ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	431a      	orrs	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	021a      	lsls	r2, r3, #8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800363c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800365e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6899      	ldr	r1, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	4a58      	ldr	r2, [pc, #352]	; (80037d8 <ADC_Init+0x1f4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d022      	beq.n	80036c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800368a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6899      	ldr	r1, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6899      	ldr	r1, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	e00f      	b.n	80036e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0202 	bic.w	r2, r2, #2
 80036f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6899      	ldr	r1, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7e1b      	ldrb	r3, [r3, #24]
 80036fc:	005a      	lsls	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01b      	beq.n	8003748 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800371e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800372e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6859      	ldr	r1, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	3b01      	subs	r3, #1
 800373c:	035a      	lsls	r2, r3, #13
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	e007      	b.n	8003758 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003756:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	3b01      	subs	r3, #1
 8003774:	051a      	lsls	r2, r3, #20
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800378c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6899      	ldr	r1, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800379a:	025a      	lsls	r2, r3, #9
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6899      	ldr	r1, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	029a      	lsls	r2, r3, #10
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	40012300 	.word	0x40012300
 80037d8:	0f000001 	.word	0x0f000001

080037dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d13c      	bne.n	8003870 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d12b      	bne.n	8003868 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003814:	2b00      	cmp	r3, #0
 8003816:	d127      	bne.n	8003868 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003822:	2b00      	cmp	r3, #0
 8003824:	d006      	beq.n	8003834 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003830:	2b00      	cmp	r3, #0
 8003832:	d119      	bne.n	8003868 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0220 	bic.w	r2, r2, #32
 8003842:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	f043 0201 	orr.w	r2, r3, #1
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f7ff f809 	bl	8002880 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800386e:	e00e      	b.n	800388e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f7ff fd85 	bl	800338c <HAL_ADC_ErrorCallback>
}
 8003882:	e004      	b.n	800388e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4798      	blx	r3
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f7ff fd67 	bl	8003378 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2240      	movs	r2, #64	; 0x40
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f043 0204 	orr.w	r2, r3, #4
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f7ff fd5a 	bl	800338c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f0:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <__NVIC_SetPriorityGrouping+0x44>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038fc:	4013      	ands	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800390c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003912:	4a04      	ldr	r2, [pc, #16]	; (8003924 <__NVIC_SetPriorityGrouping+0x44>)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	60d3      	str	r3, [r2, #12]
}
 8003918:	bf00      	nop
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800392c:	4b04      	ldr	r3, [pc, #16]	; (8003940 <__NVIC_GetPriorityGrouping+0x18>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	f003 0307 	and.w	r3, r3, #7
}
 8003936:	4618      	mov	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	2b00      	cmp	r3, #0
 8003954:	db0b      	blt.n	800396e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	f003 021f 	and.w	r2, r3, #31
 800395c:	4907      	ldr	r1, [pc, #28]	; (800397c <__NVIC_EnableIRQ+0x38>)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2001      	movs	r0, #1
 8003966:	fa00 f202 	lsl.w	r2, r0, r2
 800396a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	e000e100 	.word	0xe000e100

08003980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	2b00      	cmp	r3, #0
 8003992:	db0a      	blt.n	80039aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	490c      	ldr	r1, [pc, #48]	; (80039cc <__NVIC_SetPriority+0x4c>)
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	440b      	add	r3, r1
 80039a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a8:	e00a      	b.n	80039c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4908      	ldr	r1, [pc, #32]	; (80039d0 <__NVIC_SetPriority+0x50>)
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	3b04      	subs	r3, #4
 80039b8:	0112      	lsls	r2, r2, #4
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	440b      	add	r3, r1
 80039be:	761a      	strb	r2, [r3, #24]
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	e000e100 	.word	0xe000e100
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f1c3 0307 	rsb	r3, r3, #7
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	bf28      	it	cs
 80039f2:	2304      	movcs	r3, #4
 80039f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3304      	adds	r3, #4
 80039fa:	2b06      	cmp	r3, #6
 80039fc:	d902      	bls.n	8003a04 <NVIC_EncodePriority+0x30>
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3b03      	subs	r3, #3
 8003a02:	e000      	b.n	8003a06 <NVIC_EncodePriority+0x32>
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43da      	mvns	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	401a      	ands	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	43d9      	mvns	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	4313      	orrs	r3, r2
         );
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3724      	adds	r7, #36	; 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a4c:	d301      	bcc.n	8003a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e00f      	b.n	8003a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <SysTick_Config+0x40>)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a5a:	210f      	movs	r1, #15
 8003a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a60:	f7ff ff8e 	bl	8003980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <SysTick_Config+0x40>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a6a:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <SysTick_Config+0x40>)
 8003a6c:	2207      	movs	r2, #7
 8003a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	e000e010 	.word	0xe000e010

08003a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff ff29 	bl	80038e0 <__NVIC_SetPriorityGrouping>
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b086      	sub	sp, #24
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa8:	f7ff ff3e 	bl	8003928 <__NVIC_GetPriorityGrouping>
 8003aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	6978      	ldr	r0, [r7, #20]
 8003ab4:	f7ff ff8e 	bl	80039d4 <NVIC_EncodePriority>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff5d 	bl	8003980 <__NVIC_SetPriority>
}
 8003ac6:	bf00      	nop
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff ff31 	bl	8003944 <__NVIC_EnableIRQ>
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff ffa2 	bl	8003a3c <SysTick_Config>
 8003af8:	4603      	mov	r3, r0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b10:	f7ff face 	bl	80030b0 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e099      	b.n	8003c54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b40:	e00f      	b.n	8003b62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b42:	f7ff fab5 	bl	80030b0 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b05      	cmp	r3, #5
 8003b4e:	d908      	bls.n	8003b62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2203      	movs	r2, #3
 8003b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e078      	b.n	8003c54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e8      	bne.n	8003b42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4b38      	ldr	r3, [pc, #224]	; (8003c5c <HAL_DMA_Init+0x158>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d107      	bne.n	8003bcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0307 	bic.w	r3, r3, #7
 8003be2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d117      	bne.n	8003c26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00e      	beq.n	8003c26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fa6f 	bl	80040ec <DMA_CheckFifoParam>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2240      	movs	r2, #64	; 0x40
 8003c18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c22:	2301      	movs	r3, #1
 8003c24:	e016      	b.n	8003c54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fa26 	bl	8004080 <DMA_CalcBaseAndBitshift>
 8003c34:	4603      	mov	r3, r0
 8003c36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3c:	223f      	movs	r2, #63	; 0x3f
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	f010803f 	.word	0xf010803f

08003c60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_DMA_Start_IT+0x26>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e040      	b.n	8003d08 <HAL_DMA_Start_IT+0xa8>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d12f      	bne.n	8003cfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f9b8 	bl	8004024 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb8:	223f      	movs	r2, #63	; 0x3f
 8003cba:	409a      	lsls	r2, r3
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0216 	orr.w	r2, r2, #22
 8003cce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d007      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0208 	orr.w	r2, r2, #8
 8003ce6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e005      	b.n	8003d06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d02:	2302      	movs	r3, #2
 8003d04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d1c:	4b8e      	ldr	r3, [pc, #568]	; (8003f58 <HAL_DMA_IRQHandler+0x248>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a8e      	ldr	r2, [pc, #568]	; (8003f5c <HAL_DMA_IRQHandler+0x24c>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	0a9b      	lsrs	r3, r3, #10
 8003d28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3a:	2208      	movs	r2, #8
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01a      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d013      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0204 	bic.w	r2, r2, #4
 8003d62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	2208      	movs	r2, #8
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d74:	f043 0201 	orr.w	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d80:	2201      	movs	r2, #1
 8003d82:	409a      	lsls	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d012      	beq.n	8003db2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00b      	beq.n	8003db2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	2201      	movs	r2, #1
 8003da0:	409a      	lsls	r2, r3
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	f043 0202 	orr.w	r2, r3, #2
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db6:	2204      	movs	r2, #4
 8003db8:	409a      	lsls	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d012      	beq.n	8003de8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00b      	beq.n	8003de8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f043 0204 	orr.w	r2, r3, #4
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dec:	2210      	movs	r2, #16
 8003dee:	409a      	lsls	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d043      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d03c      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0a:	2210      	movs	r2, #16
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d018      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d108      	bne.n	8003e40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d024      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	4798      	blx	r3
 8003e3e:	e01f      	b.n	8003e80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01b      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4798      	blx	r3
 8003e50:	e016      	b.n	8003e80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d107      	bne.n	8003e70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0208 	bic.w	r2, r2, #8
 8003e6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	2220      	movs	r2, #32
 8003e86:	409a      	lsls	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 808f 	beq.w	8003fb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8087 	beq.w	8003fb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	d136      	bne.n	8003f28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0216 	bic.w	r2, r2, #22
 8003ec8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695a      	ldr	r2, [r3, #20]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d103      	bne.n	8003eea <HAL_DMA_IRQHandler+0x1da>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0208 	bic.w	r2, r2, #8
 8003ef8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	223f      	movs	r2, #63	; 0x3f
 8003f00:	409a      	lsls	r2, r3
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d07e      	beq.n	800401c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	4798      	blx	r3
        }
        return;
 8003f26:	e079      	b.n	800401c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d01d      	beq.n	8003f72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10d      	bne.n	8003f60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d031      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4798      	blx	r3
 8003f54:	e02c      	b.n	8003fb0 <HAL_DMA_IRQHandler+0x2a0>
 8003f56:	bf00      	nop
 8003f58:	20009948 	.word	0x20009948
 8003f5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d023      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	4798      	blx	r3
 8003f70:	e01e      	b.n	8003fb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10f      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0210 	bic.w	r2, r2, #16
 8003f8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d032      	beq.n	800401e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d022      	beq.n	800400a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2205      	movs	r2, #5
 8003fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d307      	bcc.n	8003ff8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f2      	bne.n	8003fdc <HAL_DMA_IRQHandler+0x2cc>
 8003ff6:	e000      	b.n	8003ffa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ff8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	4798      	blx	r3
 800401a:	e000      	b.n	800401e <HAL_DMA_IRQHandler+0x30e>
        return;
 800401c:	bf00      	nop
    }
  }
}
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004040:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b40      	cmp	r3, #64	; 0x40
 8004050:	d108      	bne.n	8004064 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004062:	e007      	b.n	8004074 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	60da      	str	r2, [r3, #12]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	3b10      	subs	r3, #16
 8004090:	4a14      	ldr	r2, [pc, #80]	; (80040e4 <DMA_CalcBaseAndBitshift+0x64>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	091b      	lsrs	r3, r3, #4
 8004098:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800409a:	4a13      	ldr	r2, [pc, #76]	; (80040e8 <DMA_CalcBaseAndBitshift+0x68>)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d909      	bls.n	80040c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040b6:	f023 0303 	bic.w	r3, r3, #3
 80040ba:	1d1a      	adds	r2, r3, #4
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	659a      	str	r2, [r3, #88]	; 0x58
 80040c0:	e007      	b.n	80040d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ca:	f023 0303 	bic.w	r3, r3, #3
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	aaaaaaab 	.word	0xaaaaaaab
 80040e8:	08006204 	.word	0x08006204

080040ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d11f      	bne.n	8004146 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b03      	cmp	r3, #3
 800410a:	d856      	bhi.n	80041ba <DMA_CheckFifoParam+0xce>
 800410c:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <DMA_CheckFifoParam+0x28>)
 800410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004112:	bf00      	nop
 8004114:	08004125 	.word	0x08004125
 8004118:	08004137 	.word	0x08004137
 800411c:	08004125 	.word	0x08004125
 8004120:	080041bb 	.word	0x080041bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d046      	beq.n	80041be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004134:	e043      	b.n	80041be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800413e:	d140      	bne.n	80041c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004144:	e03d      	b.n	80041c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414e:	d121      	bne.n	8004194 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d837      	bhi.n	80041c6 <DMA_CheckFifoParam+0xda>
 8004156:	a201      	add	r2, pc, #4	; (adr r2, 800415c <DMA_CheckFifoParam+0x70>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	0800416d 	.word	0x0800416d
 8004160:	08004173 	.word	0x08004173
 8004164:	0800416d 	.word	0x0800416d
 8004168:	08004185 	.word	0x08004185
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
      break;
 8004170:	e030      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d025      	beq.n	80041ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004182:	e022      	b.n	80041ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800418c:	d11f      	bne.n	80041ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004192:	e01c      	b.n	80041ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d903      	bls.n	80041a2 <DMA_CheckFifoParam+0xb6>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b03      	cmp	r3, #3
 800419e:	d003      	beq.n	80041a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041a0:	e018      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
      break;
 80041a6:	e015      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00e      	beq.n	80041d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
      break;
 80041b8:	e00b      	b.n	80041d2 <DMA_CheckFifoParam+0xe6>
      break;
 80041ba:	bf00      	nop
 80041bc:	e00a      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;
 80041be:	bf00      	nop
 80041c0:	e008      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;
 80041c2:	bf00      	nop
 80041c4:	e006      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;
 80041c6:	bf00      	nop
 80041c8:	e004      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;
 80041ca:	bf00      	nop
 80041cc:	e002      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80041ce:	bf00      	nop
 80041d0:	e000      	b.n	80041d4 <DMA_CheckFifoParam+0xe8>
      break;
 80041d2:	bf00      	nop
    }
  } 
  
  return status; 
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop

080041e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b089      	sub	sp, #36	; 0x24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	e159      	b.n	80044b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004200:	2201      	movs	r2, #1
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4013      	ands	r3, r2
 8004212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	429a      	cmp	r2, r3
 800421a:	f040 8148 	bne.w	80044ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	2b01      	cmp	r3, #1
 8004228:	d005      	beq.n	8004236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004232:	2b02      	cmp	r3, #2
 8004234:	d130      	bne.n	8004298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	2203      	movs	r2, #3
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43db      	mvns	r3, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4013      	ands	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4313      	orrs	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800426c:	2201      	movs	r2, #1
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	f003 0201 	and.w	r2, r3, #1
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d017      	beq.n	80042d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	2203      	movs	r2, #3
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	43db      	mvns	r3, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4013      	ands	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d123      	bne.n	8004328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	08da      	lsrs	r2, r3, #3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3208      	adds	r2, #8
 80042e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	220f      	movs	r2, #15
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	43db      	mvns	r3, r3
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4013      	ands	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4313      	orrs	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	08da      	lsrs	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3208      	adds	r2, #8
 8004322:	69b9      	ldr	r1, [r7, #24]
 8004324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	2203      	movs	r2, #3
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 0203 	and.w	r2, r3, #3
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 80a2 	beq.w	80044ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	4b57      	ldr	r3, [pc, #348]	; (80044cc <HAL_GPIO_Init+0x2e8>)
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	4a56      	ldr	r2, [pc, #344]	; (80044cc <HAL_GPIO_Init+0x2e8>)
 8004374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004378:	6453      	str	r3, [r2, #68]	; 0x44
 800437a:	4b54      	ldr	r3, [pc, #336]	; (80044cc <HAL_GPIO_Init+0x2e8>)
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004386:	4a52      	ldr	r2, [pc, #328]	; (80044d0 <HAL_GPIO_Init+0x2ec>)
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	089b      	lsrs	r3, r3, #2
 800438c:	3302      	adds	r3, #2
 800438e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	220f      	movs	r2, #15
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43db      	mvns	r3, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4013      	ands	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a49      	ldr	r2, [pc, #292]	; (80044d4 <HAL_GPIO_Init+0x2f0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d019      	beq.n	80043e6 <HAL_GPIO_Init+0x202>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a48      	ldr	r2, [pc, #288]	; (80044d8 <HAL_GPIO_Init+0x2f4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d013      	beq.n	80043e2 <HAL_GPIO_Init+0x1fe>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a47      	ldr	r2, [pc, #284]	; (80044dc <HAL_GPIO_Init+0x2f8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00d      	beq.n	80043de <HAL_GPIO_Init+0x1fa>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a46      	ldr	r2, [pc, #280]	; (80044e0 <HAL_GPIO_Init+0x2fc>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d007      	beq.n	80043da <HAL_GPIO_Init+0x1f6>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a45      	ldr	r2, [pc, #276]	; (80044e4 <HAL_GPIO_Init+0x300>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d101      	bne.n	80043d6 <HAL_GPIO_Init+0x1f2>
 80043d2:	2304      	movs	r3, #4
 80043d4:	e008      	b.n	80043e8 <HAL_GPIO_Init+0x204>
 80043d6:	2307      	movs	r3, #7
 80043d8:	e006      	b.n	80043e8 <HAL_GPIO_Init+0x204>
 80043da:	2303      	movs	r3, #3
 80043dc:	e004      	b.n	80043e8 <HAL_GPIO_Init+0x204>
 80043de:	2302      	movs	r3, #2
 80043e0:	e002      	b.n	80043e8 <HAL_GPIO_Init+0x204>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_GPIO_Init+0x204>
 80043e6:	2300      	movs	r3, #0
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	f002 0203 	and.w	r2, r2, #3
 80043ee:	0092      	lsls	r2, r2, #2
 80043f0:	4093      	lsls	r3, r2
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043f8:	4935      	ldr	r1, [pc, #212]	; (80044d0 <HAL_GPIO_Init+0x2ec>)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	089b      	lsrs	r3, r3, #2
 80043fe:	3302      	adds	r3, #2
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004406:	4b38      	ldr	r3, [pc, #224]	; (80044e8 <HAL_GPIO_Init+0x304>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	43db      	mvns	r3, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4013      	ands	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800442a:	4a2f      	ldr	r2, [pc, #188]	; (80044e8 <HAL_GPIO_Init+0x304>)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004430:	4b2d      	ldr	r3, [pc, #180]	; (80044e8 <HAL_GPIO_Init+0x304>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004454:	4a24      	ldr	r2, [pc, #144]	; (80044e8 <HAL_GPIO_Init+0x304>)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800445a:	4b23      	ldr	r3, [pc, #140]	; (80044e8 <HAL_GPIO_Init+0x304>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	43db      	mvns	r3, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4013      	ands	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800447e:	4a1a      	ldr	r2, [pc, #104]	; (80044e8 <HAL_GPIO_Init+0x304>)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004484:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <HAL_GPIO_Init+0x304>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	43db      	mvns	r3, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044a8:	4a0f      	ldr	r2, [pc, #60]	; (80044e8 <HAL_GPIO_Init+0x304>)
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	3301      	adds	r3, #1
 80044b2:	61fb      	str	r3, [r7, #28]
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2b0f      	cmp	r3, #15
 80044b8:	f67f aea2 	bls.w	8004200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
 80044c0:	3724      	adds	r7, #36	; 0x24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40013800 	.word	0x40013800
 80044d4:	40020000 	.word	0x40020000
 80044d8:	40020400 	.word	0x40020400
 80044dc:	40020800 	.word	0x40020800
 80044e0:	40020c00 	.word	0x40020c00
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40013c00 	.word	0x40013c00

080044ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	807b      	strh	r3, [r7, #2]
 80044f8:	4613      	mov	r3, r2
 80044fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044fc:	787b      	ldrb	r3, [r7, #1]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004502:	887a      	ldrh	r2, [r7, #2]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004508:	e003      	b.n	8004512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800450a:	887b      	ldrh	r3, [r7, #2]
 800450c:	041a      	lsls	r2, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	619a      	str	r2, [r3, #24]
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e12b      	b.n	800478a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fe fbc2 	bl	8002cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2224      	movs	r2, #36	; 0x24
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004584:	f001 f858 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 8004588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4a81      	ldr	r2, [pc, #516]	; (8004794 <HAL_I2C_Init+0x274>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d807      	bhi.n	80045a4 <HAL_I2C_Init+0x84>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a80      	ldr	r2, [pc, #512]	; (8004798 <HAL_I2C_Init+0x278>)
 8004598:	4293      	cmp	r3, r2
 800459a:	bf94      	ite	ls
 800459c:	2301      	movls	r3, #1
 800459e:	2300      	movhi	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	e006      	b.n	80045b2 <HAL_I2C_Init+0x92>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a7d      	ldr	r2, [pc, #500]	; (800479c <HAL_I2C_Init+0x27c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	bf94      	ite	ls
 80045ac:	2301      	movls	r3, #1
 80045ae:	2300      	movhi	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e0e7      	b.n	800478a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4a78      	ldr	r2, [pc, #480]	; (80047a0 <HAL_I2C_Init+0x280>)
 80045be:	fba2 2303 	umull	r2, r3, r2, r3
 80045c2:	0c9b      	lsrs	r3, r3, #18
 80045c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4a6a      	ldr	r2, [pc, #424]	; (8004794 <HAL_I2C_Init+0x274>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d802      	bhi.n	80045f4 <HAL_I2C_Init+0xd4>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	3301      	adds	r3, #1
 80045f2:	e009      	b.n	8004608 <HAL_I2C_Init+0xe8>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045fa:	fb02 f303 	mul.w	r3, r2, r3
 80045fe:	4a69      	ldr	r2, [pc, #420]	; (80047a4 <HAL_I2C_Init+0x284>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	099b      	lsrs	r3, r3, #6
 8004606:	3301      	adds	r3, #1
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	430b      	orrs	r3, r1
 800460e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800461a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	495c      	ldr	r1, [pc, #368]	; (8004794 <HAL_I2C_Init+0x274>)
 8004624:	428b      	cmp	r3, r1
 8004626:	d819      	bhi.n	800465c <HAL_I2C_Init+0x13c>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	1e59      	subs	r1, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	fbb1 f3f3 	udiv	r3, r1, r3
 8004636:	1c59      	adds	r1, r3, #1
 8004638:	f640 73fc 	movw	r3, #4092	; 0xffc
 800463c:	400b      	ands	r3, r1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_I2C_Init+0x138>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1e59      	subs	r1, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004650:	3301      	adds	r3, #1
 8004652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004656:	e051      	b.n	80046fc <HAL_I2C_Init+0x1dc>
 8004658:	2304      	movs	r3, #4
 800465a:	e04f      	b.n	80046fc <HAL_I2C_Init+0x1dc>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d111      	bne.n	8004688 <HAL_I2C_Init+0x168>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1e58      	subs	r0, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6859      	ldr	r1, [r3, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	440b      	add	r3, r1
 8004672:	fbb0 f3f3 	udiv	r3, r0, r3
 8004676:	3301      	adds	r3, #1
 8004678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	e012      	b.n	80046ae <HAL_I2C_Init+0x18e>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	1e58      	subs	r0, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6859      	ldr	r1, [r3, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	0099      	lsls	r1, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	fbb0 f3f3 	udiv	r3, r0, r3
 800469e:	3301      	adds	r3, #1
 80046a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bf0c      	ite	eq
 80046a8:	2301      	moveq	r3, #1
 80046aa:	2300      	movne	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_I2C_Init+0x196>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e022      	b.n	80046fc <HAL_I2C_Init+0x1dc>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10e      	bne.n	80046dc <HAL_I2C_Init+0x1bc>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1e58      	subs	r0, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6859      	ldr	r1, [r3, #4]
 80046c6:	460b      	mov	r3, r1
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	440b      	add	r3, r1
 80046cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d0:	3301      	adds	r3, #1
 80046d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046da:	e00f      	b.n	80046fc <HAL_I2C_Init+0x1dc>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1e58      	subs	r0, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6859      	ldr	r1, [r3, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	0099      	lsls	r1, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80046f2:	3301      	adds	r3, #1
 80046f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	6809      	ldr	r1, [r1, #0]
 8004700:	4313      	orrs	r3, r2
 8004702:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69da      	ldr	r2, [r3, #28]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800472a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6911      	ldr	r1, [r2, #16]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	68d2      	ldr	r2, [r2, #12]
 8004736:	4311      	orrs	r1, r2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	430b      	orrs	r3, r1
 800473e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	000186a0 	.word	0x000186a0
 8004798:	001e847f 	.word	0x001e847f
 800479c:	003d08ff 	.word	0x003d08ff
 80047a0:	431bde83 	.word	0x431bde83
 80047a4:	10624dd3 	.word	0x10624dd3

080047a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	4608      	mov	r0, r1
 80047b2:	4611      	mov	r1, r2
 80047b4:	461a      	mov	r2, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	817b      	strh	r3, [r7, #10]
 80047ba:	460b      	mov	r3, r1
 80047bc:	813b      	strh	r3, [r7, #8]
 80047be:	4613      	mov	r3, r2
 80047c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047c2:	f7fe fc75 	bl	80030b0 <HAL_GetTick>
 80047c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	f040 80d9 	bne.w	8004988 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	2319      	movs	r3, #25
 80047dc:	2201      	movs	r2, #1
 80047de:	496d      	ldr	r1, [pc, #436]	; (8004994 <HAL_I2C_Mem_Write+0x1ec>)
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f971 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047ec:	2302      	movs	r3, #2
 80047ee:	e0cc      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_I2C_Mem_Write+0x56>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e0c5      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b01      	cmp	r3, #1
 8004812:	d007      	beq.n	8004824 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004832:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2221      	movs	r2, #33	; 0x21
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2240      	movs	r2, #64	; 0x40
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a3a      	ldr	r2, [r7, #32]
 800484e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004854:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a4d      	ldr	r2, [pc, #308]	; (8004998 <HAL_I2C_Mem_Write+0x1f0>)
 8004864:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004866:	88f8      	ldrh	r0, [r7, #6]
 8004868:	893a      	ldrh	r2, [r7, #8]
 800486a:	8979      	ldrh	r1, [r7, #10]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	4603      	mov	r3, r0
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f890 	bl	800499c <I2C_RequestMemoryWrite>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d052      	beq.n	8004928 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e081      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f9f2 	bl	8004c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00d      	beq.n	80048b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	2b04      	cmp	r3, #4
 800489c:	d107      	bne.n	80048ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e06b      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d11b      	bne.n	8004928 <HAL_I2C_Mem_Write+0x180>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d017      	beq.n	8004928 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	781a      	ldrb	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1aa      	bne.n	8004886 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f9de 	bl	8004cf6 <I2C_WaitOnBTFFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00d      	beq.n	800495c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	2b04      	cmp	r3, #4
 8004946:	d107      	bne.n	8004958 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004956:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e016      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	e000      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004988:	2302      	movs	r3, #2
  }
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	00100002 	.word	0x00100002
 8004998:	ffff0000 	.word	0xffff0000

0800499c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	4608      	mov	r0, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	461a      	mov	r2, r3
 80049aa:	4603      	mov	r3, r0
 80049ac:	817b      	strh	r3, [r7, #10]
 80049ae:	460b      	mov	r3, r1
 80049b0:	813b      	strh	r3, [r7, #8]
 80049b2:	4613      	mov	r3, r2
 80049b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f878 	bl	8004ac8 <I2C_WaitOnFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00d      	beq.n	80049fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ec:	d103      	bne.n	80049f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e05f      	b.n	8004aba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049fa:	897b      	ldrh	r3, [r7, #10]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	461a      	mov	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	6a3a      	ldr	r2, [r7, #32]
 8004a0e:	492d      	ldr	r1, [pc, #180]	; (8004ac4 <I2C_RequestMemoryWrite+0x128>)
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f8b0 	bl	8004b76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e04c      	b.n	8004aba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a38:	6a39      	ldr	r1, [r7, #32]
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f91a 	bl	8004c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00d      	beq.n	8004a62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d107      	bne.n	8004a5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e02b      	b.n	8004aba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d105      	bne.n	8004a74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a68:	893b      	ldrh	r3, [r7, #8]
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	611a      	str	r2, [r3, #16]
 8004a72:	e021      	b.n	8004ab8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a74:	893b      	ldrh	r3, [r7, #8]
 8004a76:	0a1b      	lsrs	r3, r3, #8
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a84:	6a39      	ldr	r1, [r7, #32]
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f8f4 	bl	8004c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00d      	beq.n	8004aae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d107      	bne.n	8004aaa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e005      	b.n	8004aba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004aae:	893b      	ldrh	r3, [r7, #8]
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	00010002 	.word	0x00010002

08004ac8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ad8:	e025      	b.n	8004b26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d021      	beq.n	8004b26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae2:	f7fe fae5 	bl	80030b0 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d302      	bcc.n	8004af8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d116      	bne.n	8004b26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f043 0220 	orr.w	r2, r3, #32
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e023      	b.n	8004b6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	0c1b      	lsrs	r3, r3, #16
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d10d      	bne.n	8004b4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	43da      	mvns	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bf0c      	ite	eq
 8004b42:	2301      	moveq	r3, #1
 8004b44:	2300      	movne	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	e00c      	b.n	8004b66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	43da      	mvns	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4013      	ands	r3, r2
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	bf0c      	ite	eq
 8004b5e:	2301      	moveq	r3, #1
 8004b60:	2300      	movne	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d0b6      	beq.n	8004ada <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
 8004b82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b84:	e051      	b.n	8004c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b94:	d123      	bne.n	8004bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f043 0204 	orr.w	r2, r3, #4
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e046      	b.n	8004c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d021      	beq.n	8004c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be6:	f7fe fa63 	bl	80030b0 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d302      	bcc.n	8004bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d116      	bne.n	8004c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f043 0220 	orr.w	r2, r3, #32
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e020      	b.n	8004c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d10c      	bne.n	8004c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	43da      	mvns	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	bf14      	ite	ne
 8004c46:	2301      	movne	r3, #1
 8004c48:	2300      	moveq	r3, #0
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	e00b      	b.n	8004c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	43da      	mvns	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d18d      	bne.n	8004b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c80:	e02d      	b.n	8004cde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 f878 	bl	8004d78 <I2C_IsAcknowledgeFailed>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e02d      	b.n	8004cee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d021      	beq.n	8004cde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9a:	f7fe fa09 	bl	80030b0 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d302      	bcc.n	8004cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d116      	bne.n	8004cde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e007      	b.n	8004cee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce8:	2b80      	cmp	r3, #128	; 0x80
 8004cea:	d1ca      	bne.n	8004c82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d02:	e02d      	b.n	8004d60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f837 	bl	8004d78 <I2C_IsAcknowledgeFailed>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e02d      	b.n	8004d70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d021      	beq.n	8004d60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1c:	f7fe f9c8 	bl	80030b0 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d302      	bcc.n	8004d32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d116      	bne.n	8004d60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	f043 0220 	orr.w	r2, r3, #32
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e007      	b.n	8004d70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f003 0304 	and.w	r3, r3, #4
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d1ca      	bne.n	8004d04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8e:	d11b      	bne.n	8004dc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	f043 0204 	orr.w	r2, r3, #4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e267      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d075      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004df6:	4b88      	ldr	r3, [pc, #544]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d00c      	beq.n	8004e1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e02:	4b85      	ldr	r3, [pc, #532]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d112      	bne.n	8004e34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0e:	4b82      	ldr	r3, [pc, #520]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e1a:	d10b      	bne.n	8004e34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e1c:	4b7e      	ldr	r3, [pc, #504]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d05b      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x108>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d157      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e242      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3c:	d106      	bne.n	8004e4c <HAL_RCC_OscConfig+0x74>
 8004e3e:	4b76      	ldr	r3, [pc, #472]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a75      	ldr	r2, [pc, #468]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	e01d      	b.n	8004e88 <HAL_RCC_OscConfig+0xb0>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e54:	d10c      	bne.n	8004e70 <HAL_RCC_OscConfig+0x98>
 8004e56:	4b70      	ldr	r3, [pc, #448]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a6f      	ldr	r2, [pc, #444]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	4b6d      	ldr	r3, [pc, #436]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a6c      	ldr	r2, [pc, #432]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	e00b      	b.n	8004e88 <HAL_RCC_OscConfig+0xb0>
 8004e70:	4b69      	ldr	r3, [pc, #420]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a68      	ldr	r2, [pc, #416]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	4b66      	ldr	r3, [pc, #408]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a65      	ldr	r2, [pc, #404]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d013      	beq.n	8004eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e90:	f7fe f90e 	bl	80030b0 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e98:	f7fe f90a 	bl	80030b0 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b64      	cmp	r3, #100	; 0x64
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e207      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eaa:	4b5b      	ldr	r3, [pc, #364]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0xc0>
 8004eb6:	e014      	b.n	8004ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb8:	f7fe f8fa 	bl	80030b0 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ec0:	f7fe f8f6 	bl	80030b0 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b64      	cmp	r3, #100	; 0x64
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e1f3      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed2:	4b51      	ldr	r3, [pc, #324]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0xe8>
 8004ede:	e000      	b.n	8004ee2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d063      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eee:	4b4a      	ldr	r3, [pc, #296]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00b      	beq.n	8004f12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004efa:	4b47      	ldr	r3, [pc, #284]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d11c      	bne.n	8004f40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f06:	4b44      	ldr	r3, [pc, #272]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d116      	bne.n	8004f40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f12:	4b41      	ldr	r3, [pc, #260]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <HAL_RCC_OscConfig+0x152>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d001      	beq.n	8004f2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e1c7      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2a:	4b3b      	ldr	r3, [pc, #236]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	4937      	ldr	r1, [pc, #220]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f3e:	e03a      	b.n	8004fb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d020      	beq.n	8004f8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f48:	4b34      	ldr	r3, [pc, #208]	; (800501c <HAL_RCC_OscConfig+0x244>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4e:	f7fe f8af 	bl	80030b0 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f56:	f7fe f8ab 	bl	80030b0 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e1a8      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f68:	4b2b      	ldr	r3, [pc, #172]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f0      	beq.n	8004f56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f74:	4b28      	ldr	r3, [pc, #160]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	4925      	ldr	r1, [pc, #148]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	600b      	str	r3, [r1, #0]
 8004f88:	e015      	b.n	8004fb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f8a:	4b24      	ldr	r3, [pc, #144]	; (800501c <HAL_RCC_OscConfig+0x244>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f90:	f7fe f88e 	bl	80030b0 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f98:	f7fe f88a 	bl	80030b0 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e187      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004faa:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f0      	bne.n	8004f98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d036      	beq.n	8005030 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d016      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fca:	4b15      	ldr	r3, [pc, #84]	; (8005020 <HAL_RCC_OscConfig+0x248>)
 8004fcc:	2201      	movs	r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd0:	f7fe f86e 	bl	80030b0 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fd8:	f7fe f86a 	bl	80030b0 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e167      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fea:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <HAL_RCC_OscConfig+0x240>)
 8004fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f0      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x200>
 8004ff6:	e01b      	b.n	8005030 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ff8:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_RCC_OscConfig+0x248>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffe:	f7fe f857 	bl	80030b0 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005004:	e00e      	b.n	8005024 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005006:	f7fe f853 	bl	80030b0 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d907      	bls.n	8005024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e150      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
 8005018:	40023800 	.word	0x40023800
 800501c:	42470000 	.word	0x42470000
 8005020:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005024:	4b88      	ldr	r3, [pc, #544]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 8005026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1ea      	bne.n	8005006 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8097 	beq.w	800516c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800503e:	2300      	movs	r3, #0
 8005040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005042:	4b81      	ldr	r3, [pc, #516]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10f      	bne.n	800506e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
 8005052:	4b7d      	ldr	r3, [pc, #500]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	4a7c      	ldr	r2, [pc, #496]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 8005058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505c:	6413      	str	r3, [r2, #64]	; 0x40
 800505e:	4b7a      	ldr	r3, [pc, #488]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005066:	60bb      	str	r3, [r7, #8]
 8005068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800506a:	2301      	movs	r3, #1
 800506c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506e:	4b77      	ldr	r3, [pc, #476]	; (800524c <HAL_RCC_OscConfig+0x474>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005076:	2b00      	cmp	r3, #0
 8005078:	d118      	bne.n	80050ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800507a:	4b74      	ldr	r3, [pc, #464]	; (800524c <HAL_RCC_OscConfig+0x474>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a73      	ldr	r2, [pc, #460]	; (800524c <HAL_RCC_OscConfig+0x474>)
 8005080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005086:	f7fe f813 	bl	80030b0 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800508e:	f7fe f80f 	bl	80030b0 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e10c      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a0:	4b6a      	ldr	r3, [pc, #424]	; (800524c <HAL_RCC_OscConfig+0x474>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f0      	beq.n	800508e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d106      	bne.n	80050c2 <HAL_RCC_OscConfig+0x2ea>
 80050b4:	4b64      	ldr	r3, [pc, #400]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 80050b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b8:	4a63      	ldr	r2, [pc, #396]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	6713      	str	r3, [r2, #112]	; 0x70
 80050c0:	e01c      	b.n	80050fc <HAL_RCC_OscConfig+0x324>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b05      	cmp	r3, #5
 80050c8:	d10c      	bne.n	80050e4 <HAL_RCC_OscConfig+0x30c>
 80050ca:	4b5f      	ldr	r3, [pc, #380]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ce:	4a5e      	ldr	r2, [pc, #376]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 80050d0:	f043 0304 	orr.w	r3, r3, #4
 80050d4:	6713      	str	r3, [r2, #112]	; 0x70
 80050d6:	4b5c      	ldr	r3, [pc, #368]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	4a5b      	ldr	r2, [pc, #364]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	6713      	str	r3, [r2, #112]	; 0x70
 80050e2:	e00b      	b.n	80050fc <HAL_RCC_OscConfig+0x324>
 80050e4:	4b58      	ldr	r3, [pc, #352]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	4a57      	ldr	r2, [pc, #348]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 80050ea:	f023 0301 	bic.w	r3, r3, #1
 80050ee:	6713      	str	r3, [r2, #112]	; 0x70
 80050f0:	4b55      	ldr	r3, [pc, #340]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 80050f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f4:	4a54      	ldr	r2, [pc, #336]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 80050f6:	f023 0304 	bic.w	r3, r3, #4
 80050fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d015      	beq.n	8005130 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005104:	f7fd ffd4 	bl	80030b0 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800510a:	e00a      	b.n	8005122 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800510c:	f7fd ffd0 	bl	80030b0 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	; 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e0cb      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005122:	4b49      	ldr	r3, [pc, #292]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0ee      	beq.n	800510c <HAL_RCC_OscConfig+0x334>
 800512e:	e014      	b.n	800515a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005130:	f7fd ffbe 	bl	80030b0 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005136:	e00a      	b.n	800514e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005138:	f7fd ffba 	bl	80030b0 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	; 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e0b5      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800514e:	4b3e      	ldr	r3, [pc, #248]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 8005150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1ee      	bne.n	8005138 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800515a:	7dfb      	ldrb	r3, [r7, #23]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d105      	bne.n	800516c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005160:	4b39      	ldr	r3, [pc, #228]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 8005162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005164:	4a38      	ldr	r2, [pc, #224]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 8005166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800516a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80a1 	beq.w	80052b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005176:	4b34      	ldr	r3, [pc, #208]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 030c 	and.w	r3, r3, #12
 800517e:	2b08      	cmp	r3, #8
 8005180:	d05c      	beq.n	800523c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d141      	bne.n	800520e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800518a:	4b31      	ldr	r3, [pc, #196]	; (8005250 <HAL_RCC_OscConfig+0x478>)
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005190:	f7fd ff8e 	bl	80030b0 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005198:	f7fd ff8a 	bl	80030b0 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e087      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051aa:	4b27      	ldr	r3, [pc, #156]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69da      	ldr	r2, [r3, #28]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	019b      	lsls	r3, r3, #6
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	085b      	lsrs	r3, r3, #1
 80051ce:	3b01      	subs	r3, #1
 80051d0:	041b      	lsls	r3, r3, #16
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	061b      	lsls	r3, r3, #24
 80051da:	491b      	ldr	r1, [pc, #108]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051e0:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <HAL_RCC_OscConfig+0x478>)
 80051e2:	2201      	movs	r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e6:	f7fd ff63 	bl	80030b0 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ee:	f7fd ff5f 	bl	80030b0 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e05c      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005200:	4b11      	ldr	r3, [pc, #68]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0f0      	beq.n	80051ee <HAL_RCC_OscConfig+0x416>
 800520c:	e054      	b.n	80052b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800520e:	4b10      	ldr	r3, [pc, #64]	; (8005250 <HAL_RCC_OscConfig+0x478>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005214:	f7fd ff4c 	bl	80030b0 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521c:	f7fd ff48 	bl	80030b0 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e045      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522e:	4b06      	ldr	r3, [pc, #24]	; (8005248 <HAL_RCC_OscConfig+0x470>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0x444>
 800523a:	e03d      	b.n	80052b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d107      	bne.n	8005254 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e038      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
 8005248:	40023800 	.word	0x40023800
 800524c:	40007000 	.word	0x40007000
 8005250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005254:	4b1b      	ldr	r3, [pc, #108]	; (80052c4 <HAL_RCC_OscConfig+0x4ec>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d028      	beq.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800526c:	429a      	cmp	r2, r3
 800526e:	d121      	bne.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800527a:	429a      	cmp	r2, r3
 800527c:	d11a      	bne.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005284:	4013      	ands	r3, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800528a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800528c:	4293      	cmp	r3, r2
 800528e:	d111      	bne.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	085b      	lsrs	r3, r3, #1
 800529c:	3b01      	subs	r3, #1
 800529e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d107      	bne.n	80052b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d001      	beq.n	80052b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40023800 	.word	0x40023800

080052c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0cc      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052dc:	4b68      	ldr	r3, [pc, #416]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d90c      	bls.n	8005304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ea:	4b65      	ldr	r3, [pc, #404]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f2:	4b63      	ldr	r3, [pc, #396]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d001      	beq.n	8005304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e0b8      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d020      	beq.n	8005352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d005      	beq.n	8005328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800531c:	4b59      	ldr	r3, [pc, #356]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4a58      	ldr	r2, [pc, #352]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005334:	4b53      	ldr	r3, [pc, #332]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	4a52      	ldr	r2, [pc, #328]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800533e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005340:	4b50      	ldr	r3, [pc, #320]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	494d      	ldr	r1, [pc, #308]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	4313      	orrs	r3, r2
 8005350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d044      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d107      	bne.n	8005376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005366:	4b47      	ldr	r3, [pc, #284]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d119      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e07f      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d003      	beq.n	8005386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005382:	2b03      	cmp	r3, #3
 8005384:	d107      	bne.n	8005396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005386:	4b3f      	ldr	r3, [pc, #252]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e06f      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005396:	4b3b      	ldr	r3, [pc, #236]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e067      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053a6:	4b37      	ldr	r3, [pc, #220]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f023 0203 	bic.w	r2, r3, #3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4934      	ldr	r1, [pc, #208]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053b8:	f7fd fe7a 	bl	80030b0 <HAL_GetTick>
 80053bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053be:	e00a      	b.n	80053d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c0:	f7fd fe76 	bl	80030b0 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e04f      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d6:	4b2b      	ldr	r3, [pc, #172]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 020c 	and.w	r2, r3, #12
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d1eb      	bne.n	80053c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e8:	4b25      	ldr	r3, [pc, #148]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d20c      	bcs.n	8005410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f6:	4b22      	ldr	r3, [pc, #136]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fe:	4b20      	ldr	r3, [pc, #128]	; (8005480 <HAL_RCC_ClockConfig+0x1b8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d001      	beq.n	8005410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e032      	b.n	8005476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d008      	beq.n	800542e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800541c:	4b19      	ldr	r3, [pc, #100]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	4916      	ldr	r1, [pc, #88]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800542a:	4313      	orrs	r3, r2
 800542c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d009      	beq.n	800544e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800543a:	4b12      	ldr	r3, [pc, #72]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	490e      	ldr	r1, [pc, #56]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 800544a:	4313      	orrs	r3, r2
 800544c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800544e:	f000 f821 	bl	8005494 <HAL_RCC_GetSysClockFreq>
 8005452:	4602      	mov	r2, r0
 8005454:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	490a      	ldr	r1, [pc, #40]	; (8005488 <HAL_RCC_ClockConfig+0x1c0>)
 8005460:	5ccb      	ldrb	r3, [r1, r3]
 8005462:	fa22 f303 	lsr.w	r3, r2, r3
 8005466:	4a09      	ldr	r2, [pc, #36]	; (800548c <HAL_RCC_ClockConfig+0x1c4>)
 8005468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800546a:	4b09      	ldr	r3, [pc, #36]	; (8005490 <HAL_RCC_ClockConfig+0x1c8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f7fd fdda 	bl	8003028 <HAL_InitTick>

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40023c00 	.word	0x40023c00
 8005484:	40023800 	.word	0x40023800
 8005488:	080061ec 	.word	0x080061ec
 800548c:	20009948 	.word	0x20009948
 8005490:	2000994c 	.word	0x2000994c

08005494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005498:	b090      	sub	sp, #64	; 0x40
 800549a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	637b      	str	r3, [r7, #52]	; 0x34
 80054a0:	2300      	movs	r3, #0
 80054a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054a4:	2300      	movs	r3, #0
 80054a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054ac:	4b59      	ldr	r3, [pc, #356]	; (8005614 <HAL_RCC_GetSysClockFreq+0x180>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 030c 	and.w	r3, r3, #12
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d00d      	beq.n	80054d4 <HAL_RCC_GetSysClockFreq+0x40>
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	f200 80a1 	bhi.w	8005600 <HAL_RCC_GetSysClockFreq+0x16c>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <HAL_RCC_GetSysClockFreq+0x34>
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d003      	beq.n	80054ce <HAL_RCC_GetSysClockFreq+0x3a>
 80054c6:	e09b      	b.n	8005600 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054c8:	4b53      	ldr	r3, [pc, #332]	; (8005618 <HAL_RCC_GetSysClockFreq+0x184>)
 80054ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80054cc:	e09b      	b.n	8005606 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054ce:	4b53      	ldr	r3, [pc, #332]	; (800561c <HAL_RCC_GetSysClockFreq+0x188>)
 80054d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054d2:	e098      	b.n	8005606 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054d4:	4b4f      	ldr	r3, [pc, #316]	; (8005614 <HAL_RCC_GetSysClockFreq+0x180>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054de:	4b4d      	ldr	r3, [pc, #308]	; (8005614 <HAL_RCC_GetSysClockFreq+0x180>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d028      	beq.n	800553c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ea:	4b4a      	ldr	r3, [pc, #296]	; (8005614 <HAL_RCC_GetSysClockFreq+0x180>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	099b      	lsrs	r3, r3, #6
 80054f0:	2200      	movs	r2, #0
 80054f2:	623b      	str	r3, [r7, #32]
 80054f4:	627a      	str	r2, [r7, #36]	; 0x24
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80054fc:	2100      	movs	r1, #0
 80054fe:	4b47      	ldr	r3, [pc, #284]	; (800561c <HAL_RCC_GetSysClockFreq+0x188>)
 8005500:	fb03 f201 	mul.w	r2, r3, r1
 8005504:	2300      	movs	r3, #0
 8005506:	fb00 f303 	mul.w	r3, r0, r3
 800550a:	4413      	add	r3, r2
 800550c:	4a43      	ldr	r2, [pc, #268]	; (800561c <HAL_RCC_GetSysClockFreq+0x188>)
 800550e:	fba0 1202 	umull	r1, r2, r0, r2
 8005512:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005514:	460a      	mov	r2, r1
 8005516:	62ba      	str	r2, [r7, #40]	; 0x28
 8005518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800551a:	4413      	add	r3, r2
 800551c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800551e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005520:	2200      	movs	r2, #0
 8005522:	61bb      	str	r3, [r7, #24]
 8005524:	61fa      	str	r2, [r7, #28]
 8005526:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800552a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800552e:	f7fb fadf 	bl	8000af0 <__aeabi_uldivmod>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4613      	mov	r3, r2
 8005538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800553a:	e053      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800553c:	4b35      	ldr	r3, [pc, #212]	; (8005614 <HAL_RCC_GetSysClockFreq+0x180>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	099b      	lsrs	r3, r3, #6
 8005542:	2200      	movs	r2, #0
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	617a      	str	r2, [r7, #20]
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800554e:	f04f 0b00 	mov.w	fp, #0
 8005552:	4652      	mov	r2, sl
 8005554:	465b      	mov	r3, fp
 8005556:	f04f 0000 	mov.w	r0, #0
 800555a:	f04f 0100 	mov.w	r1, #0
 800555e:	0159      	lsls	r1, r3, #5
 8005560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005564:	0150      	lsls	r0, r2, #5
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	ebb2 080a 	subs.w	r8, r2, sl
 800556e:	eb63 090b 	sbc.w	r9, r3, fp
 8005572:	f04f 0200 	mov.w	r2, #0
 8005576:	f04f 0300 	mov.w	r3, #0
 800557a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800557e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005582:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005586:	ebb2 0408 	subs.w	r4, r2, r8
 800558a:	eb63 0509 	sbc.w	r5, r3, r9
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	00eb      	lsls	r3, r5, #3
 8005598:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800559c:	00e2      	lsls	r2, r4, #3
 800559e:	4614      	mov	r4, r2
 80055a0:	461d      	mov	r5, r3
 80055a2:	eb14 030a 	adds.w	r3, r4, sl
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	eb45 030b 	adc.w	r3, r5, fp
 80055ac:	607b      	str	r3, [r7, #4]
 80055ae:	f04f 0200 	mov.w	r2, #0
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055ba:	4629      	mov	r1, r5
 80055bc:	028b      	lsls	r3, r1, #10
 80055be:	4621      	mov	r1, r4
 80055c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055c4:	4621      	mov	r1, r4
 80055c6:	028a      	lsls	r2, r1, #10
 80055c8:	4610      	mov	r0, r2
 80055ca:	4619      	mov	r1, r3
 80055cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ce:	2200      	movs	r2, #0
 80055d0:	60bb      	str	r3, [r7, #8]
 80055d2:	60fa      	str	r2, [r7, #12]
 80055d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055d8:	f7fb fa8a 	bl	8000af0 <__aeabi_uldivmod>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4613      	mov	r3, r2
 80055e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055e4:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <HAL_RCC_GetSysClockFreq+0x180>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	0c1b      	lsrs	r3, r3, #16
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	3301      	adds	r3, #1
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80055f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055fe:	e002      	b.n	8005606 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005600:	4b05      	ldr	r3, [pc, #20]	; (8005618 <HAL_RCC_GetSysClockFreq+0x184>)
 8005602:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005608:	4618      	mov	r0, r3
 800560a:	3740      	adds	r7, #64	; 0x40
 800560c:	46bd      	mov	sp, r7
 800560e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005612:	bf00      	nop
 8005614:	40023800 	.word	0x40023800
 8005618:	00f42400 	.word	0x00f42400
 800561c:	019bfcc0 	.word	0x019bfcc0

08005620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005624:	4b03      	ldr	r3, [pc, #12]	; (8005634 <HAL_RCC_GetHCLKFreq+0x14>)
 8005626:	681b      	ldr	r3, [r3, #0]
}
 8005628:	4618      	mov	r0, r3
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20009948 	.word	0x20009948

08005638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800563c:	f7ff fff0 	bl	8005620 <HAL_RCC_GetHCLKFreq>
 8005640:	4602      	mov	r2, r0
 8005642:	4b05      	ldr	r3, [pc, #20]	; (8005658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	0a9b      	lsrs	r3, r3, #10
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	4903      	ldr	r1, [pc, #12]	; (800565c <HAL_RCC_GetPCLK1Freq+0x24>)
 800564e:	5ccb      	ldrb	r3, [r1, r3]
 8005650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005654:	4618      	mov	r0, r3
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40023800 	.word	0x40023800
 800565c:	080061fc 	.word	0x080061fc

08005660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e041      	b.n	80056f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fd fc06 	bl	8002e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3304      	adds	r3, #4
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f000 f950 	bl	8005944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	d001      	beq.n	8005718 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e03c      	b.n	8005792 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1e      	ldr	r2, [pc, #120]	; (80057a0 <HAL_TIM_Base_Start+0xa0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d018      	beq.n	800575c <HAL_TIM_Base_Start+0x5c>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005732:	d013      	beq.n	800575c <HAL_TIM_Base_Start+0x5c>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1a      	ldr	r2, [pc, #104]	; (80057a4 <HAL_TIM_Base_Start+0xa4>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00e      	beq.n	800575c <HAL_TIM_Base_Start+0x5c>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a19      	ldr	r2, [pc, #100]	; (80057a8 <HAL_TIM_Base_Start+0xa8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <HAL_TIM_Base_Start+0x5c>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a17      	ldr	r2, [pc, #92]	; (80057ac <HAL_TIM_Base_Start+0xac>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <HAL_TIM_Base_Start+0x5c>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a16      	ldr	r2, [pc, #88]	; (80057b0 <HAL_TIM_Base_Start+0xb0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d111      	bne.n	8005780 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b06      	cmp	r3, #6
 800576c:	d010      	beq.n	8005790 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0201 	orr.w	r2, r2, #1
 800577c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577e:	e007      	b.n	8005790 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40010000 	.word	0x40010000
 80057a4:	40000400 	.word	0x40000400
 80057a8:	40000800 	.word	0x40000800
 80057ac:	40000c00 	.word	0x40000c00
 80057b0:	40014000 	.word	0x40014000

080057b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_TIM_ConfigClockSource+0x1c>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e0b4      	b.n	800593a <HAL_TIM_ConfigClockSource+0x186>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005808:	d03e      	beq.n	8005888 <HAL_TIM_ConfigClockSource+0xd4>
 800580a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800580e:	f200 8087 	bhi.w	8005920 <HAL_TIM_ConfigClockSource+0x16c>
 8005812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005816:	f000 8086 	beq.w	8005926 <HAL_TIM_ConfigClockSource+0x172>
 800581a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581e:	d87f      	bhi.n	8005920 <HAL_TIM_ConfigClockSource+0x16c>
 8005820:	2b70      	cmp	r3, #112	; 0x70
 8005822:	d01a      	beq.n	800585a <HAL_TIM_ConfigClockSource+0xa6>
 8005824:	2b70      	cmp	r3, #112	; 0x70
 8005826:	d87b      	bhi.n	8005920 <HAL_TIM_ConfigClockSource+0x16c>
 8005828:	2b60      	cmp	r3, #96	; 0x60
 800582a:	d050      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0x11a>
 800582c:	2b60      	cmp	r3, #96	; 0x60
 800582e:	d877      	bhi.n	8005920 <HAL_TIM_ConfigClockSource+0x16c>
 8005830:	2b50      	cmp	r3, #80	; 0x50
 8005832:	d03c      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0xfa>
 8005834:	2b50      	cmp	r3, #80	; 0x50
 8005836:	d873      	bhi.n	8005920 <HAL_TIM_ConfigClockSource+0x16c>
 8005838:	2b40      	cmp	r3, #64	; 0x40
 800583a:	d058      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0x13a>
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	d86f      	bhi.n	8005920 <HAL_TIM_ConfigClockSource+0x16c>
 8005840:	2b30      	cmp	r3, #48	; 0x30
 8005842:	d064      	beq.n	800590e <HAL_TIM_ConfigClockSource+0x15a>
 8005844:	2b30      	cmp	r3, #48	; 0x30
 8005846:	d86b      	bhi.n	8005920 <HAL_TIM_ConfigClockSource+0x16c>
 8005848:	2b20      	cmp	r3, #32
 800584a:	d060      	beq.n	800590e <HAL_TIM_ConfigClockSource+0x15a>
 800584c:	2b20      	cmp	r3, #32
 800584e:	d867      	bhi.n	8005920 <HAL_TIM_ConfigClockSource+0x16c>
 8005850:	2b00      	cmp	r3, #0
 8005852:	d05c      	beq.n	800590e <HAL_TIM_ConfigClockSource+0x15a>
 8005854:	2b10      	cmp	r3, #16
 8005856:	d05a      	beq.n	800590e <HAL_TIM_ConfigClockSource+0x15a>
 8005858:	e062      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6899      	ldr	r1, [r3, #8]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f000 f965 	bl	8005b38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800587c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	609a      	str	r2, [r3, #8]
      break;
 8005886:	e04f      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6818      	ldr	r0, [r3, #0]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	6899      	ldr	r1, [r3, #8]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f000 f94e 	bl	8005b38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058aa:	609a      	str	r2, [r3, #8]
      break;
 80058ac:	e03c      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	6859      	ldr	r1, [r3, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f000 f8c2 	bl	8005a44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2150      	movs	r1, #80	; 0x50
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 f91b 	bl	8005b02 <TIM_ITRx_SetConfig>
      break;
 80058cc:	e02c      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	6859      	ldr	r1, [r3, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	461a      	mov	r2, r3
 80058dc:	f000 f8e1 	bl	8005aa2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2160      	movs	r1, #96	; 0x60
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 f90b 	bl	8005b02 <TIM_ITRx_SetConfig>
      break;
 80058ec:	e01c      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	6859      	ldr	r1, [r3, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	461a      	mov	r2, r3
 80058fc:	f000 f8a2 	bl	8005a44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2140      	movs	r1, #64	; 0x40
 8005906:	4618      	mov	r0, r3
 8005908:	f000 f8fb 	bl	8005b02 <TIM_ITRx_SetConfig>
      break;
 800590c:	e00c      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f000 f8f2 	bl	8005b02 <TIM_ITRx_SetConfig>
      break;
 800591e:	e003      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	73fb      	strb	r3, [r7, #15]
      break;
 8005924:	e000      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005926:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005938:	7bfb      	ldrb	r3, [r7, #15]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a34      	ldr	r2, [pc, #208]	; (8005a28 <TIM_Base_SetConfig+0xe4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00f      	beq.n	800597c <TIM_Base_SetConfig+0x38>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005962:	d00b      	beq.n	800597c <TIM_Base_SetConfig+0x38>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a31      	ldr	r2, [pc, #196]	; (8005a2c <TIM_Base_SetConfig+0xe8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d007      	beq.n	800597c <TIM_Base_SetConfig+0x38>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a30      	ldr	r2, [pc, #192]	; (8005a30 <TIM_Base_SetConfig+0xec>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d003      	beq.n	800597c <TIM_Base_SetConfig+0x38>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a2f      	ldr	r2, [pc, #188]	; (8005a34 <TIM_Base_SetConfig+0xf0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d108      	bne.n	800598e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a25      	ldr	r2, [pc, #148]	; (8005a28 <TIM_Base_SetConfig+0xe4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d01b      	beq.n	80059ce <TIM_Base_SetConfig+0x8a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599c:	d017      	beq.n	80059ce <TIM_Base_SetConfig+0x8a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a22      	ldr	r2, [pc, #136]	; (8005a2c <TIM_Base_SetConfig+0xe8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <TIM_Base_SetConfig+0x8a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a21      	ldr	r2, [pc, #132]	; (8005a30 <TIM_Base_SetConfig+0xec>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00f      	beq.n	80059ce <TIM_Base_SetConfig+0x8a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a20      	ldr	r2, [pc, #128]	; (8005a34 <TIM_Base_SetConfig+0xf0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00b      	beq.n	80059ce <TIM_Base_SetConfig+0x8a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a1f      	ldr	r2, [pc, #124]	; (8005a38 <TIM_Base_SetConfig+0xf4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d007      	beq.n	80059ce <TIM_Base_SetConfig+0x8a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a1e      	ldr	r2, [pc, #120]	; (8005a3c <TIM_Base_SetConfig+0xf8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d003      	beq.n	80059ce <TIM_Base_SetConfig+0x8a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a1d      	ldr	r2, [pc, #116]	; (8005a40 <TIM_Base_SetConfig+0xfc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d108      	bne.n	80059e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a08      	ldr	r2, [pc, #32]	; (8005a28 <TIM_Base_SetConfig+0xe4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d103      	bne.n	8005a14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	615a      	str	r2, [r3, #20]
}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40010000 	.word	0x40010000
 8005a2c:	40000400 	.word	0x40000400
 8005a30:	40000800 	.word	0x40000800
 8005a34:	40000c00 	.word	0x40000c00
 8005a38:	40014000 	.word	0x40014000
 8005a3c:	40014400 	.word	0x40014400
 8005a40:	40014800 	.word	0x40014800

08005a44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	f023 0201 	bic.w	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f023 030a 	bic.w	r3, r3, #10
 8005a80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	621a      	str	r2, [r3, #32]
}
 8005a96:	bf00      	nop
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b087      	sub	sp, #28
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	f023 0210 	bic.w	r2, r3, #16
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005acc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	031b      	lsls	r3, r3, #12
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ade:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	621a      	str	r2, [r3, #32]
}
 8005af6:	bf00      	nop
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b085      	sub	sp, #20
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f043 0307 	orr.w	r3, r3, #7
 8005b24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	609a      	str	r2, [r3, #8]
}
 8005b2c:	bf00      	nop
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	021a      	lsls	r2, r3, #8
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	609a      	str	r2, [r3, #8]
}
 8005b6c:	bf00      	nop
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e050      	b.n	8005c32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1c      	ldr	r2, [pc, #112]	; (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d018      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bdc:	d013      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a18      	ldr	r2, [pc, #96]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00e      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a16      	ldr	r2, [pc, #88]	; (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d009      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a15      	ldr	r2, [pc, #84]	; (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d004      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a13      	ldr	r2, [pc, #76]	; (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d10c      	bne.n	8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40010000 	.word	0x40010000
 8005c44:	40000400 	.word	0x40000400
 8005c48:	40000800 	.word	0x40000800
 8005c4c:	40000c00 	.word	0x40000c00
 8005c50:	40014000 	.word	0x40014000

08005c54 <memset>:
 8005c54:	4402      	add	r2, r0
 8005c56:	4603      	mov	r3, r0
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d100      	bne.n	8005c5e <memset+0xa>
 8005c5c:	4770      	bx	lr
 8005c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c62:	e7f9      	b.n	8005c58 <memset+0x4>

08005c64 <__errno>:
 8005c64:	4b01      	ldr	r3, [pc, #4]	; (8005c6c <__errno+0x8>)
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	200099a0 	.word	0x200099a0

08005c70 <__libc_init_array>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	4d0d      	ldr	r5, [pc, #52]	; (8005ca8 <__libc_init_array+0x38>)
 8005c74:	4c0d      	ldr	r4, [pc, #52]	; (8005cac <__libc_init_array+0x3c>)
 8005c76:	1b64      	subs	r4, r4, r5
 8005c78:	10a4      	asrs	r4, r4, #2
 8005c7a:	2600      	movs	r6, #0
 8005c7c:	42a6      	cmp	r6, r4
 8005c7e:	d109      	bne.n	8005c94 <__libc_init_array+0x24>
 8005c80:	4d0b      	ldr	r5, [pc, #44]	; (8005cb0 <__libc_init_array+0x40>)
 8005c82:	4c0c      	ldr	r4, [pc, #48]	; (8005cb4 <__libc_init_array+0x44>)
 8005c84:	f000 faa6 	bl	80061d4 <_init>
 8005c88:	1b64      	subs	r4, r4, r5
 8005c8a:	10a4      	asrs	r4, r4, #2
 8005c8c:	2600      	movs	r6, #0
 8005c8e:	42a6      	cmp	r6, r4
 8005c90:	d105      	bne.n	8005c9e <__libc_init_array+0x2e>
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c98:	4798      	blx	r3
 8005c9a:	3601      	adds	r6, #1
 8005c9c:	e7ee      	b.n	8005c7c <__libc_init_array+0xc>
 8005c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca2:	4798      	blx	r3
 8005ca4:	3601      	adds	r6, #1
 8005ca6:	e7f2      	b.n	8005c8e <__libc_init_array+0x1e>
 8005ca8:	08006218 	.word	0x08006218
 8005cac:	08006218 	.word	0x08006218
 8005cb0:	08006218 	.word	0x08006218
 8005cb4:	0800621c 	.word	0x0800621c

08005cb8 <log10>:
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	ed2d 8b02 	vpush	{d8}
 8005cbe:	ec55 4b10 	vmov	r4, r5, d0
 8005cc2:	f000 f841 	bl	8005d48 <__ieee754_log10>
 8005cc6:	4622      	mov	r2, r4
 8005cc8:	462b      	mov	r3, r5
 8005cca:	4620      	mov	r0, r4
 8005ccc:	4629      	mov	r1, r5
 8005cce:	eeb0 8a40 	vmov.f32	s16, s0
 8005cd2:	eef0 8a60 	vmov.f32	s17, s1
 8005cd6:	f7fa fed5 	bl	8000a84 <__aeabi_dcmpun>
 8005cda:	b998      	cbnz	r0, 8005d04 <log10+0x4c>
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2300      	movs	r3, #0
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	f7fa feb0 	bl	8000a48 <__aeabi_dcmple>
 8005ce8:	b160      	cbz	r0, 8005d04 <log10+0x4c>
 8005cea:	2200      	movs	r2, #0
 8005cec:	2300      	movs	r3, #0
 8005cee:	4620      	mov	r0, r4
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	f7fa fe95 	bl	8000a20 <__aeabi_dcmpeq>
 8005cf6:	b160      	cbz	r0, 8005d12 <log10+0x5a>
 8005cf8:	f7ff ffb4 	bl	8005c64 <__errno>
 8005cfc:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8005d28 <log10+0x70>
 8005d00:	2322      	movs	r3, #34	; 0x22
 8005d02:	6003      	str	r3, [r0, #0]
 8005d04:	eeb0 0a48 	vmov.f32	s0, s16
 8005d08:	eef0 0a68 	vmov.f32	s1, s17
 8005d0c:	ecbd 8b02 	vpop	{d8}
 8005d10:	bd38      	pop	{r3, r4, r5, pc}
 8005d12:	f7ff ffa7 	bl	8005c64 <__errno>
 8005d16:	ecbd 8b02 	vpop	{d8}
 8005d1a:	2321      	movs	r3, #33	; 0x21
 8005d1c:	6003      	str	r3, [r0, #0]
 8005d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d22:	4803      	ldr	r0, [pc, #12]	; (8005d30 <log10+0x78>)
 8005d24:	f000 b808 	b.w	8005d38 <nan>
 8005d28:	00000000 	.word	0x00000000
 8005d2c:	fff00000 	.word	0xfff00000
 8005d30:	0800620c 	.word	0x0800620c
 8005d34:	00000000 	.word	0x00000000

08005d38 <nan>:
 8005d38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005d40 <nan+0x8>
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	00000000 	.word	0x00000000
 8005d44:	7ff80000 	.word	0x7ff80000

08005d48 <__ieee754_log10>:
 8005d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d4c:	ec55 4b10 	vmov	r4, r5, d0
 8005d50:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8005d54:	462b      	mov	r3, r5
 8005d56:	da2f      	bge.n	8005db8 <__ieee754_log10+0x70>
 8005d58:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8005d5c:	4322      	orrs	r2, r4
 8005d5e:	d109      	bne.n	8005d74 <__ieee754_log10+0x2c>
 8005d60:	493b      	ldr	r1, [pc, #236]	; (8005e50 <__ieee754_log10+0x108>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	2300      	movs	r3, #0
 8005d66:	2000      	movs	r0, #0
 8005d68:	f7fa fd1c 	bl	80007a4 <__aeabi_ddiv>
 8005d6c:	ec41 0b10 	vmov	d0, r0, r1
 8005d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d74:	2d00      	cmp	r5, #0
 8005d76:	da09      	bge.n	8005d8c <__ieee754_log10+0x44>
 8005d78:	ee10 2a10 	vmov	r2, s0
 8005d7c:	ee10 0a10 	vmov	r0, s0
 8005d80:	4629      	mov	r1, r5
 8005d82:	f7fa fa2d 	bl	80001e0 <__aeabi_dsub>
 8005d86:	2200      	movs	r2, #0
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e7ed      	b.n	8005d68 <__ieee754_log10+0x20>
 8005d8c:	4b31      	ldr	r3, [pc, #196]	; (8005e54 <__ieee754_log10+0x10c>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	4629      	mov	r1, r5
 8005d92:	ee10 0a10 	vmov	r0, s0
 8005d96:	f7fa fbdb 	bl	8000550 <__aeabi_dmul>
 8005d9a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8005d9e:	4604      	mov	r4, r0
 8005da0:	460d      	mov	r5, r1
 8005da2:	460b      	mov	r3, r1
 8005da4:	492c      	ldr	r1, [pc, #176]	; (8005e58 <__ieee754_log10+0x110>)
 8005da6:	428b      	cmp	r3, r1
 8005da8:	dd08      	ble.n	8005dbc <__ieee754_log10+0x74>
 8005daa:	4622      	mov	r2, r4
 8005dac:	462b      	mov	r3, r5
 8005dae:	4620      	mov	r0, r4
 8005db0:	4629      	mov	r1, r5
 8005db2:	f7fa fa17 	bl	80001e4 <__adddf3>
 8005db6:	e7d9      	b.n	8005d6c <__ieee754_log10+0x24>
 8005db8:	2200      	movs	r2, #0
 8005dba:	e7f3      	b.n	8005da4 <__ieee754_log10+0x5c>
 8005dbc:	1518      	asrs	r0, r3, #20
 8005dbe:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8005dc2:	4410      	add	r0, r2
 8005dc4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8005dc8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005dcc:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8005dd0:	f7fa fb54 	bl	800047c <__aeabi_i2d>
 8005dd4:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8005dd8:	3303      	adds	r3, #3
 8005dda:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8005dde:	ec45 4b10 	vmov	d0, r4, r5
 8005de2:	4606      	mov	r6, r0
 8005de4:	460f      	mov	r7, r1
 8005de6:	f000 f83b 	bl	8005e60 <__ieee754_log>
 8005dea:	a313      	add	r3, pc, #76	; (adr r3, 8005e38 <__ieee754_log10+0xf0>)
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	4630      	mov	r0, r6
 8005df2:	4639      	mov	r1, r7
 8005df4:	ec59 8b10 	vmov	r8, r9, d0
 8005df8:	f7fa fbaa 	bl	8000550 <__aeabi_dmul>
 8005dfc:	a310      	add	r3, pc, #64	; (adr r3, 8005e40 <__ieee754_log10+0xf8>)
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	4604      	mov	r4, r0
 8005e04:	460d      	mov	r5, r1
 8005e06:	4640      	mov	r0, r8
 8005e08:	4649      	mov	r1, r9
 8005e0a:	f7fa fba1 	bl	8000550 <__aeabi_dmul>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4620      	mov	r0, r4
 8005e14:	4629      	mov	r1, r5
 8005e16:	f7fa f9e5 	bl	80001e4 <__adddf3>
 8005e1a:	a30b      	add	r3, pc, #44	; (adr r3, 8005e48 <__ieee754_log10+0x100>)
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	4604      	mov	r4, r0
 8005e22:	460d      	mov	r5, r1
 8005e24:	4630      	mov	r0, r6
 8005e26:	4639      	mov	r1, r7
 8005e28:	f7fa fb92 	bl	8000550 <__aeabi_dmul>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4620      	mov	r0, r4
 8005e32:	4629      	mov	r1, r5
 8005e34:	e7bd      	b.n	8005db2 <__ieee754_log10+0x6a>
 8005e36:	bf00      	nop
 8005e38:	11f12b36 	.word	0x11f12b36
 8005e3c:	3d59fef3 	.word	0x3d59fef3
 8005e40:	1526e50e 	.word	0x1526e50e
 8005e44:	3fdbcb7b 	.word	0x3fdbcb7b
 8005e48:	509f6000 	.word	0x509f6000
 8005e4c:	3fd34413 	.word	0x3fd34413
 8005e50:	c3500000 	.word	0xc3500000
 8005e54:	43500000 	.word	0x43500000
 8005e58:	7fefffff 	.word	0x7fefffff
 8005e5c:	00000000 	.word	0x00000000

08005e60 <__ieee754_log>:
 8005e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e64:	ec51 0b10 	vmov	r0, r1, d0
 8005e68:	ed2d 8b04 	vpush	{d8-d9}
 8005e6c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005e70:	b083      	sub	sp, #12
 8005e72:	460d      	mov	r5, r1
 8005e74:	da29      	bge.n	8005eca <__ieee754_log+0x6a>
 8005e76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e7a:	4303      	orrs	r3, r0
 8005e7c:	ee10 2a10 	vmov	r2, s0
 8005e80:	d10c      	bne.n	8005e9c <__ieee754_log+0x3c>
 8005e82:	49cf      	ldr	r1, [pc, #828]	; (80061c0 <__ieee754_log+0x360>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	2300      	movs	r3, #0
 8005e88:	2000      	movs	r0, #0
 8005e8a:	f7fa fc8b 	bl	80007a4 <__aeabi_ddiv>
 8005e8e:	ec41 0b10 	vmov	d0, r0, r1
 8005e92:	b003      	add	sp, #12
 8005e94:	ecbd 8b04 	vpop	{d8-d9}
 8005e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9c:	2900      	cmp	r1, #0
 8005e9e:	da05      	bge.n	8005eac <__ieee754_log+0x4c>
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	f7fa f99d 	bl	80001e0 <__aeabi_dsub>
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	e7ee      	b.n	8005e8a <__ieee754_log+0x2a>
 8005eac:	4bc5      	ldr	r3, [pc, #788]	; (80061c4 <__ieee754_log+0x364>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f7fa fb4e 	bl	8000550 <__aeabi_dmul>
 8005eb4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005eb8:	460d      	mov	r5, r1
 8005eba:	4ac3      	ldr	r2, [pc, #780]	; (80061c8 <__ieee754_log+0x368>)
 8005ebc:	4295      	cmp	r5, r2
 8005ebe:	dd06      	ble.n	8005ece <__ieee754_log+0x6e>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	f7fa f98e 	bl	80001e4 <__adddf3>
 8005ec8:	e7e1      	b.n	8005e8e <__ieee754_log+0x2e>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	e7f5      	b.n	8005eba <__ieee754_log+0x5a>
 8005ece:	152c      	asrs	r4, r5, #20
 8005ed0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005ed4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005ed8:	441c      	add	r4, r3
 8005eda:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8005ede:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8005ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ee6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8005eea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8005eee:	ea42 0105 	orr.w	r1, r2, r5
 8005ef2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	4bb4      	ldr	r3, [pc, #720]	; (80061cc <__ieee754_log+0x36c>)
 8005efa:	f7fa f971 	bl	80001e0 <__aeabi_dsub>
 8005efe:	1cab      	adds	r3, r5, #2
 8005f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	4682      	mov	sl, r0
 8005f08:	468b      	mov	fp, r1
 8005f0a:	f04f 0200 	mov.w	r2, #0
 8005f0e:	dc53      	bgt.n	8005fb8 <__ieee754_log+0x158>
 8005f10:	2300      	movs	r3, #0
 8005f12:	f7fa fd85 	bl	8000a20 <__aeabi_dcmpeq>
 8005f16:	b1d0      	cbz	r0, 8005f4e <__ieee754_log+0xee>
 8005f18:	2c00      	cmp	r4, #0
 8005f1a:	f000 8122 	beq.w	8006162 <__ieee754_log+0x302>
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f7fa faac 	bl	800047c <__aeabi_i2d>
 8005f24:	a390      	add	r3, pc, #576	; (adr r3, 8006168 <__ieee754_log+0x308>)
 8005f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	460f      	mov	r7, r1
 8005f2e:	f7fa fb0f 	bl	8000550 <__aeabi_dmul>
 8005f32:	a38f      	add	r3, pc, #572	; (adr r3, 8006170 <__ieee754_log+0x310>)
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	4604      	mov	r4, r0
 8005f3a:	460d      	mov	r5, r1
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	4639      	mov	r1, r7
 8005f40:	f7fa fb06 	bl	8000550 <__aeabi_dmul>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4620      	mov	r0, r4
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	e7ba      	b.n	8005ec4 <__ieee754_log+0x64>
 8005f4e:	a38a      	add	r3, pc, #552	; (adr r3, 8006178 <__ieee754_log+0x318>)
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	4650      	mov	r0, sl
 8005f56:	4659      	mov	r1, fp
 8005f58:	f7fa fafa 	bl	8000550 <__aeabi_dmul>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	2000      	movs	r0, #0
 8005f62:	499b      	ldr	r1, [pc, #620]	; (80061d0 <__ieee754_log+0x370>)
 8005f64:	f7fa f93c 	bl	80001e0 <__aeabi_dsub>
 8005f68:	4652      	mov	r2, sl
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	460f      	mov	r7, r1
 8005f6e:	465b      	mov	r3, fp
 8005f70:	4650      	mov	r0, sl
 8005f72:	4659      	mov	r1, fp
 8005f74:	f7fa faec 	bl	8000550 <__aeabi_dmul>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	4639      	mov	r1, r7
 8005f80:	f7fa fae6 	bl	8000550 <__aeabi_dmul>
 8005f84:	4606      	mov	r6, r0
 8005f86:	460f      	mov	r7, r1
 8005f88:	b914      	cbnz	r4, 8005f90 <__ieee754_log+0x130>
 8005f8a:	4632      	mov	r2, r6
 8005f8c:	463b      	mov	r3, r7
 8005f8e:	e0a2      	b.n	80060d6 <__ieee754_log+0x276>
 8005f90:	4620      	mov	r0, r4
 8005f92:	f7fa fa73 	bl	800047c <__aeabi_i2d>
 8005f96:	a374      	add	r3, pc, #464	; (adr r3, 8006168 <__ieee754_log+0x308>)
 8005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9c:	4680      	mov	r8, r0
 8005f9e:	4689      	mov	r9, r1
 8005fa0:	f7fa fad6 	bl	8000550 <__aeabi_dmul>
 8005fa4:	a372      	add	r3, pc, #456	; (adr r3, 8006170 <__ieee754_log+0x310>)
 8005fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005faa:	4604      	mov	r4, r0
 8005fac:	460d      	mov	r5, r1
 8005fae:	4640      	mov	r0, r8
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	f7fa facd 	bl	8000550 <__aeabi_dmul>
 8005fb6:	e0a7      	b.n	8006108 <__ieee754_log+0x2a8>
 8005fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fbc:	f7fa f912 	bl	80001e4 <__adddf3>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4650      	mov	r0, sl
 8005fc6:	4659      	mov	r1, fp
 8005fc8:	f7fa fbec 	bl	80007a4 <__aeabi_ddiv>
 8005fcc:	ec41 0b18 	vmov	d8, r0, r1
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7fa fa53 	bl	800047c <__aeabi_i2d>
 8005fd6:	ec53 2b18 	vmov	r2, r3, d8
 8005fda:	ec41 0b19 	vmov	d9, r0, r1
 8005fde:	ec51 0b18 	vmov	r0, r1, d8
 8005fe2:	f7fa fab5 	bl	8000550 <__aeabi_dmul>
 8005fe6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8005fea:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8005fee:	9301      	str	r3, [sp, #4]
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4680      	mov	r8, r0
 8005ff6:	4689      	mov	r9, r1
 8005ff8:	f7fa faaa 	bl	8000550 <__aeabi_dmul>
 8005ffc:	a360      	add	r3, pc, #384	; (adr r3, 8006180 <__ieee754_log+0x320>)
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	4606      	mov	r6, r0
 8006004:	460f      	mov	r7, r1
 8006006:	f7fa faa3 	bl	8000550 <__aeabi_dmul>
 800600a:	a35f      	add	r3, pc, #380	; (adr r3, 8006188 <__ieee754_log+0x328>)
 800600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006010:	f7fa f8e8 	bl	80001e4 <__adddf3>
 8006014:	4632      	mov	r2, r6
 8006016:	463b      	mov	r3, r7
 8006018:	f7fa fa9a 	bl	8000550 <__aeabi_dmul>
 800601c:	a35c      	add	r3, pc, #368	; (adr r3, 8006190 <__ieee754_log+0x330>)
 800601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006022:	f7fa f8df 	bl	80001e4 <__adddf3>
 8006026:	4632      	mov	r2, r6
 8006028:	463b      	mov	r3, r7
 800602a:	f7fa fa91 	bl	8000550 <__aeabi_dmul>
 800602e:	a35a      	add	r3, pc, #360	; (adr r3, 8006198 <__ieee754_log+0x338>)
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f7fa f8d6 	bl	80001e4 <__adddf3>
 8006038:	4642      	mov	r2, r8
 800603a:	464b      	mov	r3, r9
 800603c:	f7fa fa88 	bl	8000550 <__aeabi_dmul>
 8006040:	a357      	add	r3, pc, #348	; (adr r3, 80061a0 <__ieee754_log+0x340>)
 8006042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006046:	4680      	mov	r8, r0
 8006048:	4689      	mov	r9, r1
 800604a:	4630      	mov	r0, r6
 800604c:	4639      	mov	r1, r7
 800604e:	f7fa fa7f 	bl	8000550 <__aeabi_dmul>
 8006052:	a355      	add	r3, pc, #340	; (adr r3, 80061a8 <__ieee754_log+0x348>)
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	f7fa f8c4 	bl	80001e4 <__adddf3>
 800605c:	4632      	mov	r2, r6
 800605e:	463b      	mov	r3, r7
 8006060:	f7fa fa76 	bl	8000550 <__aeabi_dmul>
 8006064:	a352      	add	r3, pc, #328	; (adr r3, 80061b0 <__ieee754_log+0x350>)
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	f7fa f8bb 	bl	80001e4 <__adddf3>
 800606e:	4632      	mov	r2, r6
 8006070:	463b      	mov	r3, r7
 8006072:	f7fa fa6d 	bl	8000550 <__aeabi_dmul>
 8006076:	460b      	mov	r3, r1
 8006078:	4602      	mov	r2, r0
 800607a:	4649      	mov	r1, r9
 800607c:	4640      	mov	r0, r8
 800607e:	f7fa f8b1 	bl	80001e4 <__adddf3>
 8006082:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006086:	9b01      	ldr	r3, [sp, #4]
 8006088:	3551      	adds	r5, #81	; 0x51
 800608a:	431d      	orrs	r5, r3
 800608c:	2d00      	cmp	r5, #0
 800608e:	4680      	mov	r8, r0
 8006090:	4689      	mov	r9, r1
 8006092:	dd48      	ble.n	8006126 <__ieee754_log+0x2c6>
 8006094:	4b4e      	ldr	r3, [pc, #312]	; (80061d0 <__ieee754_log+0x370>)
 8006096:	2200      	movs	r2, #0
 8006098:	4650      	mov	r0, sl
 800609a:	4659      	mov	r1, fp
 800609c:	f7fa fa58 	bl	8000550 <__aeabi_dmul>
 80060a0:	4652      	mov	r2, sl
 80060a2:	465b      	mov	r3, fp
 80060a4:	f7fa fa54 	bl	8000550 <__aeabi_dmul>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4606      	mov	r6, r0
 80060ae:	460f      	mov	r7, r1
 80060b0:	4640      	mov	r0, r8
 80060b2:	4649      	mov	r1, r9
 80060b4:	f7fa f896 	bl	80001e4 <__adddf3>
 80060b8:	ec53 2b18 	vmov	r2, r3, d8
 80060bc:	f7fa fa48 	bl	8000550 <__aeabi_dmul>
 80060c0:	4680      	mov	r8, r0
 80060c2:	4689      	mov	r9, r1
 80060c4:	b964      	cbnz	r4, 80060e0 <__ieee754_log+0x280>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	4630      	mov	r0, r6
 80060cc:	4639      	mov	r1, r7
 80060ce:	f7fa f887 	bl	80001e0 <__aeabi_dsub>
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	4650      	mov	r0, sl
 80060d8:	4659      	mov	r1, fp
 80060da:	f7fa f881 	bl	80001e0 <__aeabi_dsub>
 80060de:	e6d6      	b.n	8005e8e <__ieee754_log+0x2e>
 80060e0:	a321      	add	r3, pc, #132	; (adr r3, 8006168 <__ieee754_log+0x308>)
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	ec51 0b19 	vmov	r0, r1, d9
 80060ea:	f7fa fa31 	bl	8000550 <__aeabi_dmul>
 80060ee:	a320      	add	r3, pc, #128	; (adr r3, 8006170 <__ieee754_log+0x310>)
 80060f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f4:	4604      	mov	r4, r0
 80060f6:	460d      	mov	r5, r1
 80060f8:	ec51 0b19 	vmov	r0, r1, d9
 80060fc:	f7fa fa28 	bl	8000550 <__aeabi_dmul>
 8006100:	4642      	mov	r2, r8
 8006102:	464b      	mov	r3, r9
 8006104:	f7fa f86e 	bl	80001e4 <__adddf3>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4630      	mov	r0, r6
 800610e:	4639      	mov	r1, r7
 8006110:	f7fa f866 	bl	80001e0 <__aeabi_dsub>
 8006114:	4652      	mov	r2, sl
 8006116:	465b      	mov	r3, fp
 8006118:	f7fa f862 	bl	80001e0 <__aeabi_dsub>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4620      	mov	r0, r4
 8006122:	4629      	mov	r1, r5
 8006124:	e7d9      	b.n	80060da <__ieee754_log+0x27a>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	4650      	mov	r0, sl
 800612c:	4659      	mov	r1, fp
 800612e:	f7fa f857 	bl	80001e0 <__aeabi_dsub>
 8006132:	ec53 2b18 	vmov	r2, r3, d8
 8006136:	f7fa fa0b 	bl	8000550 <__aeabi_dmul>
 800613a:	4606      	mov	r6, r0
 800613c:	460f      	mov	r7, r1
 800613e:	2c00      	cmp	r4, #0
 8006140:	f43f af23 	beq.w	8005f8a <__ieee754_log+0x12a>
 8006144:	a308      	add	r3, pc, #32	; (adr r3, 8006168 <__ieee754_log+0x308>)
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	ec51 0b19 	vmov	r0, r1, d9
 800614e:	f7fa f9ff 	bl	8000550 <__aeabi_dmul>
 8006152:	a307      	add	r3, pc, #28	; (adr r3, 8006170 <__ieee754_log+0x310>)
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	4604      	mov	r4, r0
 800615a:	460d      	mov	r5, r1
 800615c:	ec51 0b19 	vmov	r0, r1, d9
 8006160:	e727      	b.n	8005fb2 <__ieee754_log+0x152>
 8006162:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80061b8 <__ieee754_log+0x358>
 8006166:	e694      	b.n	8005e92 <__ieee754_log+0x32>
 8006168:	fee00000 	.word	0xfee00000
 800616c:	3fe62e42 	.word	0x3fe62e42
 8006170:	35793c76 	.word	0x35793c76
 8006174:	3dea39ef 	.word	0x3dea39ef
 8006178:	55555555 	.word	0x55555555
 800617c:	3fd55555 	.word	0x3fd55555
 8006180:	df3e5244 	.word	0xdf3e5244
 8006184:	3fc2f112 	.word	0x3fc2f112
 8006188:	96cb03de 	.word	0x96cb03de
 800618c:	3fc74664 	.word	0x3fc74664
 8006190:	94229359 	.word	0x94229359
 8006194:	3fd24924 	.word	0x3fd24924
 8006198:	55555593 	.word	0x55555593
 800619c:	3fe55555 	.word	0x3fe55555
 80061a0:	d078c69f 	.word	0xd078c69f
 80061a4:	3fc39a09 	.word	0x3fc39a09
 80061a8:	1d8e78af 	.word	0x1d8e78af
 80061ac:	3fcc71c5 	.word	0x3fcc71c5
 80061b0:	9997fa04 	.word	0x9997fa04
 80061b4:	3fd99999 	.word	0x3fd99999
	...
 80061c0:	c3500000 	.word	0xc3500000
 80061c4:	43500000 	.word	0x43500000
 80061c8:	7fefffff 	.word	0x7fefffff
 80061cc:	3ff00000 	.word	0x3ff00000
 80061d0:	3fe00000 	.word	0x3fe00000

080061d4 <_init>:
 80061d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d6:	bf00      	nop
 80061d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061da:	bc08      	pop	{r3}
 80061dc:	469e      	mov	lr, r3
 80061de:	4770      	bx	lr

080061e0 <_fini>:
 80061e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e2:	bf00      	nop
 80061e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e6:	bc08      	pop	{r3}
 80061e8:	469e      	mov	lr, r3
 80061ea:	4770      	bx	lr
